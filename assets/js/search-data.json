{
  
    
        "post0": {
            "title": "Unit 2 - Using Objects",
            "content": "Objects - Instances of Classes . a class is a blueprint for creating objects with the same behavior and defined attributes | an object is a specific entity, made from a class, that you can manipulate in your programs | objects are instances of classes with variables used to name them | . Creating and Storing Objects (Instantiation) . constructors are used to initialize the attributes for an object | an example of formal parameters: | . public Person(String nm, int ag, boolean ad) { name = nm; age = ag; isAdult = ad; } . overloading constructors there can be more than one constructor for an object, which is called overloading the constructor | a no-argument constructor has no parameters and sets the instance variables for the object to default values | . | employee example - | . public class Employee { private String name; private String empId; private int pay; public Employee(String nm, String id, int pay) { name = nm; empId = id; pay = 20; } Employee person1 = new Employee(&quot;Simon&quot;, &quot;7628&quot;, 60000); Employee person2 = new Employee(&quot;Cassidy&quot;, &quot;3224&quot;, 60000); Employee person3 = new Employee(&quot;Bill&quot;, &quot;1810&quot;, 60000); } . Calling a Void Method . methods define the behaviors for all objects of a class and consist of a set of instructions for executing the behavior | procedural abstraction shortens and groups code so it&#39;s more simplified and methods can be used by other people without them having to understand it | letter example - | . | . public class Letter { public void writeLetter() { greeting(); specialMessage(); closing(); } public void greeting() { System.out.println(&quot;Hi, friend!&quot;); } public void specialMessage() { System.out.println(&quot;CSA is awesome!&quot;); } public void closing() { System.out.println(&quot;See you soon!&quot;); } public static void main(String[] args) { Letter friendLetter = new Letter(); friendLetter.writeLetter(); } } Letter.main(null); . Hi, friend! CSA is awesome! See you soon! . Calling a Void Method with Parameters . public class Calculator { public void calcAverage(int num1, double num2) { double average = (num1 + num2) / 2; System.out.println(&quot;The average is = &quot; + average); } public void calcAverage(int num1, int num2, double num3) { double average = (num1 + num2 + num3) / 3; System.out.println(&quot;The average is = &quot; + average); } public static void main(String[] args) { Calculator newAverage = new Calculator(); newAverage.calcAverage(21, 51.4); newAverage.calcAverage(4, 24, 72.2); } } Calculator.main(null); . The average is = 36.2 The average is = 33.4 .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/jupyter/2022/10/14/unit2-notes.html",
            "relUrl": "/jupyter/2022/10/14/unit2-notes.html",
            "date": " • Oct 14, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Unit 1 - Primitive Types",
            "content": "Primitives vs. Non-Primitives - . primitives - predefined | lowercase | &quot;Primitives&quot; | can&#39;t call methods | has a value | has different sizes according to type | . | non-primitives - defined by you | uppercase | &quot;Reference Types&quot; | can call methods | can be null | all the same size | . | . Primitives Review - . boolean true/false only | 1 bit | . | int integer values | 2-3 bits | . | double decimal values | 64 bits | . | additional - char | float | long | . | more info - casting widening is when you&#39;re going from a smaller data type to a bigger one | narrowing is going from a bigger data type to a smaller one | . | . Operators Review - . (+) addition | (-) subtraction | (/) division | (%) finds the remainder | (*) multiplication | (++) adds 1 | (--) subtracts 1 | (++x) adds x | (--x) subtracts x | compound operators - do a math operation and then assign it back to the variable (+=) adds | (-=) subtracts | (*=) multiplies | (/=) divides | (%=) finds the remainder | . | . public class CompOpsDemo { public static void main(String[] args) { int x = 6; x += 7; x -= 3; x *= 10; x /= 5; x %= 3; System.out.println(&quot;x = &quot; + x); } } CompOpsDemo.main(null); . x = 2 . public class CompOpsDemo { public static void main(String[] args) { int x = 2; int y = 7; x++; y--; System.out.println(&quot;x = &quot; + x); System.out.println(&quot;y = &quot; + y); } } CompOpsDemo.main(null); . x = 3 y = 2 . Question and Answer - . the value of z = 2 | a and d | val = 6 | i = 96 | j = 458 | | public class CompOpsDemo { public static void main(String[] args) { int i = 5; int p = 27; for(int l = 23; l &lt; p; l++) { i *= (l-22); } System.out.println(&quot;i = &quot; + i); } } CompOpsDemo.main(null); . i = 120 . // part a: /* * Write the Appointment method conflictsWith. * If the time interval of the current appointment * overlaps with the time interval of the appointment other, * method conflictsWith should return true, otherwise, * it should return false. * Complete method conflictsWith below. * returns true if the time interval of this Appointment * overlaps with the time interval of other; * otherwise, returns false */ public boolean conflictsWith(Appointment other) { return getTime().overlapsWith(other.getTime()); } // part b: /* Write the DailySchedule method clearConflicts. Method clearConflicts removes all appointments that conflict with the given appointment. In writing method clearConflicts, you may assume that conflictsWith works as specified, regardless of what you wrote in part (a). Complete method clearConflicts below. removes all appointments that overlap the given Appointment postcondition: all appointments that have a time conflict with appt have been removed from this DailySchedule */ public void clearConflicts(Appointment appt) { for (int i = apptList.size()-1; i &gt;= 0; i--) { if (appt.conflictsWith((Appointment)apptList.get(i))) { apptList.remove(i); } } } // part c: /* In writing method addAppt, you may assume that conflictsWith and clearConflicts work as specified, regardless of what you wrote in parts (a) and (b). Complete method addAppt below. if emergency is true, clears any overlapping appointments and adds appt to this DailySchedule; otherwise, if there are no conflicting appointments, adds appt to this DailySchedule; returns true if the appointment was added; otherwise, returns false */ public boolean addAppt(Appointment appt, boolean emergency) { if (emergency) { clearConflicts(appt); } else { for (int i = 0; i &lt; apptList.size(); i++) { if (appt.conflictsWith((Appointment)apptList.get(i))) { return false; } } } return apptList.add(appt); } . /* Write the TaxableItem method purchasePrice. The purchase price of a TaxableItem is its list price plus the tax on the item. The tax is computed by multiplying the list price by the tax rate. For example, if the tax rate is 0.10 (representing 10%), the purchase price of an item with a list price of $6.50 would be $7.15. Complete method purchasePrice below. returns the price of the item including the tax */ public double purchasePrice() { return (1 + taxRate) * getListPrice(); } . /* Complete method compareCustomer below. returns 0 when this customer is equal to other; a positive integer when this customer is greater than other; a negative integer when this customer is less than other */ public int compareCustomer(Customer other) { int nameCompare = getName().compareTo(other.getName()); if (nameCompare != 0) { return nameCompare; } else { return getID() - other.getID(); } } .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/jupyter/2022/10/14/unit1-notes.html",
            "relUrl": "/jupyter/2022/10/14/unit1-notes.html",
            "date": " • Oct 14, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Week 7 Work",
            "content": "| Overview | Week 0 | Week 1 | Week 2 | Week 3 | Week 4 | Week 5 | Week 6 | Week 7 | . Review Ticket . Array List Notebook . Java Recipe API . Peer review by Re’em: 2.7+/3 . Completed all the the requirements + made a Java Recipe API for the team and a Codehoots question array. .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/organization/week7",
            "relUrl": "/organization/week7",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Array List Notebook",
            "content": "// Importing all classes from java.util package import java.util.*; // Main class class CHQs { // Main driver method public static void main(String[] args) { // Creating an ArrayList of String type // Type safe ArrayList ArrayList&lt;String&gt; Qs = new ArrayList&lt;String&gt;(); // Adding elements to above object created // Custom input elements Qs.add(&quot;What is a correct syntax to output &#39;Hello World&#39; in Java?&quot;); Qs.add(&quot;Java is short for &#39;JavaScript&#39;. True or False?&quot;); Qs.add(&quot;How do you insert COMMENTS in Java code?&quot;); Qs.add(&quot;Which data type is used to create a variable that should store text?&quot;); Qs.add(&quot;How do you create a variable with the numeric value 5?&quot;); Qs.add(&quot;How do you create a variable with the floating number 2.8?&quot;); Qs.add(&quot;Which method can be used to find the length of a string?&quot;); Qs.add(&quot;Which method can be used to find the length of a string?&quot;); Qs.add(&quot;Which operator is used to add together two values?&quot;); Qs.add(&quot;The value of a string variable can be surrounded by single quotes. True or False?&quot;); Qs.add(&quot;Which operator can be used to compare two values?&quot;); Qs.add(&quot;To declare an array in Java, define the variable type with:&quot;); Qs.add(&quot;Do array indexes start with 1 or 0?&quot;); Qs.add(&quot;How do you create a method in Java?&quot;); Qs.add(&quot;Which keyword is used to create a class in Java?&quot;); System.out.println(&quot; tOur current Codehoots Question List:&quot;); // Print and display the elements of ArrayList for (int i = 0; i &lt; Qs.size();i++) { System.out.println(Qs.get(i)); } System.out.println(); // Removing an element from the array System.out.println(&quot; tThere&#39;s a duplicate question, so let&#39;s get rid of it:&quot;); Qs.remove(7); for (int i = 0; i &lt; Qs.size();i++) { System.out.println(Qs.get(i)); } System.out.println(); // Adding an element to the array System.out.println(&quot; tLet&#39;s add another question:&quot;); Qs.add(&quot;What is the correct way to create an object called myObj of MyClass?&quot;); // Print and display the elements of ArrayList one by one for (int i = 0; i &lt; Qs.size();i++) { System.out.println(Qs.get(i)); } } } CHQs.main(null); . Our current Codehoots Question List: What is a correct syntax to output &#39;Hello World&#39; in Java? Java is short for &#39;JavaScript&#39;. True or False? How do you insert COMMENTS in Java code? Which data type is used to create a variable that should store text? How do you create a variable with the numeric value 5? How do you create a variable with the floating number 2.8? Which method can be used to find the length of a string? Which method can be used to find the length of a string? Which operator is used to add together two values? The value of a string variable can be surrounded by single quotes. True or False? Which operator can be used to compare two values? To declare an array in Java, define the variable type with: Do array indexes start with 1 or 0? How do you create a method in Java? Which keyword is used to create a class in Java? There&#39;s a duplicate question, so let&#39;s get rid of it: What is a correct syntax to output &#39;Hello World&#39; in Java? Java is short for &#39;JavaScript&#39;. True or False? How do you insert COMMENTS in Java code? Which data type is used to create a variable that should store text? How do you create a variable with the numeric value 5? How do you create a variable with the floating number 2.8? Which method can be used to find the length of a string? Which operator is used to add together two values? The value of a string variable can be surrounded by single quotes. True or False? Which operator can be used to compare two values? To declare an array in Java, define the variable type with: Do array indexes start with 1 or 0? How do you create a method in Java? Which keyword is used to create a class in Java? Let&#39;s add another question: What is a correct syntax to output &#39;Hello World&#39; in Java? Java is short for &#39;JavaScript&#39;. True or False? How do you insert COMMENTS in Java code? Which data type is used to create a variable that should store text? How do you create a variable with the numeric value 5? How do you create a variable with the floating number 2.8? Which method can be used to find the length of a string? Which operator is used to add together two values? The value of a string variable can be surrounded by single quotes. True or False? Which operator can be used to compare two values? To declare an array in Java, define the variable type with: Do array indexes start with 1 or 0? How do you create a method in Java? Which keyword is used to create a class in Java? What is the correct way to create an object called myObj of MyClass? .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2022/10/09/array-lists.html",
            "relUrl": "/fastpages/jupyter/2022/10/09/array-lists.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Java API Notebook",
            "content": "import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://matchilling-chuck-norris-jokes-v1.p.rapidapi.com/jokes/random&quot;)) .header(&quot;accept&quot;, &quot;application/json&quot;) .header(&quot;X-RapidAPI-Key&quot;, &quot;60a050bd05msh74aa096ce4eab1cp1830c5jsn1612bc7b6d1f&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;matchilling-chuck-norris-jokes-v1.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); . {&#34;categories&#34;:[],&#34;created_at&#34;:&#34;2020-01-05 13:42:24.142371&#34;,&#34;icon_url&#34;:&#34;https://assets.chucknorris.host/img/avatar/chuck-norris.png&#34;,&#34;id&#34;:&#34;db3FuSrpTVeX3pE8Tt1pxg&#34;,&#34;updated_at&#34;:&#34;2020-01-05 13:42:24.142371&#34;,&#34;url&#34;:&#34;https://api.chucknorris.io/jokes/db3FuSrpTVeX3pE8Tt1pxg&#34;,&#34;value&#34;:&#34;College went to Chuck Norris.&#34;} . Web Service . package com.nighthawk.spring_portfolio.mvc.norris; import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; import java.util.Date; import java.util.HashMap; import org.json.simple.JSONObject; import org.json.simple.parser.JSONParser; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; @RestController // annotation to create a RESTful web services @RequestMapping(&quot;/api/chuck-norris&quot;) //prefix of API public class chuckNorris { private JSONObject body; //last run result private HttpStatus status; //last run status String last_run = null; //last run day of month // GET Covid 19 Stats @GetMapping(&quot;/daily&quot;) //added to end of prefix as endpoint public ResponseEntity&lt;JSONObject&gt; getNorris() { //calls API once a day, sets body and status properties String today = new Date().toString().substring(0,10); if (last_run == null || !today.equals(last_run)) { try { //APIs can fail (ie Internet or Service down) //RapidAPI header HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://matchilling-chuck-norris-jokes-v1.p.rapidapi.com/jokes/random&quot;)) .header(&quot;accept&quot;, &quot;application/json&quot;) .header(&quot;X-RapidAPI-Key&quot;, &quot;60a050bd05msh74aa096ce4eab1cp1830c5jsn1612bc7b6d1f&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;matchilling-chuck-norris-jokes-v1.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); //JSONParser extracts text body and parses to JSONObject this.body = (JSONObject) new JSONParser().parse(response.body()); this.status = HttpStatus.OK; //200 success this.last_run = today; } catch (Exception e) { //capture failure info HashMap&lt;String, String&gt; status = new HashMap&lt;&gt;(); status.put(&quot;status&quot;, &quot;RapidApi failure: &quot; + e); //Setup object for error this.body = (JSONObject) status; this.status = HttpStatus.INTERNAL_SERVER_ERROR; //500 error this.last_run = null; } } //return JSONObject in RESTful style return new ResponseEntity&lt;&gt;(body, status); } } . | package com.nighthawk.spring_portfolio.mvc.translate; illegal start of expression .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2022/10/02/java-api.html",
            "relUrl": "/fastpages/jupyter/2022/10/02/java-api.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Arrays and Images",
            "content": "Image ASCII Conversion . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;ghtop_images/&quot;; // location of images private final String outDir = &quot;ghtop_images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; Image grayImg = null; int width = (int) (this.width * (scale/40.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); grayImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col.getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot;&quot;; } else if (g &gt;= 230) { str = &quot;@&quot;; } else if (g &gt;= 210) { str = &quot;#&quot;; } else if (g &gt;= 200) { str = &quot;W&quot;; } else if (g &gt;= 190) { str = &quot;&amp;&quot;; } else if (g &gt;= 180) { str = &quot;0&quot;; } else if (g &gt;= 170) { str = &quot;m&quot;; } else if (g &gt;= 160) { str = &quot;K&quot;; } else if (g &gt;= 150) { str = &quot;U&quot;; } else if (g &gt;= 140) { str = &quot;o&quot;; } else if (g &gt;= 130) { str = &quot;I&quot;; } else if (g &gt;= 120) { str = &quot;{&quot;; } else if (g &gt;= 110) { str = &quot;=&quot;; } else if (g &gt;= 100) { str = &quot;&gt;&quot;; } else if (g &gt;= 90) { str = &quot;+&quot;; } else if (g &gt;= 80) { str = &quot;(&quot;; } else if (g &gt;= 70) { str = &quot; &quot;; } else if (g &gt;= 60) { str = &quot;;&quot;; } else if (g &gt;= 50) { str = &quot;~&quot;; } else if (g &gt;= 40) { str = &quot;:&quot;; } else if (g &gt;= 20) { str = &quot;.&quot;; } else { str = &quot;`&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisa.printStats(&quot;Original&quot;); monaLisa.resize(33); monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToAscii(); Pics pumpkin = new Pics(&quot;pumpkin&quot;, &quot;png&quot;); pumpkin.printStats(&quot;Original&quot;); pumpkin.resize(33); pumpkin.printStats(&quot;Scaled&quot;); pumpkin.convertToAscii(); Pics karate = new Pics(&quot;karate&quot;, &quot;png&quot;); karate.printStats(&quot;Original&quot;); karate.resize(33); karate.printStats(&quot;Scaled&quot;); karate.convertToAscii(); Pics floaty = new Pics(&quot;floaty&quot;, &quot;png&quot;); floaty.printStats(&quot;Original&quot;); floaty.resize(33); floaty.printStats(&quot;Scaled&quot;); floaty.convertToAscii(); } } Pics.main(null); . Original: 499298 389x413 ghtop_images/MonaLisa.png Scaled: 139407 321x136 ghtop_images/tmp/MonaLisa.png Original: 39392 302x265 ghtop_images/pumpkin.png Scaled: 19531 249x87 ghtop_images/tmp/pumpkin.png Original: 493623 549x365 ghtop_images/karate.png Scaled: 175118 453x120 ghtop_images/tmp/karate.png Original: 250824 549x341 ghtop_images/floaty.png Scaled: 99679 453x113 ghtop_images/tmp/floaty.png .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2022/09/30/arrays-and-images.html",
            "relUrl": "/fastpages/jupyter/2022/09/30/arrays-and-images.html",
            "date": " • Sep 30, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Week 6 Work",
            "content": "| Overview | Week 0 | Week 1 | Week 2 | Week 3 | Week 4 | Week 5 | Week 6 | Week 7 | . Review Ticket . Images to ASCII . Java API . Peer review by Re’em: 2.7+/3 . Completed all the the requirements + made extra ascii images and a web service for the api. .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/organization/week6",
            "relUrl": "/organization/week6",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Week 5 Work",
            "content": "| Overview | Week 0 | Week 1 | Week 2 | Week 3 | Week 4 | Week 5 | Week 6 | Week 7 | . Review Ticket . Fibonacci . JavaScript Tutorial . Peer review by Re’em: 2.7+/3 . Completed all the the requirements and made a frontend display for the JS tutorial assignment. .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/organization/week5",
            "relUrl": "/organization/week5",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "JavaScript Tutorial",
            "content": "var msg = &quot;Hello, World!&quot;; function logIt(output) { console.log(output); } logIt(msg); console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Failed to start the Kernel. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. . Loosely Typed Language Demonstration . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Failed to start the Kernel. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. . Timer . $$.async(); console.log(&quot;Hello, World!&quot;); var action = { $$: $$, console: console, }; setTimeout(function() { $$.clear(0); // clear output cell action.$$.sendResult(&quot;Goodbye!&quot;); }, 2000); // 2 second timer . Failed to start the Kernel. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. . Colors Hack . const resultContainer = document.getElementById(&quot;result&quot;); // function holds data for colors function Color(name, emotion, symbolism) { this.name = name; this.emotion = emotion; this.symbolism = symbolism; } // json conversion function Color.prototype.toJSON = function() { const obj = {name: this.name, emotion: this.emotion, symbolism: this.symbolism}; const json = JSON.stringify(obj); return json; } // list of colors var list = [ new Color( &quot;Red&quot;, &quot;:)&quot;, &quot;life, health, vigor&quot;), new Color( &quot;Orange&quot;, &quot;:)&quot;, &quot;fun, strength, courage&quot;), new Color( &quot;Yellow&quot;, &quot;:)&quot;, &quot;happiness, warmth, sunshine&quot;), new Color( &quot;Green&quot;, &quot;:|&quot;, &quot;nature, wisdom&quot;), new Color( &quot;Blue&quot;, &quot;:(&quot;, &quot;calmness, despair&quot;), new Color( &quot;Indigo&quot;, &quot;:(&quot;, &quot;communication, peace&quot;), new Color( &quot;Violet&quot;, &quot;:(&quot;, &quot;higher self, comprehension&quot;) ]; function ColorClass(colors){ this.ColorClass = colors; this.json = []; this.ColorClass.forEach(colors =&gt; this.json.push(colors.toJSON())); } // creates colorlist object colorlist = new ColorClass(list); // javascript variables and methods to build html using previous data for (const row of colorlist.ColorClass) { const tr = document.createElement(&quot;tr&quot;); const name = document.createElement(&quot;td&quot;); const emotion = document.createElement(&quot;td&quot;); const symbolism = document.createElement(&quot;td&quot;); name.innerHTML = row.name; emotion.innerHTML = row.emotion; symbolism.innerHTML = row.symbolism; tr.appendChild(symbolism); tr.appendChild(name); tr.appendChild(emotion); resultContainer.appendChild(tr); } . Failed to start the Kernel. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2022/09/25/javascript-tutorial.html",
            "relUrl": "/fastpages/jupyter/2022/09/25/javascript-tutorial.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Fibonacci Notebook",
            "content": "/* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } Fibo.main(null); . Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . For Loop . public class FiboForLoop extends Fibo { protected void init() { this.name = &quot;For&quot;; long limit = this.size; // for loops are likely the most common iteration structure, all the looping facts are in one line for (long[] f = new long[]{0, 1}; limit-- &gt; 0; f = new long[]{f[1], f[0] + f[1]}) this.setData(f[0]); } static public void main(String[] args) { FiboForLoop fib = new FiboForLoop(); fib.print(); } } FiboForLoop.main(null); . Init method = For fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . While Loop . public class FiboWhileLoop extends Fibo { protected void init() { this.name = &quot;While&quot;; long limit = this.size; long[] f = new long[]{0, 1}; while (limit-- &gt; 0) { this.setData(f[0]); f = new long[]{f[1], f[0] + f[1]}; } } static public void main(String[] args) { FiboWhileLoop fib = new FiboWhileLoop(); fib.print(); } } FiboWhileLoop.main(null); . Init method = While fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . Recursive Loop . public class FiboRecursive extends Fibo{ public void recursion(long limit, long[] f) { if (limit == 0) return; this.setData(f[0]); recursion(--limit, new long[]{f[1], f[0] + f[1]}); } protected void init() { this.name = &quot;Recursion&quot;; long limit = this.size; long[] f = new long[]{0, 1}; recursion(limit,f); } static public void main(String[] args) { FiboRecursive fib = new FiboRecursive(); fib.print(); } } FiboRecursive.main(null); . Init method = Recursion fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . College Board Standards . Skill 1.B: Determine code that would be used to complete code segments (ie For, While, Recursion) . When extending the Fibo class you had to pick the specific segment of code that would have to be put in the for/while/recursive loop | . | Skill 4.C: Determine if two or more code segments yield equivalent results (be sure to Discuss how you know results are the same) . We determined that there were 4 different ways to produce the same fibonacci code, with either stream, or a for/while/recursive loop | . | Skill 5.A: Describe the behavior of a given segment of program code (describe the difference in recursion versus for &amp; while loops, perhaps add timing to determine speed) . The 4 different methods have 4 different speeds and efficiencies. | The recursion code segment iterates by running the function called &quot;recursion&quot;, which called the setdata method, and then re-runs itself by calling itself, and reducing limit by 1 each time, until limit = 0. | The while loop does the same as the recursive loop, but instead of calling itself over and over again, the loop is built into the &quot;while&quot; statement, which loops while (limit-- &gt; 0), which reduces limit each time by 1. | . | .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2022/09/25/fibonacci.html",
            "relUrl": "/fastpages/jupyter/2022/09/25/fibonacci.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Colors Frontend",
            "content": "Name Emotion Symbolism .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/markdown/2022/09/25/colors-frontend.html",
            "relUrl": "/markdown/2022/09/25/colors-frontend.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Week 4 Work",
            "content": "| Overview | Week 0 | Week 1 | Week 2 | Week 3 | Week 4 | Week 5 | Week 6 | Week 7 | . Review Ticket . FRQ Type #1 . Iteration with 2D Arrays . Solar System . Control Structures in Java . Attempted Greet and Character Counter . frontend | backend | . Peer review by Re’em: 2.7+/3 . She has all of the requirements and did extra work in the iteration with 2D array assignment. Also added the solar system by Tristan and answered extra questions at the end of the mini-lab. .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/organization/week4",
            "relUrl": "/organization/week4",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "FRQ Type 1",
            "content": "2018 AP&#174; COMPUTER SCIENCE A FREE-RESPONSE QUESTIONS . This question involves reasoning about a simulation of a frog hopping in a straight line. The frog attempts to hop to a goal within a specified number of hops. The simulation is encapsulated in the following FrogSimulation class. You will write two of the methods in this class. . public class FrogSimulation { /** Distance, in inches, from the starting position to the goal. */ private int goalDistance; /** Maximum number of hops allowed to reach the goal. */ private int maxHops; /** Constructs a FrogSimulation where dist is the distance, in inches, from the starting * position to the goal, and numHops is the maximum number of hops allowed to reach the goal. * Precondition: dist &gt; 0; numHops &gt; 0 */ public FrogSimulation(int dist, int numHops) { goalDistance = dist; maxHops = numHops; } /** Returns an integer representing the distance, in inches, to be moved when the frog hops. */ private int hopDistance() { /* implementation not shown */ } /** Simulates a frog attempting to reach the goal as described in part (a). * Returns true if the frog successfully reached or passed the goal during the simulation; * false otherwise. */ public boolean simulate() { /* to be implemented in part (a) */ } /** Runs num simulations and returns the proportion of simulations in which the frog * successfully reached or passed the goal. * Precondition: num &gt; 0 */ public double runSimulations(int num) { /* to be implemented in part (b) */ } } FrogSimulation.main(null); . | { /* implementation not shown */ } missing return statement | { /* to be implemented in part (a) */ } missing return statement | { /* to be implemented in part (b) */ } missing return statement . a) . Write the simulate method, which simulates the frog attempting to hop in a straight line to a goal from the frog&#39;s starting position of 0 within a maximum number of hops. The method returns true if the frog successfully reached the goal within the maximum number of hops; otherwise, the method returns false. | The FrogSimulation class provides a method called hopDistance that returns an integer representing the distance (positive or negative) to be moved when the frog hops. A positive distance represents a move toward the goal. A negative distance represents a move away from the goal. The returned distance may vary from call to call. Each time the frog hops, its position is adjusted by the value returned by a call to the hopDistance method. | The frog hops until one of the following conditions becomes true: The frog has reached or passed the goal. | The frog has reached a negative position. | The frog has taken the maximum number of hops without reaching the goal. | . | The following example shows a declaration of a FrogSimulation object for which the goal distance is 24 inches and the maximum number of hops is 5. The table shows some possible outcomes of calling the simulate method. | . FrogSimulation sim = new FrogSimulation(24, 5); Values returned by | Final position | Return value of hopDistance() | of frog | sim.simulate() Example 1: 5, 7, -2, 8, 6 | 24 | true Example 2: 6, 7, 6, 6 | 25 | true Example 3: 6, -6, 31 | 31 | true Example 4: 4, 2, -8 | -2 | false Example 5: 5, 4, 2, 4, 3 | 18 | false . Complete method simulate below. You must use hopDistance appropriately to receive full credit. | . /** Simulates a frog attempting to reach the goal as described in part (a). * Returns true if the frog successfully reached or passed the goal during the simulation; * false otherwise. */ public boolean simulate() { int position = 0; // frog starts at 0 for (int count = 0; count &lt; maxHops; count++) { // maxHops is the max the frog can hop, and after each hop the count goes up by one, the loop repeating until count = maxHops position += hopDistance(); if (position &gt;= goalDistance) { // if the frog goes farther than needed, return true return true; } else if (position &lt; 0) { // if the frog isn&#39;t there, return false and keep going return false; } } return false; // if the hops are taken up without the goal being met, it returns false } . (b) . Write the runSimulations method, which performs a given number of simulations and returns the proportion of simulations in which the frog successfully reached or passed the goal. For example, if the parameter passed to runSimulations is 400, and 100 of the 400 simulate method calls returned true, then the runSimulations method should return 0.25. | Complete method runSimulations below. Assume that simulate works as specified, regardless of what you wrote in part (a). You must use simulate appropriately to receive full credit. | . /** Runs num simulations and returns the proportion of simulations in which the frog * successfully reached or passed the goal. * Precondition: num &gt; 0 */ public double runSimulations(int num) { // double makes it so the value can be a decimal int countSuccess = 0; // starts at 0 for (int count = 0; count &lt; num; count++) { // checks if the simulation was successful for each time it was run if(simulate()) { // if it turns out true, raise the count of the number of successful runs countSuccess++; } } return (double)countSuccess / num; // divides the number of successes to the overall amount of simulations to find the final result } .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2022/09/19/frq1.html",
            "relUrl": "/fastpages/jupyter/2022/09/19/frq1.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Control Structures in Java",
            "content": ". . . Conditional Branches, which we use for choosing between two or more paths. | Loops that are used to iterate through and repeatedly run specific code blocks. | Branching Statements, which are used to alter the flow of control in loops. | . Conditional Branches: . The If/Else Statement . if (count &gt; 2) { System.out.println(&quot;Count is higher than 2&quot;); } else { System.out.println(&quot;Count is lower or equal than 2&quot;); } . The Switch Statement . switch (count) { case 0: System.out.println(&quot;Count is equal to 0&quot;); break; case 1: System.out.println(&quot;Count is equal to 1&quot;); break; default: System.out.println(&quot;Count is either negative, or higher than 1&quot;); break; } . Loops! . The For Loop: . for (int i = 1; i &lt;= 50; i++) { methodToRepeat(); } . The While Loop: . int whileCounter = 1; while (whileCounter &lt;= 50) { methodToRepeat(); whileCounter++; } . Branching Statements: . The Break: . List&lt;String&gt; names = getNameList(); String name = &quot;John Doe&quot;; int index = 0; for ( ; index &lt; names.length; index++) { if (names[index].equals(name)) { break; } } . The Continue: . List&lt;String&gt; names = getNameList(); String name = &quot;John Doe&quot;; String list = &quot;&quot;; for (int i = 0; i &lt; names.length; i++) { if (names[i].equals(name)) { continue; } list += names[i]; } .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2022/09/19/control-structures.html",
            "relUrl": "/fastpages/jupyter/2022/09/19/control-structures.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Iteration with 2D Arrays",
            "content": "Cat Version . class CatLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] cats; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public CatLoop() { //Storing Data in 2D arrays cats = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Cat 0 { &quot; 1 / &quot;, //[0][0] eyes &quot; ) ( &#39;) &quot;, //[0][1] chin &quot; ( / ) &quot;, //[0][2] body &quot; (__)| &quot; //[0][3] legs }, //Cat 1 { &quot; 2 / &quot;, //[1][0] eyes &quot; ) ( &#39;) &quot;, //[1][1] chin &quot; ( / ) &quot;, //[1][2] body &quot; (__)| &quot; //[1][3] legs }, //Cat 2 { &quot; 3 / &quot;, //[2][0] eyes &quot; ) ( &#39;) &quot;, //[2][1] chin &quot; ( / ) &quot;, //[2][2] body &quot; (__)| &quot; //[2][3] legs }, //Cat 3 { &quot; 4 / &quot;, //[3][0] eyes &quot; ) ( &#39;) &quot;, //[3][1] chin &quot; ( / ) &quot;, //[3][2] body &quot; (__)| &quot; //[3][3] legs }, //Cat 4 { &quot; 5 / &quot;, //[4][0] eyes &quot; ) ( &#39;) &quot;, //[4][1] chin &quot; ( / ) &quot;, //[4][2] body &quot; (__)| &quot; //[4][3] legs }, //Cat 5 { &quot; 6 / &quot;, //[5][0] eyes &quot; ) ( &#39;) &quot;, //[5][1] chin &quot; ( / ) &quot;, //[5][2] body &quot; (__)| &quot; //[5][3] legs }, //Cat 6 { &quot; 7 / &quot;, //[6][0] eyes &quot; ) ( &#39;) &quot;, //[6][1] chin &quot; ( / ) &quot;, //[6][2] body &quot; (__)| &quot; //[6][3] legs }, }; } /** * Loop and print cats in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Oh No the Cats Are Leaving!&quot;); // cats (non-primitive) defined in constructor knows its length int catCount = cats.length; for (int i = catCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Cats // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; cats are hanging out, but then another leaves...&quot;); System.out.println(); //how many separate parts are there in a cat cat? for (int row = 0; row &lt; catCount; row++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each cat part by part, will eventually print entire column*/ for (int col = 0; col &lt; cats[row].length; col++) { // prints specific part of the cat from the column System.out.print(cats[row][col] + &quot; &quot;); //this is new line between separate parts System.out.println(); } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing catCount variable by 1 catCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;Oh No, all the Cats have left...&quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new CatLoop().printPoem(); //a new cat list and output in one step } } CatLoop.main(null); . Oh No the Cats Are Leaving! 7 cats are hanging out, but then another leaves... 1 / ) ( &#39;) ( / ) (__)| 2 / ) ( &#39;) ( / ) (__)| 3 / ) ( &#39;) ( / ) (__)| 4 / ) ( &#39;) ( / ) (__)| 5 / ) ( &#39;) ( / ) (__)| 6 / ) ( &#39;) ( / ) (__)| 7 / ) ( &#39;) ( / ) (__)| 6 cats are hanging out, but then another leaves... 1 / ) ( &#39;) ( / ) (__)| 2 / ) ( &#39;) ( / ) (__)| 3 / ) ( &#39;) ( / ) (__)| 4 / ) ( &#39;) ( / ) (__)| 5 / ) ( &#39;) ( / ) (__)| 6 / ) ( &#39;) ( / ) (__)| 5 cats are hanging out, but then another leaves... 1 / ) ( &#39;) ( / ) (__)| 2 / ) ( &#39;) ( / ) (__)| 3 / ) ( &#39;) ( / ) (__)| 4 / ) ( &#39;) ( / ) (__)| 5 / ) ( &#39;) ( / ) (__)| 4 cats are hanging out, but then another leaves... 1 / ) ( &#39;) ( / ) (__)| 2 / ) ( &#39;) ( / ) (__)| 3 / ) ( &#39;) ( / ) (__)| 4 / ) ( &#39;) ( / ) (__)| 3 cats are hanging out, but then another leaves... 1 / ) ( &#39;) ( / ) (__)| 2 / ) ( &#39;) ( / ) (__)| 3 / ) ( &#39;) ( / ) (__)| 2 cats are hanging out, but then another leaves... 1 / ) ( &#39;) ( / ) (__)| 2 / ) ( &#39;) ( / ) (__)| 1 cats are hanging out, but then another leaves... 1 / ) ( &#39;) ( / ) (__)| Oh No, all the Cats have left... . Printing Sideways . class CatLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] cats; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public CatLoop() { //Storing Data in 2D arrays cats = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Cat 0 { &quot; 1 / &quot;, //[0][0] eyes &quot; ) ( &#39;) &quot;, //[0][1] chin &quot; ( / ) &quot;, //[0][2] body &quot; (__)| &quot; //[0][3] legs }, //Cat 1 { &quot; 2 / &quot;, //[1][0] eyes &quot; ) ( &#39;) &quot;, //[1][1] chin &quot; ( / ) &quot;, //[1][2] body &quot; (__)| &quot; //[1][3] legs }, //Cat 2 { &quot; 3 / &quot;, //[2][0] eyes &quot; ) ( &#39;) &quot;, //[2][1] chin &quot; ( / ) &quot;, //[2][2] body &quot; (__)| &quot; //[2][3] legs }, //Cat 3 { &quot; 4 / &quot;, //[3][0] eyes &quot; ) ( &#39;) &quot;, //[3][1] chin &quot; ( / ) &quot;, //[3][2] body &quot; (__)| &quot; //[3][3] legs }, //Cat 4 { &quot; 5 / &quot;, //[4][0] eyes &quot; ) ( &#39;) &quot;, //[4][1] chin &quot; ( / ) &quot;, //[4][2] body &quot; (__)| &quot; //[4][3] legs }, //Cat 5 { &quot; 6 / &quot;, //[5][0] eyes &quot; ) ( &#39;) &quot;, //[5][1] chin &quot; ( / ) &quot;, //[5][2] body &quot; (__)| &quot; //[5][3] legs }, //Cat 6 { &quot; 7 / &quot;, //[6][0] eyes &quot; ) ( &#39;) &quot;, //[6][1] chin &quot; ( / ) &quot;, //[6][2] body &quot; (__)| &quot; //[6][3] legs }, }; } /** * Loop and print cats in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Oh No the Cats Are Leaving!&quot;); // cats (non-primitive) defined in constructor knows its length int catCount = 7; for (int i = catCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Cats // concatenation (+) of the loop variable and string to form a countdown message System.out.println(&quot; &quot;); System.out.println(&quot; &quot;); System.out.println(i + &quot; cats are hanging out, but then another leaves...&quot;); System.out.println(&quot; &quot;); // printing the cats horizontally for (int col = 0; col &lt; 4; col++) { //cycles through the columns after each row is completed for (int row = 0; row &lt; catCount; row++) { //cycles through each row first System.out.print(cats[row][col] + &quot; &quot;); } System.out.println(&quot; &quot;); } catCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot; &quot;); System.out.println(&quot; &quot;); System.out.println(&quot;Oh No, all the Cats have left...&quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new CatLoop().printPoem(); //a new cat list and output in one step } } CatLoop.main(null); . Oh No the Cats Are Leaving! 7 cats are hanging out, but then another leaves... 1 / 2 / 3 / 4 / 5 / 6 / 7 / ) ( &#39;) ) ( &#39;) ) ( &#39;) ) ( &#39;) ) ( &#39;) ) ( &#39;) ) ( &#39;) ( / ) ( / ) ( / ) ( / ) ( / ) ( / ) ( / ) (__)| (__)| (__)| (__)| (__)| (__)| (__)| 6 cats are hanging out, but then another leaves... 1 / 2 / 3 / 4 / 5 / 6 / ) ( &#39;) ) ( &#39;) ) ( &#39;) ) ( &#39;) ) ( &#39;) ) ( &#39;) ( / ) ( / ) ( / ) ( / ) ( / ) ( / ) (__)| (__)| (__)| (__)| (__)| (__)| 5 cats are hanging out, but then another leaves... 1 / 2 / 3 / 4 / 5 / ) ( &#39;) ) ( &#39;) ) ( &#39;) ) ( &#39;) ) ( &#39;) ( / ) ( / ) ( / ) ( / ) ( / ) (__)| (__)| (__)| (__)| (__)| 4 cats are hanging out, but then another leaves... 1 / 2 / 3 / 4 / ) ( &#39;) ) ( &#39;) ) ( &#39;) ) ( &#39;) ( / ) ( / ) ( / ) ( / ) (__)| (__)| (__)| (__)| 3 cats are hanging out, but then another leaves... 1 / 2 / 3 / ) ( &#39;) ) ( &#39;) ) ( &#39;) ( / ) ( / ) ( / ) (__)| (__)| (__)| 2 cats are hanging out, but then another leaves... 1 / 2 / ) ( &#39;) ) ( &#39;) ( / ) ( / ) (__)| (__)| 1 cats are hanging out, but then another leaves... 1 / ) ( &#39;) ( / ) (__)| Oh No, all the Cats have left... . Further Questions . Is this program in more of an Imperative Programming Style or OOP style? . Java is an imperative programming language, so you have to be very specific with what you want the code to do, and not leave it open to interpretation. I think this program is more of an Imperative Programming Style, because you needed to be very specific to make sure the code worked, and Java didn&#39;t guess what you wanted based on the goal, you had to drag it there. . What did you Observe about Variable Assignments? . Variables were mostly assigned to moving parts of the program, and mainly for keeping track and counting down the monkeys, along with the monkey rows and columns. Nonessential things like the names of the rows or cols weren&#39;t made into variables. . Is Each Monkey an Object? . No, each monkey is not an object, but its parts are separate components in an array. Those parts of the array are called throughout the program and rearranged. . How do 2D Array References work? . Referencing an array or specific parts of it have a standard format of name-of-the-array[row#][col#], where row and col are integers or variables that have int values, like in this program. .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2022/09/18/iteration-2d-array.html",
            "relUrl": "/fastpages/jupyter/2022/09/18/iteration-2d-array.html",
            "date": " • Sep 18, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Solar System",
            "content": "",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/markdown/2022/09/16/solar-system.html",
            "relUrl": "/markdown/2022/09/16/solar-system.html",
            "date": " • Sep 16, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Week 3 Work",
            "content": "| Overview | Week 0 | Week 1 | Week 2 | Week 3 | Week 4 | Week 5 | Week 6 | Week 7 | . Review Ticket . Lesson on ifs and expressions . Deployment on AWS . Focus / Habits . Human Work Organization .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/organization/week3",
            "relUrl": "/organization/week3",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "If-Else Notebook",
            "content": "Definitions: . Conditional Statement: . A statement that only executes when a condition is true | . Boolean: . A primitive data type that can be either true or false | . If Statement: . The code in the body of an if statement will only execute if the code is true | . If-Else Statement: . Same as an if statement, but if the condition is false the code in the body of the else statement will execute | . (==) : equal to . (!=) : not equal to . (&lt;=) : less than or equal to . (&gt;=) : greater than or equal to . (&amp;&amp;) : and . (||) : or . Complex 5 layer While, If, and Else statement program: . import java.util.Scanner; // this is a program that would display if a score in a game is enough to advance to the next level public class Score { public static void main(String[] args) { // where the user inputs their score Scanner input = new Scanner(System.in); int score = 0; // makes it so the program runs until the user decides to quit the program while (score != -100) { System.out.print(&quot;Enter the student&#39;s score (or -100 to quit): &quot;); score = input.nextInt(); // if the score is less than 30, the user cannot advance if (score &gt;= 0 &amp;&amp; score &lt;= 29) { System.out.println(&quot; nScore: {&quot; + score + &quot;} | is not enough to advance to the next level.&quot;); } // if the score is then less than 80, they can go on, but haven&#39;t beaten the high score of 80 else { if (score &gt;= 30 &amp;&amp; score &lt;= 79) { System.out.println(&quot; nScore: {&quot; + score + &quot;} | is enough to advance, but is less than the high score.&quot;); } // if they got higher than 80, they&#39;ve gotten the high score else { if (score &gt;= 80 &amp;&amp; score &lt;= 100) { System.out.println(&quot; nScore: {&quot; + score + &quot;} | is enough to advance, and greater than the high score!&quot;); } // this is what runs if they decide to quit the program else { if (score == -100) { System.out.println(&quot;Goodbye!&quot;); } // this is if the user types in an invalid score else { System.out.println(&quot;The score entered is invalid. Please try again.&quot;); } } } } } } } Score.main(null); . Enter the student&#39;s score (or -100 to quit): Score: {13} | is not enough to advance to the next level. Enter the student&#39;s score (or -100 to quit): Score: {50} | is enough to advance, but is less than the high score. Enter the student&#39;s score (or -100 to quit): Score: {89} | is enough to advance, and greater than the high score! Enter the student&#39;s score (or -100 to quit): Goodbye! . De Morgan&#39;s Laws: . De Morgan&#39;s Law of Union: The complement of the union of the two sets A and B will be equal to the intersection of A&#39; (complement of A) and B&#39; (complement of B). This is also known as De Morgan&#39;s Law of Union. It can be represented as (A ∪ B)’ = A’ ∩ B’. | De Morgan&#39;s Law of Intersection: The complement of the intersection of A and B will be equal to the union of A&#39; and B&#39;. This condition is called De Morgan&#39;s law of Intersection. It can be given by (A ∩ B)’ = A’ ∪ B’. | . Simplified: . not(A and B) --&gt; notA or notB | not(A or B) --&gt; notA and notB | not(A and B) =/= notA and notB | .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2022/09/11/if-else.html",
            "relUrl": "/fastpages/jupyter/2022/09/11/if-else.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Focus and Habits",
            "content": "Psychology and the Good Life, by Laurie Santos . Main Points of the Video . This new enterprise or goal is possible. | We think life’s circumstances matter a lot, but they don’t matter as much as we think. | Taking control of life, is kind of hard. | Make time for social connection | Help others whenever you can | Make time for gratitude | Healthy practices matter a lot more than we think | Taking time to be in the present moment | Become wealthy in terms of time | . Goal Setting . 3 Personal Goals . Start a new hobby | Level up in my favorite video game | Improve focus and motivation in general | 3 Academic Goals . Score well on the SAT and ACT | Contribute more to clubs I am a part of | Do well in AP CSA | Gratitude Logs . In School . Thank you to my friends who sit with me at lunch and make me laugh | Thank you to my teachers that try their best to teach me | Thank you to my councilor who handled my schedule change | Thank you to my fellow guard members who helped me settle in and catch up | Thank you to my classmates for helping me understand classwork and class concepts | . At Home . Thank you to my mom who does literally everything for me, she’s amazing | Thank you to my dad for supporting me | Thank you to my brother for being entertaining sometimes | Thank you to my house for being a very comfortable house | .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/focus-and-habits",
            "relUrl": "/focus-and-habits",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Week 2 Work",
            "content": "| Overview | Week 0 | Week 1 | Week 2 | Week 3 | Week 4 | Week 5 | Week 6 | Week 7 | . Review Ticket . Code.org OOP Assignment . Console Math Menu . Life . Weekly Organization .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/organization/week2",
            "relUrl": "/organization/week2",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Game of Life",
            "content": "| Overview | Week 0 | Week 1 | Week 2 | Week 3 | Week 4 | Week 5 | Week 6 | Week 7 | . Remix of Game of Life . start step",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/organization/life",
            "relUrl": "/organization/life",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Grades Calculator",
            "content": "| Overview | Week 0 | Week 1 | Week 2 | Week 3 | Week 4 | Week 5 | Week 6 | Week 7 | . Grade Calculator . Total : 0.0 Count : 0.0 Average : 0.0 Input a score, and then press tab to add new number: .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/organization/grades",
            "relUrl": "/organization/grades",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Console Math Menu",
            "content": "// imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;__________________________ n&quot;); System.out.println(&quot;Choose from these choices:&quot;); System.out.println(&quot;__________________________ n&quot;); System.out.println(&quot;1 - Say Hello&quot;); System.out.println(&quot;2 - Output colors&quot;); System.out.println(&quot;3 - Loading in color&quot;); System.out.println(&quot;4 - Factorial Calculator&quot;); System.out.println(&quot;5 - Degrees to Radians&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;__________________________ n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World!&quot;); break; case 2: for(int i = 0; i &lt; COLORS.length; i++) // loop through COLORS array System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); break; case 3: System.out.print(&quot;Loading...&quot;); for (int i = 0; i &lt; 10; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot;Hey! &quot;); } break; case 4: System.out.print(&quot;Enter an Integer:&quot;); Scanner myObj = new Scanner(System.in); int number = myObj.nextInt(); int i,fact=1; for(i=1;i&lt;=number;i++){ fact=fact*i; } System.out.println(&quot; nFactorial of &quot;+number+&quot; is: &quot;+fact); break; case 5: System.out.print(&quot;Enter a Degree Value:&quot;); Scanner myObj2 = new Scanner(System.in); double number2 = myObj2.nextDouble(); double radians = Math.toRadians(number2); System.out.println(&quot; nValue in Radians = &quot; + String.format(&quot;%.2f&quot;, radians)); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . __________________________ Choose from these choices: __________________________ 1 - Say Hello 2 - Output colors 3 - Loading in color 4 - Factorial Calculator 5 - Degrees to Radians 0 - Quit __________________________ 4: Enter an Integer: Factorial of 4 is: 24 5: Enter a Degree Value: Value in Radians = 0.09 0: Goodbye, World! .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2022/09/02/menu.html",
            "relUrl": "/fastpages/jupyter/2022/09/02/menu.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Week 1 Work",
            "content": "| Overview | Week 0 | Week 1 | Week 2 | Week 3 | Week 4 | Week 5 | Week 6 | Week 7 | . Review Ticket . Code.org OOP Assignment . Primitives Notebook . Bash Notebook . Fastpages .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/organization/week1",
            "relUrl": "/organization/week1",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Using Objects",
            "content": "Console Based Menu . Java imports allow user input and console output to be displayed in Terminal . Objects Used . Makes Object from Scanner Class to obtain inputs / menu selection from User | Use System Class, to call static methods System.out.print and System.out.println to output to console | User Math Class, to call static method Math.random() to generate random number | . Other College Board Topics . A 2D array is used to store COLORS | A Control Structure, Switch, is used to process Menu select to code that performs related action | . Key PBL Topic . Menu class when instantiated with new Menu() takes over Frontend experience with user. This is relevant to Draw Lab in this article and how Spring Boot works in Web programming. Objects are intended to encapsulate Frontend, Backend or experience ... Web Site control flow, Database CRUD operations, or a Menu in terminal (this example) | . // imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;__________________________ n&quot;); System.out.println(&quot;Choose from these choices:&quot;); System.out.println(&quot;__________________________ n&quot;); System.out.println(&quot;1 - Say Hello&quot;); System.out.println(&quot;2 - Output colors&quot;); System.out.println(&quot;3 - Loading in color&quot;); System.out.println(&quot;4 - Factorial Calculator&quot;); System.out.println(&quot;5 - Degrees to Radians&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;__________________________ n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World!&quot;); break; case 2: for(int i = 0; i &lt; COLORS.length; i++) // loop through COLORS array System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); break; case 3: System.out.print(&quot;Loading...&quot;); for (int i = 0; i &lt; 10; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot;Hey! &quot;); } break; case 4: System.out.print(&quot;Enter an Integer:&quot;); Scanner myObj = new Scanner(System.in); int number = myObj.nextInt(); int i,fact=1; for(i=1;i&lt;=number;i++){ fact=fact*i; } System.out.println(&quot; nFactorial of &quot;+number+&quot; is: &quot;+fact); break; case 5: System.out.print(&quot;Enter a Degree Value:&quot;); Scanner myObj2 = new Scanner(System.in); double number2 = myObj2.nextDouble(); double radians = Math.toRadians(number2); System.out.println(&quot; nValue in Radians = &quot; + String.format(&quot;%.2f&quot;, radians)); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . __________________________ Choose from these choices: __________________________ 1 - Say Hello 2 - Output colors 3 - Loading in color 4 - Factorial Calculator 5 - Degrees to Radians 0 - Quit __________________________ 5: Enter a Degree Value: Value in Radians = 3.14 0: Goodbye, World! . Desktop GUI Menu . Swing and AWT imports allow Java to provide a Graphical User Interface on the desktop. . Other College Board Topics . A 1D array is used to store MENUS | A Control Structure, if-else if-else, is used to process Menu selection to code that performs related action | . Using Objects . Javax Swing UI (JFrame) | Timer with a TimerTask to allow action to repeatedly occur without halting thread. | . import java.awt.*; import java.awt.event.*; import javax.swing.*; import java.util.Timer; import java.util.TimerTask; // Graphical-User-Interface for Desktop in Java using Java Swing. public class MenuJFrame extends JFrame implements ActionListener { private JFrame frame; private JMenuBar menubar; private JMenu menu; private JLabel message = new JLabel(&quot;Click on Menu to select an action.&quot;); public final String[] MENUS = { // 1D Array of Menu Choices &quot;Hello&quot;, &quot;Colors&quot;, &quot;Loading bar&quot;, }; // Statics to assist with timer and messaging, single copy (no instance) private static int delay = 20; private static int step = 1; private static String hashes = &quot;&quot;; // Constructor enables the Frame instance, the object &quot;this.frame&quot; public MenuJFrame(String title) { // Initializing Key Objects frame = new JFrame(title); menubar = new JMenuBar(); menu = new JMenu(&quot;Menu&quot;); // Initializing Menu objects and adding actions for (String mx : MENUS) { JMenuItem m = new JMenuItem(mx); m.addActionListener(this); menu.add(m); } // Adding / Connecting Objects menubar.add(menu); frame.setJMenuBar(menubar); frame.add(message); // Sets JFrame close operation to Class variable JFrame.EXIT_ON_CLOSE frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // set the size of window based on objects frame.setSize(300,200); // makes the frame object visible according to properties previously set frame.setVisible(true); // flow of control shifts to frame object } // event from user selecting a menu option public void actionPerformed(ActionEvent e) { // local variable to ActinEvent String selection = e.getActionCommand(); // menu selection String msg; // local variable to create response from action final String[] COLORS = {&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;}; // add more colors here final String start_msg = &quot;&lt;html&gt;&quot;; // html building final String end_msg = &quot;&lt;/html&gt;&quot;; final String hash = &quot;#&quot;; // run code based on the menuItem that was selected if ( selection.equals(MENUS[0]) ) { // Hello Action msg = &quot;Hello, World&quot;; message.setText(msg); } else if ( selection.equals(MENUS[1]) ) { // Color Action msg = start_msg + &quot;&lt;p&gt;&quot; + selection + &quot;&lt;/p&gt;&quot;; for (String color : COLORS) { msg += &quot;&lt;font color=&quot; + color + &quot;&gt;&quot; + color + &quot; &lt;/font&gt;&quot;; } msg += end_msg; message.setText(msg); } else { // Loading Bar Action String loading = &quot;&lt;p&gt;Loading&lt;/p&gt;&quot;; // Code to run on a Timer Timer timer = new Timer(); TimerTask task = new TimerTask() { public void run() { // Method for TimerTask // Static and Local variables used to manage message building int random = (int) (Math.random() * COLORS.length); // random logic MenuJFrame.hashes += &quot;&lt;font color=&quot; + COLORS[random] + &quot;&gt;&quot; + hash + &quot;&lt;/font&gt;&quot;; String msg = start_msg + loading + hashes + end_msg; message.setText(msg); // Shutdown timer and reset data if(MenuJFrame.step++ &gt; MenuJFrame.delay) { MenuJFrame.step = 1; MenuJFrame.hashes=&quot;&quot;; timer.cancel(); } }; }; // Schedule task and interval timer.schedule(task, 200, 200); message.setText(start_msg + loading + hash + end_msg); // prime/initial display } } // Driver turn over control the GUI public static void main(String[] args) { // Activates an instance of MenuJFrame class, which makes a JFrame object new MenuJFrame(&quot;Menu&quot;); } } MenuJFrame.main(null); . Code.org Object Oriented Programming - The Neighborhood . Students learn fundamental Java concepts as they navigate and interact with The Neighborhood with Painter objects and create new types of Painters to expand the capabilities of their programs. . College Board Topics . Inheritance (extends) is introduced early in this activity | Conditional statements, While loops, and Boolean expressions | . Using Objects . Code.org Painter class and objects | . Activity Page Start: Code.org CSA1 . Hacks . College Board and CTE competences. . Documentation / Analysis. Describe with Markdown Cell(s) and triple backtick code fragments that answers to the following from your work... Explain where a Class is defined | Explain where an instances of a Class is defined | Explain where an object is Calling a Method | Explain where an object is Mutating data | Describe Console, GUI differences, or Code.org differences. | . | Option A Exploration work Build a new Console or GUI lab for your own solution of interest, this is great opportunity to visualize data from Math, Physics, or other class using Math library. Look to make these changes in your work Make constructors of different signatures. | Use Wrapper Classes of Integer and Double for defining object instance or static data in the Class | Use the Math Class in performing calculations | . | Option B Code.org learning Follow the Neighborhood lessons and work through 11 to 15 lessons. | .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/unit/2",
            "relUrl": "/unit/2",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Primitives Notebook",
            "content": "Listing the types of primitives: . public class ListPrimitives { public static void main(String[] args) { // assigning variable values int anInt = 505; double aDouble = 99.9; boolean aBoolean = true; char aChar=&#39; u0021&#39;; // not a primitive but essential String aString = &quot;Look over there!&quot;; System.out.println(&quot;Types of Primitives:&quot;); System.out.println(&quot;--&gt; Integer: &quot; + anInt); System.out.println(&quot;--&gt; Double: &quot; + aDouble); System.out.println(&quot;--&gt; Character: &quot; + aChar); System.out.println(&quot;--&gt; Boolean: &quot; + aBoolean); System.out.println(&quot;--&gt; String: &quot; + aString); } } ListPrimitives.main(null) . Types of Primitives: --&gt; Integer: 505 --&gt; Double: 99.9 --&gt; Character: ! --&gt; Boolean: true --&gt; String: Look over there! . Division with ints and doubles: . public class Division { public static void main(String[] args) { // setting the variables int divided = 17 / 24; double doubleDivided = 17.0 / 24.0; // printing out the division in int and double form System.out.println(&quot;Integer division with 17/24 is: &quot; + divided); // %.2f limits the # of decimal values displayed System.out.println(&quot;Double division with 17.0/24.0 is: &quot; + String.format(&quot;%.2f&quot;, doubleDivided)); } } // makes it so you can print the code&#39;s output Division.main(null) . Integer division with 17/24 is: 0 Double division with 17.0/24.0 is: 0.71 . Celsius to Fahrenheit Converter . public class CtoF { public static void main(String[] args) { System.out.println(&quot;Celsius to Fahrenheit Converter:&quot;); System.out.println(&quot;Degrees Celsius: 55 --&gt;&quot;); int celsius = 55; int fahrenheit = ((celsius*9)/5)+32; System.out.println(&quot; tDegrees Fahrenheit: &quot; + fahrenheit); System.out.println(&quot;Degrees Celsius: 78 --&gt;&quot;); int celsius1 = 78; int fahrenheit1 = ((celsius1*9)/5)+32; System.out.println(&quot; tDegrees Fahrenheit: &quot; + fahrenheit1); System.out.println(&quot;Degrees Celsius: 11 --&gt;&quot;); int celsius2 = 11; int fahrenheit2 = ((celsius2*9)/5)+32; System.out.println(&quot; tDegrees Fahrenheit: &quot; + fahrenheit2); } } // makes it so you can print the code&#39;s output CtoF.main(null) . Celsius to Fahrenheit Converter: Degrees Celsius: 55 --&gt; Degrees Fahrenheit: 131 Degrees Celsius: 78 --&gt; Degrees Fahrenheit: 172 Degrees Celsius: 11 --&gt; Degrees Fahrenheit: 51 . Inputting primitive data: . // java style to import library import java.util.Scanner; // class must alway have 1st letter as uppercase, CamelCase is Java Class convention public class ScanPrimitives { public static void main(String[] args) { Scanner input; // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter an integer: &quot;); try { int sampleInputInt = input.nextInt(); System.out.println(sampleInputInt); } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); // primitive double input = new Scanner(System.in); System.out.print(&quot;Enter a double: &quot;); try { double sampleInputDouble = input.nextDouble(); System.out.println(sampleInputDouble); } catch (Exception e) { // if not a number System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } input.close(); // primitive boolean input = new Scanner(System.in); System.out.print(&quot;Enter a boolean: &quot;); try { boolean sampleInputBoolean = input.nextBoolean(); System.out.println(sampleInputBoolean); } catch (Exception e) { // if not true or false System.out.println(&quot;Not an boolean (true or false), &quot; + e); } input.close(); // wrapper class String input = new Scanner(System.in); System.out.print(&quot;Enter a String: &quot;); try { String sampleInputString = input.nextLine(); System.out.println(sampleInputString); } catch (Exception e) { // this may never happen System.out.println(&quot;Not an String, &quot; + e); } input.close(); } } ScanPrimitives.main(null); . Enter an integer: 2 Enter a double: 2.0 Enter a boolean: true Enter a String: hi .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2022/08/28/primitives.html",
            "relUrl": "/fastpages/jupyter/2022/08/28/primitives.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Bash Notebook",
            "content": "echo &quot;The currently installed python verision:&quot; python --version echo &quot;&quot; echo &quot;The currently installed conda verion:&quot; conda --version echo &quot;&quot; echo &quot;The currently installed java features:&quot; java --version echo &quot;&quot; echo &quot;The currently installed jupyter packages:&quot; jupyter --version . The currently installed python verision: Python 3.9.12 The currently installed conda verion: conda 4.14.0 The currently installed java features: openjdk 11.0.16 2022-07-19 OpenJDK Runtime Environment (build 11.0.16+8-post-Ubuntu-0ubuntu120.04) OpenJDK 64-Bit Server VM (build 11.0.16+8-post-Ubuntu-0ubuntu120.04, mixed mode, sharing) The currently installed jupyter packages: Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 . Jupyter Kernel Checks: . jupyter kernelspec list . Available kernels: bash /home/saathvika/.local/share/jupyter/kernels/bash java /home/saathvika/.local/share/jupyter/kernels/java javascript /home/saathvika/.local/share/jupyter/kernels/javascript python3 /home/saathvika/.local/share/jupyter/kernels/python3 . Anaconda Location Check: . echo &quot;Folders inside WSL:&quot; ls / echo &quot;&quot; echo &quot;Folders inside Home:&quot; ls /home echo &quot;&quot; echo &quot;Folders inside Saathvika:&quot; ls /home/saathvika echo &quot;&quot; echo &quot;We&#39;ve found Anaconda!&quot; . Folders inside WSL: bin etc lib libx32 mnt root snap tmp wslLdjHgc boot home lib32 lost+found opt run srv usr wsldnLbHg dev init lib64 media proc sbin sys var Folders inside Home: saathvika Folders inside Saathvika: APCSA Anaconda3-2022.05-Linux-x86_64.sh vscode APCSA-Fastpages Anaconda3-2022.05-Linux-x86_64.sh.1 APCSP anaconda3 We&#39;ve found Anaconda! .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2022/08/28/bash.html",
            "relUrl": "/fastpages/jupyter/2022/08/28/bash.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Week 0 Work",
            "content": "| Overview | Week 0 | Week 1 | Week 2 | Week 3 | Week 4 | Week 5 | Week 6 | Week 7 | . Review Ticket . Python Tester Notebook . Java Tester Notebook .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/organization/week0",
            "relUrl": "/organization/week0",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Python Notebook",
            "content": "print(&quot;Hello&quot;) . Hello .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2022/08/22/python.html",
            "relUrl": "/fastpages/jupyter/2022/08/22/python.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Java Notebook",
            "content": "public class Hello { public static void main(String[] args) { System.out.println(&quot;Hello World!&quot;); } } Hello.main(null); . Hello World! .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2022/08/22/java.html",
            "relUrl": "/fastpages/jupyter/2022/08/22/java.html",
            "date": " • Aug 22, 2022"
        }
        
    
  

  
  

  

  

  
  

  

  
  

  

  
  

  
  

  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}