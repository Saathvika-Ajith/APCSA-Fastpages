{
  
    
        "post0": {
            "title": "Primitives Notebook",
            "content": "Listing the types of primitives: . public class ListPrimitives { public static void main(String[] args) { // assigning variable values int anInt = 505; double aDouble = 99.9; boolean aBoolean = true; char aChar=&#39; u0021&#39;; // not a primitive but essential String aString = &quot;Look over there!&quot;; System.out.println(&quot;Types of Primitives:&quot;); System.out.println(&quot;--&gt; Integer: &quot; + anInt); System.out.println(&quot;--&gt; Double: &quot; + aDouble); System.out.println(&quot;--&gt; Character: &quot; + aChar); System.out.println(&quot;--&gt; Boolean: &quot; + aBoolean); System.out.println(&quot;--&gt; String: &quot; + aString); } } ListPrimitives.main(null) . Types of Primitives: --&gt; Integer: 505 --&gt; Double: 99.9 --&gt; Character: ! --&gt; Boolean: true --&gt; String: Look over there! . Division with ints and doubles: . public class Division { public static void main(String[] args) { // setting the variables int divided = 17 / 24; double doubleDivided = 17.0 / 24.0; // printing out the division in int and double form System.out.println(&quot;Integer division with 17/24 is: &quot; + divided); // %.2f limits the # of decimal values displayed System.out.println(&quot;Double division with 17.0/24.0 is: &quot; + String.format(&quot;%.2f&quot;, doubleDivided)); } } // makes it so you can print the code&#39;s output Division.main(null) . Integer division with 17/24 is: 0 Double division with 17.0/24.0 is: 0.71 . Inputting primitive data: . // java style to import library import java.util.Scanner; // class must alway have 1st letter as uppercase, CamelCase is Java Class convention public class ScanPrimitives { public static void main(String[] args) { Scanner input; // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter an integer: &quot;); try { int sampleInputInt = input.nextInt(); System.out.println(sampleInputInt); } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); // primitive double input = new Scanner(System.in); System.out.print(&quot;Enter a double: &quot;); try { double sampleInputDouble = input.nextDouble(); System.out.println(sampleInputDouble); } catch (Exception e) { // if not a number System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } input.close(); // primitive boolean input = new Scanner(System.in); System.out.print(&quot;Enter a boolean: &quot;); try { boolean sampleInputBoolean = input.nextBoolean(); System.out.println(sampleInputBoolean); } catch (Exception e) { // if not true or false System.out.println(&quot;Not an boolean (true or false), &quot; + e); } input.close(); // wrapper class String input = new Scanner(System.in); System.out.print(&quot;Enter a String: &quot;); try { String sampleInputString = input.nextLine(); System.out.println(sampleInputString); } catch (Exception e) { // this may never happen System.out.println(&quot;Not an String, &quot; + e); } input.close(); } } ScanPrimitives.main(null); . Enter an integer: Not an integer (form like 159), java.util.InputMismatchException Enter a double: 0.0 Enter a boolean: true Enter a String: wewew . import java.util.Scanner; public class CtoF { public static void main(String[] args) { input = new Scanner(System.in); System.out.print(&quot;Enter degrees Celsius: &quot;); try { int sampleInputInt = input.nextInt(); System.out.println(sampleInputInt); } catch (Exception e) { // if not an integer of degrees celsius System.out.println(&quot;Not an integer degree Celsius (form like 30), &quot; + e); } input.close(); } } // makes it so you can print the code&#39;s output CtoF.main(null) . | | | public class CtoF { | public static void main(String[] args) { | | input = new Scanner(System.in); | System.out.print(&#34;Enter degrees Celsius: &#34;); | try { | int sampleInputInt = input.nextInt(); | System.out.println(sampleInputInt); | } catch (Exception e) { // if not an integer of degrees celsius | System.out.println(&#34;Not an integer degree Celsius (form like 30), &#34; + e); | } | input.close(); | | } | } Unresolved dependencies: - variable input .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/2022/08/28/primitives.html",
            "relUrl": "/2022/08/28/primitives.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Python Notebook",
            "content": "print(&quot;Hello&quot;) . Hello .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2022/08/22/python.html",
            "relUrl": "/fastpages/jupyter/2022/08/22/python.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "New Page (Markdown)",
            "content": "Example Markdown Post . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/markdown/2022/08/22/new-page-markdown-post.html",
            "relUrl": "/markdown/2022/08/22/new-page-markdown-post.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Java Notebook",
            "content": "public class Hello { public static void main(String[] args) { System.out.println(&quot;Hello World!&quot;); } } Hello.main(null); . Hello World! .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2022/08/22/java.html",
            "relUrl": "/fastpages/jupyter/2022/08/22/java.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}