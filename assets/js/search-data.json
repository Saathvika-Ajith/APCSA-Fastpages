{
  
    
        "post0": {
            "title": "Sort, Space and Time Complexity",
            "content": "Insertion Sort: . public class InsertionSort { public static void main(String[] args) { int[] arr = {5, 2, 8, 1, 9, 7, 4, 3, 6}; System.out.print(&quot;Before Sort: &quot;); for (int i = 0; i &lt; arr.length; i++) { System.out.print(arr[i] + &quot; &quot;); } // call insertion sort method insertionSort(arr); System.out.println(); System.out.print(&quot;After Sort: &quot;); // print sorted array for (int i = 0; i &lt; arr.length; i++) { System.out.print(arr[i] + &quot; &quot;); } } public static void insertionSort(int[] arr) { int n = arr.length; for (int i = 1; i &lt; n; i++) { int key = arr[i]; int j = i - 1; /* Move elements of arr[0..i-1], that are greater than key, to one position ahead of their current position */ while (j &gt;= 0 &amp;&amp; arr[j] &gt; key) { arr[j + 1] = arr[j]; j = j - 1; } arr[j + 1] = key; } } } InsertionSort.main(null); . Before Sort: 5 2 8 1 9 7 4 3 6 After Sort: 1 2 3 4 5 6 7 8 9 . Big O Analysis: O(n^2) . The worst-case time complexity of insertion sort is O(n^2), where n is the number of elements in the array. This means that as the size of the input array increases, the running time of the algorithm grows quadratically. . | In the worst case, when the input array is sorted in reverse order, each element in the array must be compared with and moved past every other element to reach its correct position, resulting in n-1 comparisons and n-1 swaps. This gives a total of (n-1) + (n-2) + ... + 1 = n(n-1)/2 comparisons and swaps, which is O(n^2). . | However, in the best case, when the input array is already sorted, the algorithm only needs to make n-1 comparisons and no swaps, giving a time complexity of O(n). . | In practice, insertion sort is often used for small arrays or as a subroutine in other sorting algorithms, such as quicksort or merge sort, where it can be used to sort small subarrays efficiently. . | . Merge Sort . public class MergeSort { public static void main(String[] args) { int[] arr = {5, 2, 8, 1, 9, 7, 4, 3, 6}; System.out.print(&quot;Before Sort: &quot;); for (int i = 0; i &lt; arr.length; i++) { System.out.print(arr[i] + &quot; &quot;); } // call merge sort method mergeSort(arr, 0, arr.length - 1); System.out.println(); System.out.print(&quot;After Sort: &quot;); // print sorted array for (int i = 0; i &lt; arr.length; i++) { System.out.print(arr[i] + &quot; &quot;); } } public static void mergeSort(int[] arr, int left, int right) { if (left &lt; right) { int mid = (left + right) / 2; // sort left and right halves recursively mergeSort(arr, left, mid); mergeSort(arr, mid + 1, right); // merge the sorted halves merge(arr, left, mid, right); } } public static void merge(int[] arr, int left, int mid, int right) { int n1 = mid - left + 1; int n2 = right - mid; // create temporary arrays int[] L = new int[n1]; int[] R = new int[n2]; // copy data to temporary arrays for (int i = 0; i &lt; n1; i++) { L[i] = arr[left + i]; } for (int j = 0; j &lt; n2; j++) { R[j] = arr[mid + 1 + j]; } // merge the temporary arrays back into arr int i = 0, j = 0, k = left; while (i &lt; n1 &amp;&amp; j &lt; n2) { if (L[i] &lt;= R[j]) { arr[k] = L[i]; i++; } else { arr[k] = R[j]; j++; } k++; } // copy any remaining elements from L and R while (i &lt; n1) { arr[k] = L[i]; i++; k++; } while (j &lt; n2) { arr[k] = R[j]; j++; k++; } } } MergeSort.main(null); . Before Sort: 5 2 8 1 9 7 4 3 6 After Sort: 1 2 3 4 5 6 7 8 9 . Big O Analysis: O(n*log(n)) . The worst-case time complexity of merge sort is O(n*log(n)), where n is the number of elements in the array. This means that as the size of the input array increases, the running time of the algorithm grows at a rate that is roughly proportional to n times the logarithm of n. . | The merge sort algorithm works by dividing the input array into halves recursively until each subarray contains only one element. It then merges the sorted subarrays back together, comparing the first element of each subarray and moving the smaller element into the final sorted array until all elements have been merged. This process is repeated until the entire array is sorted. . | The key to the efficiency of merge sort is that the merge step is able to combine two sorted subarrays into a single sorted array in O(n) time, where n is the total number of elements in both subarrays. This means that the overall time complexity of merge sort is dominated by the recursive splitting of the input array into halves, which requires O(log(n)) levels of recursion. Since each level of recursion performs O(n) work, the total time complexity of merge sort is O(n*log(n)). . | In practice, merge sort is a highly efficient algorithm for sorting large arrays or lists, and is widely used in industry and academia for its stability, predictability, and scalability. . | . Bubble Sort . public class BubbleSort { public static void main(String[] args) { int[] arr = {5, 2, 8, 1, 9, 7, 4, 3, 6}; System.out.print(&quot;Before Sort: &quot;); for (int i = 0; i &lt; arr.length; i++) { System.out.print(arr[i] + &quot; &quot;); } // call bubble sort method bubbleSort(arr); System.out.println(); System.out.print(&quot;After Sort: &quot;); // print sorted array for (int i = 0; i &lt; arr.length; i++) { System.out.print(arr[i] + &quot; &quot;); } } public static void bubbleSort(int[] arr) { int n = arr.length; for (int i = 0; i &lt; n - 1; i++) { for (int j = 0; j &lt; n - i - 1; j++) { if (arr[j] &gt; arr[j + 1]) { // swap arr[j] and arr[j+1] int temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; } } } } } BubbleSort.main(null); . Before Sort: 5 2 8 1 9 7 4 3 6 After Sort: 1 2 3 4 5 6 7 8 9 . Big O Analysis: O(n^2) . The worst-case time complexity of the bubble sort algorithm is O(n^2), where n is the number of elements in the array being sorted. . | In the worst-case scenario, when the input array is in reverse order, the bubble sort algorithm will need to perform n-1 passes through the array to sort it, and each pass requires n-i-1 comparisons and swaps. This means that the total number of comparisons and swaps required is approximately (n-1) * (n-1) = n^2 - 2n + 1. When we ignore the lower-order terms and the constant coefficient, the time complexity of bubble sort reduces to O(n^2). . | Bubble sort is not very efficient for sorting large arrays or lists, as its time complexity grows quadratically with the size of the input. However, it has the advantage of being a simple and easy-to-understand algorithm, and can be useful for sorting small datasets or for educational purposes. In practice, more efficient sorting algorithms like merge sort, quicksort, or heapsort are typically used for larger datasets. . | . Selection Sort . public class SelectionSort { public static void main(String[] args) { int[] arr = {5, 2, 8, 1, 9, 7, 4, 3, 6}; System.out.print(&quot;Before Sort: &quot;); for (int i = 0; i &lt; arr.length; i++) { System.out.print(arr[i] + &quot; &quot;); } // call selection sort method selectionSort(arr); System.out.println(); System.out.print(&quot;After Sort: &quot;); // print sorted array for (int i = 0; i &lt; arr.length; i++) { System.out.print(arr[i] + &quot; &quot;); } } public static void selectionSort(int[] arr) { int n = arr.length; // traverse the array for (int i = 0; i &lt; n - 1; i++) { // find the minimum element in the unsorted part of the array int minIdx = i; for (int j = i + 1; j &lt; n; j++) { if (arr[j] &lt; arr[minIdx]) { minIdx = j; } } // swap the minimum element with the first element in the unsorted part of the array int temp = arr[minIdx]; arr[minIdx] = arr[i]; arr[i] = temp; } } } SelectionSort.main(null); . Before Sort: 5 2 8 1 9 7 4 3 6 After Sort: 1 2 3 4 5 6 7 8 9 . Big O Analysis: O(n^2) . The worst-case time complexity of the selection sort algorithm is O(n^2), where n is the number of elements in the array being sorted. . | In the worst-case scenario, when the input array is in reverse order, the selection sort algorithm will need to perform n-1 passes through the array to sort it, and each pass requires n-i-1 comparisons and swaps. This means that the total number of comparisons and swaps required is approximately (n-1) * (n-1) = n^2 - 2n + 1. When we ignore the lower-order terms and the constant coefficient, the time complexity of selection sort reduces to O(n^2). . | Selection sort is not very efficient for sorting large arrays or lists, as its time complexity grows quadratically with the size of the input. However, it has the advantage of being a simple and easy-to-understand algorithm, and can be useful for sorting small datasets or for educational purposes. In practice, more efficient sorting algorithms like merge sort, quicksort, or heapsort are typically used for larger datasets. . | . Hashmaps . this hashmap code generates an array of 5000 random integers between 0 and 4999, and then inserts each of these integers into a hashmap | measures the time it takes to perform a lookup for the integer value 40 in the hashmap, and the time it takes to perform a binary search for the value 40 in the sorted array of integers | the output of the program displays the time it took for each search algorithm to execute in nanoseconds | . import java.util.HashMap; import java.util.Random; public class Hash { public static void main(String[] args) { // Create a new hashmap and list HashMap&lt;Integer, Integer&gt; hashmap = new HashMap&lt;&gt;(); int[] list = generateRandomList(5000); // Fill the hashmap with integers from the list as keys and values for (int i = 0; i &lt; list.length; i++) { hashmap.put(list[i], list[i]); } //For each element in the array, the &quot;put&quot; method of the HashMap is called with the element //as both the key and the value, this results in the key-value pair being added to the HashMap // Test the lookup and binary search algorithms with a value of 40 int value = 40; long lookUpTime = measureLookUpTime(hashmap, value); System.out.println(&quot;Time to search for quiz result of 40 in hashmap: &quot; + lookUpTime + &quot; nanoseconds&quot;); long binarySearchTime = measureBinarySearchTime(list, value); System.out.println(&quot;Time to search for result of 40 in binary: &quot; + binarySearchTime + &quot; nanoseconds&quot;); }//unsorted data and has a constant time complexity //latter is used for sorted data and has a logarithmic time complexity // Helper method to generate a random list of given size private static int[] generateRandomList(int size) { int[] list = new int[size]; Random random = new Random(); for (int i = 0; i &lt; size; i++) { list[i] = random.nextInt(size); } return list; } // Helper method to measure the time it takes to look up a value in the hashmap private static long measureLookUpTime(HashMap&lt;Integer, Integer&gt; hashmap, int value) { long start = System.nanoTime(); hashmap.containsKey(value); long end = System.nanoTime(); return (end - start); } // Helper method to measure the time it takes to perform a binary search on a sorted list private static long measureBinarySearchTime(int[] list, int value) { long start = System.nanoTime(); // Sort the list quickSort(list, 0, list.length - 1); //After the quickSort method completes, the list array will be sorted in ascending order. // Perform binary search int low = 0; int high = list.length - 1; while (low &lt;= high) { int mid = (low + high) / 2; if (list[mid] == value) { break; } else if (list[mid] &lt; value) { low = mid + 1; } else { high = mid - 1; } } long end = System.nanoTime(); return (end - start); } // Helper method to perform quick sort on the list private static void quickSort(int[] list, int low, int high) { if (low &lt; high) { int partIndex = partition(list, low, high); quickSort(list, low, partIndex - 1); quickSort(list, partIndex + 1, high); } } //used to divide the sub-array into two sub-arrays // Helper method to partition the list for quick sort private static int partition(int[] list, int low, int high) { //partition: part into 2 sub arrays int pivot = list[high]; //pivot element, which is the last element in the sub-array indicated by the &quot;high&quot; int i = low - 1; for (int j = low; j &lt;= high - 1; j++) { // iterates through the subarray from &quot;low&quot; to &quot;high - 1&quot; with another index &quot;j&quot; if (list[j] &lt; pivot) { i++; swap(list, i, j); //&quot;i&quot; and &quot;j&quot; are swapped so that the lesser element is in the first subarray } } // pivot element is swapped with the element at index &quot;i + 1&quot;, so that it is now in between the two subarrays swap(list, i + 1, high); return i + 1; }//The method then returns the index of the pivot element, which is now in its final sorted position. // Helper method to swap two elements in the list private static void swap(int[] list, int i, int j) { int temp = list[i]; list[i] = list[j]; list[j] = temp; } } Hash.main(null); . Time to search for quiz result of 40 in hashmap: 12600 nanoseconds Time to search for result of 40 in binary: 4028200 nanoseconds .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2023/04/02/checkpt3.html",
            "relUrl": "/fastpages/jupyter/2023/04/02/checkpt3.html",
            "date": " • Apr 2, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "3/28/23 Notes",
            "content": "they are ambassadors from Cal State San Marcos | CSSM has a good physic program, which interested them | didn&#39;t let failure define them and kept trying, one even went into a pHD for material sciences | CSSM inspired and helped them | you can switch into CSSM from Palomar community college | it&#39;d easy and flexible to switch classes and you wouldn&#39;t even be that behind | many opportunities at CSSM for compsci, cybersecurity, and comp engineering | you don&#39;t need to feel confined or inflexible, you can take a degree in applied physics and a masters in mechanical engineering for example | there are a lot of events at CSSM such as hackthons and even women&#39;s hackathons | there are many STEM related clubs such as the cybersecurtiy club, robotics club, and physics club | internships can be anywhere from 4 weeks to 2 years, and you can send opportunities through google and emails with programs | internship tips: avoid unpaid ones | ask for help with internship application essays | . | paying for college: grant is government funded money, and scholarship is private funded | try to get a subsidized loan (money is partially given by the gov) because with unsubsidized you&#39;ll be paying back lots of interest | . | if you choose to do a pHD you need to get paid because it will be 5 - 10 years of working, theres an upcoming event targeted towards admitted students and seniors | . Reflection . A point made during this presentation that really stuck with me is how flexible the majors system is in college. I used to think that it&#39;s really very rigid, and that you needed to know what you wanted to be when you grew up when you were like 5 and then pick only the most relevant and stick with it all 4 years of college, and whatever years beyond that you spend on your degree. But the presenters helped me understand more about when people say it&#39;s okay to change your major in college, and why it is. Even stranger, it seems you can get a graduate degree in something totally different than your undergrad just because it interested your more. As long as you are willing to put in the extra work needed, you change change your mind and pursue your passion anytime in these formative years, which is very relaxing to hear. I&#39;ve been set on doing Aerospace Engineering for a while, but things change and interests shift, so it&#39;s always good to have this reassurance. Another thing I thought about during this is that just because you don&#39;t get into a name brand college doesn&#39;t mean that you can&#39;t have a good education, as CSSM isn&#39;t a college I&#39;ve heard about much before, but it seems like a great place that really helps put people on good career paths. .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2023/03/28/extracred.html",
            "relUrl": "/fastpages/jupyter/2023/03/28/extracred.html",
            "date": " • Mar 28, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Linked Lists, Queue, Stack, & Generic T",
            "content": "Queue&lt;String&gt; queue = new LinkedList&lt;&gt;(); // Queue interface uses LL implementation queue.add(&quot;John&quot;); queue.add(&quot;Jane&quot;); queue.add(&quot;Bob&quot;); // Collections has a toArray convertion Object[] arr = queue.toArray(); // Empty queue System.out.println(&quot;Empty Queue&quot;); while (queue.size() &gt; 0) // Interate while size System.out.println(queue.remove()); // Iterate of array System.out.println(&quot;Iterate over Array&quot;); for (Object a : arr) // Type is Object from convertion System.out.println(a); . Empty Queue John Jane Bob Iterate over Array John Jane Bob . /* This is wrapper class... Objective would be to push more functionality into this Class to enforce consistent definition */ public abstract class Generics { public final String masterType = &quot;Generic&quot;; private String type; // extender should define their data type // generic enumerated interface public interface KeyTypes { String name(); } protected abstract KeyTypes getKey(); // this method helps force usage of KeyTypes // getter public String getMasterType() { return masterType; } // getter public String getType() { return type; } // setter public void setType(String type) { this.type = type; } // this method is used to establish key order public abstract String toString(); // static print method used by extended classes public static void print(Generics[] objs) { // print &#39;Object&#39; properties System.out.println(objs.getClass() + &quot; &quot; + objs.length); // print &#39;Generics&#39; properties if (objs.length &gt; 0) { Generics obj = objs[0]; // Look at properties of 1st element System.out.println( obj.getMasterType() + &quot;: &quot; + obj.getType() + &quot; listed by &quot; + obj.getKey()); } // print &quot;Generics: Objects&#39; for(Object o : objs) // observe that type is Opaque System.out.println(o); System.out.println(); } } . public class Alphabet extends Generics { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) {Alphabet.key = key;} public enum KeyType implements KeyTypes {title, letter} private static final int size = 26; // constant used in data initialization // Instance data private final char letter; /* * single letter object */ public Alphabet(char letter) { this.setType(&quot;Alphabet&quot;); this.letter = letter; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Alphabet.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.letter.equals(this.getKey())) { output += this.letter; } else { output += super.getType() + &quot;: &quot; + this.letter; } return output; } // Test data initializer for upper case Alphabet public static Alphabet[] alphabetData() { Alphabet[] alphabet = new Alphabet[Alphabet.size]; for (int i = 0; i &lt; Alphabet.size; i++) { alphabet[i] = new Alphabet( (char)(&#39;A&#39; + i) ); } return alphabet; } /* * main to test Animal class */ public static void main(String[] args) { // Inheritance Hierarchy Alphabet[] objs = alphabetData(); // print with title Alphabet.setOrder(KeyType.title); Alphabet.print(objs); // print letter only Alphabet.setOrder(KeyType.letter); Alphabet.print(objs); } } Alphabet.main(null); . class [LREPL.$JShell$22$Alphabet; 26 Generic: Alphabet listed by title Alphabet: A Alphabet: B Alphabet: C Alphabet: D Alphabet: E Alphabet: F Alphabet: G Alphabet: H Alphabet: I Alphabet: J Alphabet: K Alphabet: L Alphabet: M Alphabet: N Alphabet: O Alphabet: P Alphabet: Q Alphabet: R Alphabet: S Alphabet: T Alphabet: U Alphabet: V Alphabet: W Alphabet: X Alphabet: Y Alphabet: Z class [LREPL.$JShell$22$Alphabet; 26 Generic: Alphabet listed by letter A B C D E F G H I J K L M N O P Q R S T U V W X Y Z . /* * Animal class extends Generics and defines abstract methods */ public class Animal extends Generics { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) { Animal.key = key; } public enum KeyType implements KeyTypes {title, name, age, color} // Instance data private final String name; private final int age; private final String color; /* constructor * */ public Animal(String name, int age, String color) { super.setType(&quot;Animal&quot;); this.name = name; this.age = age; this.color = color; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Animal.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.name.equals(this.getKey())) { output += this.name; } else if (KeyType.age.equals(this.getKey())) { output += &quot;00&quot; + this.age; output = output.substring(output.length() - 2); } else if (KeyType.color.equals(this.getKey())) { output += this.color; } else { output += super.getType() + &quot;: &quot; + this.name + &quot;, &quot; + this.color + &quot;, &quot; + this.age; } return output; } // Test data initializer public static Animal[] animals() { return new Animal[]{ new Animal(&quot;Lion&quot;, 8, &quot;Gold&quot;), new Animal(&quot;Pig&quot;, 3, &quot;Pink&quot;), new Animal(&quot;Robin&quot;, 7, &quot;Red&quot;), new Animal(&quot;Cat&quot;, 10, &quot;Black&quot;), new Animal(&quot;Kitty&quot;, 1, &quot;Calico&quot;), new Animal(&quot;Dog&quot;, 14, &quot;Brown&quot;) }; } /* main to test Animal class * */ public static void main(String[] args) { // Inheritance Hierarchy Animal[] objs = animals(); // print with title Animal.setOrder(KeyType.title); Animal.print(objs); // print name only Animal.setOrder(KeyType.name); Animal.print(objs); } } Animal.main(null); . class [LREPL.$JShell$24$Animal; 6 Generic: Animal listed by title Animal: Lion, Gold, 8 Animal: Pig, Pink, 3 Animal: Robin, Red, 7 Animal: Cat, Black, 10 Animal: Kitty, Calico, 1 Animal: Dog, Brown, 14 class [LREPL.$JShell$24$Animal; 6 Generic: Animal listed by name Lion Pig Robin Cat Kitty Dog . public class Cupcake extends Generics { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) {Cupcake.key = key;} public enum KeyType implements KeyTypes {title, flavor, frosting, sprinkles} // Instance data private final String frosting; private final int sprinkles; private final String flavor; // Constructor Cupcake(String frosting, int sprinkles, String flavor) { this.setType(&quot;Cupcake&quot;); this.frosting = frosting; this.sprinkles = sprinkles; this.flavor = flavor; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Cupcake.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.flavor.equals(this.getKey())) { output += this.flavor; } else if (KeyType.frosting.equals(this.getKey())) { output += this.frosting; } else if (KeyType.sprinkles.equals(this.getKey())) { output += &quot;00&quot; + this.sprinkles; output = output.substring(output.length() - 2); } else { output = super.getType() + &quot;: &quot; + this.flavor + &quot;, &quot; + this.frosting + &quot;, &quot; + this.sprinkles; } return output; } // Test data initializer public static Cupcake[] cupcakes() { return new Cupcake[]{ new Cupcake(&quot;Red&quot;, 4, &quot;Red Velvet&quot;), new Cupcake(&quot;Orange&quot;, 5, &quot;Orange&quot;), new Cupcake(&quot;Yellow&quot;, 6, &quot;Lemon&quot;), new Cupcake(&quot;Green&quot;, 7, &quot;Apple&quot;), new Cupcake(&quot;Blue&quot;, 8, &quot;Blueberry&quot;), new Cupcake(&quot;Purple&quot;, 9, &quot;Blackberry&quot;), new Cupcake(&quot;Pink&quot;, 10, &quot;Strawberry&quot;), new Cupcake(&quot;Tan&quot;, 11, &quot;Vanilla&quot;), new Cupcake(&quot;Brown&quot;, 12, &quot;Chocolate&quot;), }; } public static void main(String[] args) { // Inheritance Hierarchy Cupcake[] objs = cupcakes(); // print with title Cupcake.setOrder(KeyType.title); Cupcake.print(objs); // print flavor only Cupcake.setOrder(KeyType.flavor); Cupcake.print(objs); } } Cupcake.main(null); . class [LREPL.$JShell$26$Cupcake; 9 Generic: Cupcake listed by title Cupcake: Red Velvet, Red, 4 Cupcake: Orange, Orange, 5 Cupcake: Lemon, Yellow, 6 Cupcake: Apple, Green, 7 Cupcake: Blueberry, Blue, 8 Cupcake: Blackberry, Purple, 9 Cupcake: Strawberry, Pink, 10 Cupcake: Vanilla, Tan, 11 Cupcake: Chocolate, Brown, 12 class [LREPL.$JShell$26$Cupcake; 9 Generic: Cupcake listed by flavor Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate . Custom Types Class . /* * Types class extends Generics and defines abstract methods */ public class Types extends Generics { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) { Types.key = key; } public enum KeyType implements KeyTypes {title, name, isPrimitive, isObject} // Instance data private final String name; private final boolean isPrimitive; private final boolean isObject; /* constructor * */ public Types(String name, boolean isPrimitive, boolean isObject) { super.setType(&quot;Types&quot;); this.name = name; this.isPrimitive = isPrimitive; this.isObject = isObject; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Types.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.name.equals(this.getKey())) { output += this.name; } else if (KeyType.isPrimitive.equals(this.getKey())) { output += this.isPrimitive; } else if (KeyType.isObject.equals(this.getKey())) { output += this.isObject; } else { output += super.getType() + &quot;: &quot; + this.name + &quot;, is a primitive data type: &quot; + this.isPrimitive + &quot;, is an object: &quot; + this.isObject; } return output; } // Test data initializer public static Types[] typess() { return new Types[]{ new Types(&quot;ArrayList&quot;, false, true), new Types(&quot;Array&quot;, false, true), new Types(&quot;2D Array&quot;, false, true), new Types(&quot;Int&quot;, true, false), new Types(&quot;Boolean&quot;, true, false), new Types(&quot;Float&quot;, true, false) }; } /* main to test Types class * */ public static void main(String[] args) { // Inheritance Hierarchy Types[] objs = typess(); // print with title Types.setOrder(KeyType.title); Types.print(objs); // print name only Types.setOrder(KeyType.name); Types.print(objs); // print object status only Types.setOrder(KeyType.isObject); Types.print(objs); } } Types.main(null); . class [LREPL.$JShell$28$Types; 6 Generic: Types listed by title Types: ArrayList, is a primitive data type: false, is an object: true Types: Array, is a primitive data type: false, is an object: true Types: 2D Array, is a primitive data type: false, is an object: true Types: Int, is a primitive data type: true, is an object: false Types: Boolean, is a primitive data type: true, is an object: false Types: Float, is a primitive data type: true, is an object: false class [LREPL.$JShell$28$Types; 6 Generic: Types listed by name ArrayList Array 2D Array Int Boolean Float class [LREPL.$JShell$28$Types; 6 Generic: Types listed by isObject true true true false false false . Linked Lists &amp; Queues Hack Helpers . /** * Implementation of a Double Linked List; forward and backward links point to adjacent Nodes. * */ public class LinkedList&lt;T&gt; { private T data; private LinkedList&lt;T&gt; prevNode, nextNode; /** * Constructs a new element * * @param data, data of object * @param node, previous node */ public LinkedList(T data, LinkedList&lt;T&gt; node) { this.setData(data); this.setPrevNode(node); this.setNextNode(null); } /** * Clone an object, * * @param node object to clone */ public LinkedList(LinkedList&lt;T&gt; node) { this.setData(node.data); this.setPrevNode(node.prevNode); this.setNextNode(node.nextNode); } /** * Setter for T data in DoubleLinkedNode object * * @param data, update data of object */ public void setData(T data) { this.data = data; } /** * Returns T data for this element * * @return data associated with object */ public T getData() { return this.data; } /** * Setter for prevNode in DoubleLinkedNode object * * @param node, prevNode to current Object */ public void setPrevNode(LinkedList&lt;T&gt; node) { this.prevNode = node; } /** * Setter for nextNode in DoubleLinkedNode object * * @param node, nextNode to current Object */ public void setNextNode(LinkedList&lt;T&gt; node) { this.nextNode = node; } /** * Returns reference to previous object in list * * @return the previous object in the list */ public LinkedList&lt;T&gt; getPrevious() { return this.prevNode; } /** * Returns reference to next object in list * * @return the next object in the list */ public LinkedList&lt;T&gt; getNext() { return this.nextNode; } } . import java.util.Iterator; /** * Queue Iterator * * 1. &quot;has a&quot; current reference in Queue * 2. supports iterable required methods for next that returns a generic T Object */ class QueueIterator&lt;T&gt; implements Iterator&lt;T&gt; { LinkedList&lt;T&gt; current; // current element in iteration // QueueIterator is pointed to the head of the list for iteration public QueueIterator(LinkedList&lt;T&gt; head) { current = head; } // hasNext informs if next element exists public boolean hasNext() { return current != null; } // next returns data object and advances to next position in queue public T next() { T data = current.getData(); current = current.getNext(); return data; } } /** * Queue: custom implementation * @author John Mortensen * * 1. Uses custom LinkedList of Generic type T * 2. Implements Iterable * 3. &quot;has a&quot; LinkedList for head and tail */ public class Queue&lt;T&gt; implements Iterable&lt;T&gt; { LinkedList&lt;T&gt; head = null, tail = null; /** * Add a new object at the end of the Queue, * * @param data, is the data to be inserted in the Queue. */ public void add(T data) { // add new object to end of Queue LinkedList&lt;T&gt; tail = new LinkedList&lt;&gt;(data, null); if (this.head == null) // initial condition this.head = this.tail = tail; else { // nodes in queue this.tail.setNextNode(tail); // current tail points to new tail this.tail = tail; // update tail } } /** * Returns the data of head. * * @return data, the dequeued data */ public T delete() { T data = this.peek(); if (this.tail != null) { // initial condition this.head = this.head.getNext(); // current tail points to new tail if (this.head != null) { this.head.setPrevNode(tail); } } return data; } /** * Returns the data of head. * * @return this.head.getData(), the head data in Queue. */ public T peek() { return this.head.getData(); } /** * Returns the head object. * * @return this.head, the head object in Queue. */ public LinkedList&lt;T&gt; getHead() { return this.head; } /** * Returns the tail object. * * @return this.tail, the last object in Queue */ public LinkedList&lt;T&gt; getTail() { return this.tail; } /** * Returns the iterator object. * * @return this, instance of object */ public Iterator&lt;T&gt; iterator() { return new QueueIterator&lt;&gt;(this.head); } } . /** * Queue Manager * 1. &quot;has a&quot; Queue * 2. support management of Queue tasks (aka: titling, adding a list, printing) */ class QueueManager&lt;T&gt; { // queue data private final String name; // name of queue private int count = 0; // number of objects in queue public final Queue&lt;T&gt; queue = new Queue&lt;&gt;(); // queue object /** * Queue constructor * Title with empty queue */ public QueueManager(String name) { this.name = name; } /** * Queue constructor * Title with series of Arrays of Objects */ public QueueManager(String name, T[]... seriesOfObjects) { this.name = name; this.addList(seriesOfObjects); } /** * Add a list of objects to queue */ public void addList(T[]... seriesOfObjects) { //accepts multiple generic T lists for (T[] objects: seriesOfObjects) for (T data : objects) { this.queue.add(data); this.count++; } } /** * Print any array objects from queue */ public void printQueue() { System.out.println(this.name + &quot; count: &quot; + count); System.out.print(this.name + &quot; data: &quot;); for (T data : queue) System.out.print(data + &quot; &quot;); System.out.println(); } } . class QueueTester { public static void main(String[] args) { // Create iterable Queue of Words Object[] words = new String[] { &quot;seven&quot;, &quot;slimy&quot;, &quot;snakes&quot;, &quot;sallying&quot;, &quot;slowly&quot;, &quot;slithered&quot;, &quot;southward&quot;}; QueueManager qWords = new QueueManager(&quot;Words&quot;, words ); qWords.printQueue(); // Create iterable Queue of Integers Object[] numbers = new Integer[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}; QueueManager qNums = new QueueManager(&quot;Integers&quot;, numbers ); qNums.printQueue(); // Create iterable Queue of NCS Generics Animal.setOrder(Animal.KeyType.name); Alphabet.setOrder(Alphabet.KeyType.letter); Cupcake.setOrder(Cupcake.KeyType.flavor); // Illustrates use of a series of repeating arguments QueueManager qGenerics = new QueueManager(&quot;My Generics&quot;, Alphabet.alphabetData(), Animal.animals(), Cupcake.cupcakes(), Types.typess() ); qGenerics.printQueue(); // Create iterable Queue of Mixed types of data QueueManager qMix = new QueueManager(&quot;Mixed&quot;); qMix.queue.add(&quot;Start&quot;); qMix.addList( words, numbers, Alphabet.alphabetData(), Animal.animals(), Cupcake.cupcakes(), Types.typess() ); qMix.queue.add(&quot;End&quot;); qMix.printQueue(); } } QueueTester.main(null); . Words count: 7 Words data: seven slimy snakes sallying slowly slithered southward Integers count: 10 Integers data: 0 1 2 3 4 5 6 7 8 9 My Generics count: 47 My Generics data: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z Lion Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate true true true false false false Mixed count: 64 Mixed data: Start seven slimy snakes sallying slowly slithered southward 0 1 2 3 4 5 6 7 8 9 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z Lion Pig Robin Cat Kitty Dog Red Velvet Orange Lemon Apple Blueberry Blackberry Strawberry Vanilla Chocolate true true true false false false End . Hacks . Hack 1 . public class QueueExample { public static void main(String[] args) { Queue&lt;String&gt; queue = new LinkedList&lt;String&gt;(); // Adding elements to the queue queue.add(&quot;ArrayList&quot;); System.out.println(&quot;Enqueued data: &quot; + &quot;ArrayList&quot;); printQueue(queue); queue.add(&quot;Array&quot;); System.out.println(&quot;Enqueued data: &quot; + &quot;Array&quot;); printQueue(queue); queue.add(&quot;2D Array&quot;); System.out.println(&quot;Enqueued data: &quot; + &quot;2D Array&quot;); printQueue(queue); queue.add(&quot;Int&quot;); System.out.println(&quot;Enqueued data: &quot; + &quot;Int&quot;); printQueue(queue); queue.add(&quot;Boolean&quot;); System.out.println(&quot;Enqueued data: &quot; + &quot;Boolean&quot;); printQueue(queue); queue.add(&quot;Float&quot;); System.out.println(&quot;Enqueued data: &quot; + &quot;Float&quot;); printQueue(queue); // Removing elements from the queue String data =queue.delete(); data = queue.delete(); System.out.println(&quot;Dequeued data: &quot; + data); printQueue(queue); data = queue.delete(); System.out.println(&quot;Dequeued data: &quot; + data); printQueue(queue); data = queue.delete(); System.out.println(&quot;Dequeued data: &quot; + data); printQueue(queue); data = queue.delete(); System.out.println(&quot;Dequeued data: &quot; + data); printQueue(queue); data = queue.delete(); System.out.println(&quot;Dequeued data: &quot; + data); printQueue(queue); data = queue.delete(); System.out.println(&quot;Dequeued data: &quot; + data); printQueue(queue); } // Helper method to print the contents of the queue public static void printQueue(Queue&lt;String&gt; queue) { System.out.println(&quot;Data: &quot; + String.join(&quot; &quot;, queue)); System.out.println(); } } QueueExample.main(null); . | Queue&lt;String&gt; queue = new LinkedList&lt;String&gt;(); no suitable constructor found for LinkedList(no arguments) constructor LinkedList.LinkedList(java.lang.String,LinkedList&lt;java.lang.String&gt;) is not applicable (actual and formal argument lists differ in length) constructor LinkedList.LinkedList(LinkedList&lt;java.lang.String&gt;) is not applicable (actual and formal argument lists differ in length) . Hack 2 . Queue&lt;Integer&gt; questionNums1 = new LinkedList&lt;&gt;(); //offer adds an element to the end of the queue and //returns a boolean value indicating whether the operation was successful questionNums1.add(1); questionNums1.add(4); questionNums1.add(5); questionNums1.add(8); Queue&lt;Integer&gt; questionNums2 = new LinkedList&lt;&gt;(); questionNums2.add(2); questionNums2.add(3); questionNums2.add(6); questionNums2.add(7); Queue&lt;Integer&gt; mergedQueue = new LinkedList&lt;&gt;(); while (!questionNums1.isEmpty() &amp;&amp; !questionNums2.isEmpty()) { if (questionNums1.peek() &lt; questionNums2.peek()) { //Retrieve the first element from each queue using the peek() method //peek method returns the element at the front of the queue without removing it mergedQueue.offer(questionNums1.poll()); } else { //Compare the two elements //enqueue the smaller one to the new queue using the offer() method. mergedQueue.offer(questionNums2.poll()); }//repeat } mergedQueue.addAll(questionNums1); mergedQueue.addAll(questionNums2); System.out.println(&quot;Question # Order: &quot; + mergedQueue); . Question # Order: [1, 2, 3, 4, 5, 6, 7, 8] . Hack 3 . import java.util.*; public class ShuffleQueue { public static void main(String[] args) { Queue&lt;String&gt; queue = new LinkedList&lt;&gt;(); queue.add(&quot;ArrayList&quot;); queue.add(&quot;Array&quot;); queue.add(&quot;2D Array&quot;); queue.add(&quot;Int&quot;); System.out.println(&quot;Original queue: &quot; + queue); // stores list items in an array of the same size String[] array = queue.toArray(new String[queue.size()]); // uses a shuffle method to switch around the items in the array Collections.shuffle(Arrays.asList(array)); // iterates them into a new queue Queue&lt;String&gt; randomizedQueue = new LinkedList&lt;&gt;(); for (int i = 0; i &lt; array.length; i++) { randomizedQueue.add(array[i]); } System.out.println(&quot;Shuffled queue: &quot; + randomizedQueue); } } ShuffleQueue.main(null); . Original queue: [ArrayList, Array, 2D Array, Int] Shuffled queue: [Array, Int, ArrayList, 2D Array] . Hack 4 . Queue&lt;Integer&gt; queue = new LinkedList&lt;&gt;(); //Create a new empty stack to store the elements of the queue for (int i = 1; i &lt;= 7; i++) { queue.offer(i); } System.out.println(&quot;Original Question Numbers: &quot; + queue); Stack&lt;Integer&gt; stack = new Stack&lt;&gt;(); while (!queue.isEmpty()) { stack.push(queue.poll()); } //Dequeue all elements from the original queue and push them onto the stack Queue&lt;Integer&gt; reversedQueue = new LinkedList&lt;&gt;(); while (!stack.isEmpty()) { reversedQueue.offer(stack.pop()); }//Create a new empty queue to store the reversed elements // pop removes and returns the top element of the stack System.out.println(&quot;Reversed Question Numbers: &quot; + reversedQueue); . Original Question Numbers: [1, 2, 3, 4, 5, 6, 7] Reversed Question Numbers: [7, 6, 5, 4, 3, 2, 1] .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2023/03/26/checkpt2.html",
            "relUrl": "/fastpages/jupyter/2023/03/26/checkpt2.html",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Generic Types and Collections",
            "content": "Data, Classes, Inheritance . /* This is wrapper class... Objective would be to push more functionality into this Class to enforce consistent definition */ public abstract class Generics { public final String masterType = &quot;Generic&quot;; private String type; // extender should define their data type // generic enumerated interface public interface KeyTypes { String name(); } protected abstract KeyTypes getKey(); // this method helps force usage of KeyTypes // getter public String getMasterType() { return masterType; } // getter public String getType() { return type; } // setter public void setType(String type) { this.type = type; } // this method is used to establish key order public abstract String toString(); // static print method used by extended classes public static void print(Generics[] objs) { // print &#39;Object&#39; properties System.out.println(objs.getClass() + &quot; &quot; + objs.length); // print &#39;Generics&#39; properties if (objs.length &gt; 0) { Generics obj = objs[0]; // Look at properties of 1st element System.out.println( obj.getMasterType() + &quot;: &quot; + obj.getType() + &quot; listed by &quot; + obj.getKey()); } // print &quot;Generics: Objects&#39; for(Object o : objs) // observe that type is Opaque System.out.println(o); System.out.println(); } } public class Alphabet extends Generics { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) {Alphabet.key = key;} public enum KeyType implements KeyTypes {title, letter} private static final int size = 26; // constant used in data initialization // Instance data private final char letter; /* * single letter object */ public Alphabet(char letter) { this.setType(&quot;Alphabet&quot;); this.letter = letter; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Alphabet.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.letter.equals(this.getKey())) { output += this.letter; } else { output += super.getType() + &quot;: &quot; + this.letter; } return output; } // Test data initializer for upper case Alphabet public static Alphabet[] alphabetData() { Alphabet[] alphabet = new Alphabet[Alphabet.size]; for (int i = 0; i &lt; Alphabet.size; i++) { alphabet[i] = new Alphabet( (char)(&#39;A&#39; + i) ); } return alphabet; } /* * main to test Animal class */ public static void main(String[] args) { // Inheritance Hierarchy Alphabet[] objs = alphabetData(); // print with title Alphabet.setOrder(KeyType.title); Alphabet.print(objs); // print letter only Alphabet.setOrder(KeyType.letter); Alphabet.print(objs); } } Alphabet.main(null); . class [LREPL.$JShell$13$Alphabet; 26 Generic: Alphabet listed by title Alphabet: A Alphabet: B Alphabet: C Alphabet: D Alphabet: E Alphabet: F Alphabet: G Alphabet: H Alphabet: I Alphabet: J Alphabet: K Alphabet: L Alphabet: M Alphabet: N Alphabet: O Alphabet: P Alphabet: Q Alphabet: R Alphabet: S Alphabet: T Alphabet: U Alphabet: V Alphabet: W Alphabet: X Alphabet: Y Alphabet: Z class [LREPL.$JShell$13$Alphabet; 26 Generic: Alphabet listed by letter A B C D E F G H I J K L M N O P Q R S T U V W X Y Z . Modified Class for our Lesson . /* * Types class extends Generics and defines abstract methods */ public class Types extends Generics { // Class data public static KeyTypes key = KeyType.title; // static initializer public static void setOrder(KeyTypes key) { Types.key = key; } public enum KeyType implements KeyTypes {title, name, isPrimitive, isObject} // Instance data private final String name; private final boolean isPrimitive; private final boolean isObject; /* constructor * */ public Types(String name, boolean isPrimitive, boolean isObject) { super.setType(&quot;Types&quot;); this.name = name; this.isPrimitive = isPrimitive; this.isObject = isObject; } /* &#39;Generics&#39; requires getKey to help enforce KeyTypes usage */ @Override protected KeyTypes getKey() { return Types.key; } /* &#39;Generics&#39; requires toString override * toString provides data based off of Static Key setting */ @Override public String toString() { String output=&quot;&quot;; if (KeyType.name.equals(this.getKey())) { output += this.name; } else if (KeyType.isPrimitive.equals(this.getKey())) { output += this.isPrimitive; } else if (KeyType.isObject.equals(this.getKey())) { output += this.isObject; } else { output += super.getType() + &quot;: &quot; + this.name + &quot;, is a primitive data type: &quot; + this.isPrimitive + &quot;, is an object: &quot; + this.isObject; } return output; } // Test data initializer public static Types[] typess() { return new Types[]{ new Types(&quot;ArrayList&quot;, false, true), new Types(&quot;Array&quot;, false, true), new Types(&quot;2D Array&quot;, false, true), new Types(&quot;Int&quot;, true, false), new Types(&quot;Boolean&quot;, true, false), new Types(&quot;Float&quot;, true, false) }; } /* main to test Types class * */ public static void main(String[] args) { // Inheritance Hierarchy Types[] objs = typess(); // print with title Types.setOrder(KeyType.title); Types.print(objs); // print name only Types.setOrder(KeyType.name); Types.print(objs); // print object status only Types.setOrder(KeyType.isObject); Types.print(objs); } } Types.main(null); . class [LREPL.$JShell$15F$Types; 6 Generic: Types listed by title Types: ArrayList, is a primitive data type: false, is an object: true Types: Array, is a primitive data type: false, is an object: true Types: 2D Array, is a primitive data type: false, is an object: true Types: Int, is a primitive data type: true, is an object: false Types: Boolean, is a primitive data type: true, is an object: false Types: Float, is a primitive data type: true, is an object: false class [LREPL.$JShell$15F$Types; 6 Generic: Types listed by name ArrayList Array 2D Array Int Boolean Float class [LREPL.$JShell$15F$Types; 6 Generic: Types listed by isObject true true true false false false . Quick CB Notes . using static methods means that you can use the methods without creating an object, example being the Math class where you can say class.method instead of object.method | string class object where you can set it equal to a word like &quot;theater&quot; word.length | constructor is used to create the instance of the class | constructing an object using a class, and using an object uses object.method because it is an accessor method that returns a variable that returns the method ex: String location = teacher.getLocation(); or teacher.changeLocation(&quot;Florida&quot;); | modifiers are used to change the access to a method, like public, private, etc | setters/getters are used to protect the data in a class, getters return the value while setters sets or updates a value | . Linked Lists, Queue, Stack, generic &lt;T&gt; . public class Node{ Node next; int data; public ListLists(int data){ this.data = data; } } // Linked lists are all connected. So, you can do methods like current.next or head.next. public class LinkedList{ Node head; /* * We have to go to the head, then keep going to the next, untill you add the elemtn you want. */ public void append(int data){ if (head == null){ head = new Node(data); return } Node current = head; while(current.next !=null){ current = current.next; } current.next = new Node(data); } /* * If we want to prepend to a linked list, then we have to set the old head to the head.next, and set the new head as head. */ public void prepend(int data){ Node newHead = new Node(data); newHead.next = head; head = newHead; } /* in linked lists, we do not actually delete any of the values. For example, if we want to &quot;delete&quot; the second element of the list we simply stop at the first, ignore the second element, and then go to the third. */ public void deteleteWithValue(int data){ if (head==null){ return } if(head.data == data){ head = head.next; return; } Node current = head; while(current.next != null){ if(current.next.data == data){ current.next = current.next.next; return; } current = current.next; } } } . import java.util.Iterator; /** * Queue Iterator * * 1. &quot;has a&quot; current reference in Queue * 2. supports iterable required methods for next that returns a generic T Object */ class QueueIterator&lt;T&gt; implements Iterator&lt;T&gt; { LinkedList&lt;T&gt; current; // current element in iteration // QueueIterator is pointed to the head of the list for iteration public QueueIterator(LinkedList&lt;T&gt; head) { current = head; } // hasNext informs if next element exists public boolean hasNext() { return current != null; } // next returns data object and advances to next position in queue public T next() { T data = current.getData(); current = current.getNext(); return data; } } /** * Queue: custom implementation * @author John Mortensen * * 1. Uses custom LinkedList of Generic type T * 2. Implements Iterable * 3. &quot;has a&quot; LinkedList for head and tail */ public class Queue&lt;T&gt; implements Iterable&lt;T&gt; { LinkedList&lt;T&gt; head = null, tail = null; /** * Add a new object at the end of the Queue, * * @param data, is the data to be inserted in the Queue. */ public void add(T data) { // add new object to end of Queue LinkedList&lt;T&gt; tail = new LinkedList&lt;&gt;(data, null); if (this.head == null) // initial condition this.head = this.tail = tail; else { // nodes in queue this.tail.setNextNode(tail); // current tail points to new tail this.tail = tail; // update tail } } /** * Returns the data of head. * * @return data, the dequeued data */ public T delete() { T data = this.peek(); if (this.tail != null) { // initial condition this.head = this.head.getNext(); // current tail points to new tail if (this.head != null) { this.head.setPrevNode(tail); } } return data; } /** * Returns the data of head. * * @return this.head.getData(), the head data in Queue. */ public T peek() { return this.head.getData(); } /** * Returns the head object. * * @return this.head, the head object in Queue. */ public LinkedList&lt;T&gt; getHead() { return this.head; } /** * Returns the tail object. * * @return this.tail, the last object in Queue */ public LinkedList&lt;T&gt; getTail() { return this.tail; } /** * Returns the iterator object. * * @return this, instance of object */ public Iterator&lt;T&gt; iterator() { return new QueueIterator&lt;&gt;(this.head); } } . | T data = current.getData(); cannot find symbol symbol: method getData() | current = current.getNext(); cannot find symbol symbol: method getNext() . /** * Queue Manager * 1. &quot;has a&quot; Queue * 2. support management of Queue tasks (aka: titling, adding a list, printing) */ class QueueManager&lt;T&gt; { // queue data private final String name; // name of queue private int count = 0; // number of objects in queue public final Queue&lt;T&gt; queue = new Queue&lt;&gt;(); // queue object /** * Queue constructor * Title with empty queue */ public QueueManager(String name) { this.name = name; } /** * Queue constructor * Title with series of Arrays of Objects */ public QueueManager(String name, T[]... seriesOfObjects) { this.name = name; this.addList(seriesOfObjects); } /** * Add a list of objects to queue */ public void addList(T[]... seriesOfObjects) { //accepts multiple generic T lists for (T[] objects: seriesOfObjects) for (T data : objects) { this.queue.add(data); this.count++; } } /** * Print any array objects from queue */ public void printQueue() { System.out.println(this.name + &quot; count: &quot; + count); System.out.print(this.name + &quot; data: &quot;); for (T data : queue) System.out.print(data + &quot; &quot;); System.out.println(); } } /** * Driver Class * Tests queue with string, integers, and mixes of Classes and types */ class QueueTester { public static void main(String[] args) { // Create iterable Queue of Words Object[] words = new String[] { &quot;seven&quot;, &quot;slimy&quot;, &quot;snakes&quot;, &quot;sallying&quot;, &quot;slowly&quot;, &quot;slithered&quot;, &quot;southward&quot;}; QueueManager qWords = new QueueManager(&quot;Words&quot;, words ); qWords.printQueue(); // Create iterable Queue of Integers Object[] numbers = new Integer[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}; QueueManager qNums = new QueueManager(&quot;Integers&quot;, numbers ); qNums.printQueue(); // Create iterable Queue of NCS Generics Animal.setOrder(Animal.KeyType.name); Alphabet.setOrder(Alphabet.KeyType.letter); Cupcake.setOrder(Cupcake.KeyType.flavor); // Illustrates use of a series of repeating arguments QueueManager qGenerics = new QueueManager(&quot;My Generics&quot;, Alphabet.alphabetData(), Animal.animals(), Cupcake.cupcakes() ); qGenerics.printQueue(); // Create iterable Queue of Mixed types of data QueueManager qMix = new QueueManager(&quot;Mixed&quot;); qMix.queue.add(&quot;Start&quot;); qMix.addList( words, numbers, Alphabet.alphabetData(), Animal.animals(), Cupcake.cupcakes() ); qMix.queue.add(&quot;End&quot;); qMix.printQueue(); } } QueueTester.main(null); . | public final Queue&lt;T&gt; queue = new Queue&lt;&gt;(); // queue object java.util.Queue is abstract; cannot be instantiated | public QueueManager(String name, T[]... seriesOfObjects) { Possible heap pollution from parameterized vararg type T[] | public void addList(T[]... seriesOfObjects) { //accepts multiple generic T lists Possible heap pollution from parameterized vararg type T[] . Hack 1 . public static class Queue{ private static class Node{ private int data; private Node next; private Node(int data){ this.data = data; } } private Node head; private Node tail; public boolean isEmpty(){ return head == true; } public int peek(){ return head.data; } public void add(int data){ //add to the tail Node node = new Note(data); if (tail != null){ tail.next = node; } tail = node; if (head ==null){ head = node; } } public int remove(){ int data = head.data; head = head.next; if (head ==null){ tail = null; } return data; } } public class QueueExample { public static void main(String[] args) { Queue&lt;String&gt; queue = new LinkedList&lt;String&gt;(); // Adding elements to the queue queue.add(&quot;seven&quot;); System.out.println(&quot;Enqueued data: &quot; + &quot;seven&quot;); printQueue(queue); queue.add(&quot;slimy&quot;); System.out.println(&quot;Enqueued data: &quot; + &quot;slimy&quot;); printQueue(queue); queue.add(&quot;snakes&quot;); System.out.println(&quot;Enqueued data: &quot; + &quot;snakes&quot;); printQueue(queue); queue.add(&quot;sallying&quot;); System.out.println(&quot;Enqueued data: &quot; + &quot;sallying&quot;); printQueue(queue); queue.add(&quot;slowly&quot;); System.out.println(&quot;Enqueued data: &quot; + &quot;slowly&quot;); printQueue(queue); queue.add(&quot;slithered&quot;); System.out.println(&quot;Enqueued data: &quot; + &quot;slithered&quot;); printQueue(queue); queue.add(&quot;southward&quot;); System.out.println(&quot;Enqueued data: &quot; + &quot;southward&quot;); printQueue(queue); // Removing elements from the queue String data =queue.remove(); System.out.println(&quot;Dequeued data: &quot; + data); printQueue(queue); data = queue.remove(); System.out.println(&quot;Dequeued data: &quot; + data); printQueue(queue); data = queue.remove(); System.out.println(&quot;Dequeued data: &quot; + data); printQueue(queue); data = queue.remove(); System.out.println(&quot;Dequeued data: &quot; + data); printQueue(queue); data = queue.remove(); System.out.println(&quot;Dequeued data: &quot; + data); printQueue(queue); data = queue.remove(); System.out.println(&quot;Dequeued data: &quot; + data); printQueue(queue); data = queue.remove(); System.out.println(&quot;Dequeued data: &quot; + data); printQueue(queue); } // Helper method to print the contents of the queue public static void printQueue(Queue&lt;String&gt; queue) { System.out.println(&quot;Words count: &quot; + queue.size() + &quot;, data: &quot; + String.join(&quot; &quot;, queue)); System.out.println(); } } QueueExample.main(null); . | return head == true; bad operand types for binary operator &#39;==&#39; first type: Queue.Node second type: boolean | Node node = new Note(data); cannot find symbol symbol: class Note | public static class Queue{ Modifier &#39;static&#39; not permitted in top-level declarations, ignored . Hack 2 . public class Combine{ public ListNode main(listNode l1, listNode l2){ ListNode current_node = new ListNode(0); while (l1!=null &amp;&amp; l2!=null){ if (l1.val&lt;l2.val){ current_node.next = l1; l1 = l1.next; } else{ current_node.next = l2; l2 = l2.next; } current_node = current_node.next; } if((l1==null &amp;&amp; l2!=null)){ current_node.next = l2; l2 = l2.next; } if((l1!=null &amp;&amp; l2==null)){ current_node.next = l1; l1 = l1.next; } return current_node.next; } } Combine.main(null); . | public class Combine{ | public ListNode main(listNode l1, listNode l2){ | ListNode current_node = new ListNode(0); | while (l1!=null &amp;&amp; l2!=null){ | if (l1.val&lt;l2.val){ | current_node.next = l1; | l1 = l1.next; | } | else{ | current_node.next = l2; | l2 = l2.next; | } | | current_node = current_node.next; | } | | if((l1==null &amp;&amp; l2!=null)){ | current_node.next = l2; | l2 = l2.next; | } | if((l1!=null &amp;&amp; l2==null)){ | current_node.next = l1; | l1 = l1.next; | } | | return current_node.next; | } | } Unresolved dependencies: - class listNode - class ListNode . Hack 3 . public static class Random{ private static class Node{ private int data; private Node next; private Node(int data){ this.data = data; } } private Node current; public static void main(String[] args) { while (node.current!= null){ node.current = Math.random() *10; } } } Random.main(null); . | public static class Random{ | | private static class Node{ | private int data; | private Node next; | private Node(int data){ | this.data = data; | } | } | private Node current; | | public static void main(String[] args) { | while (node.current!= null){ | node.current = Math.random() *10; | } | } | } Unresolved dependencies: - variable node . Hack 4 . public class Reverse{ public static void main(String[] args){ Queue &lt;Integer&gt; queue = new ArrayDeque&lt;&gt;(); queue.add(10); queue.add(20); queue.add(30); System.out.println(queue); Stack&lt;Integer&gt; stack = new Stack&lt;&gt;(); while(!queue.isEmpty()){ stack.push(queue.remove()); } while(!stack.isEmpty()){ queue.add(stack.pop()); } System.out.print(queue); } } Reverse.main(null); . [10, 20, 30] [30, 20, 10] .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2023/03/19/generics-types-and-collections.html",
            "relUrl": "/fastpages/jupyter/2023/03/19/generics-types-and-collections.html",
            "date": " • Mar 19, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "ArrayLists Lesson",
            "content": "A Brief Intro: . Learning Objective: ArrayList objects are a good way to represent collections of related object reference data. | An ArrayList is Mutable and contains Object References Mutable: Changeable in size and content | Object References: Stores Wrapper Class Objects, not primitives | . | . Vocabulary: . Static: size can&#39;t be changed Arrays are static in size | . | Dynamic: size can be changed at any time ArrayLists are dynamic | . | . Differences between Array and ArrayList: . Array ArrayList . fixed length | resizable length | . fundamental java feature | park of a framework | . an Object with no methods | a Class with many methods | . not as flexible | flexible | . can store primitive data | not designed to store primitives | . Additionally, it&#39;s slightly slower than an Array and can only be used with an import statement | ArrayList class is implemented using Arrays! | . Declaring an ArrayList: . // make sure to import! import java.util.ArrayList; // declare a variable to reference an ArrayList Object ArrayList&lt;DataType&gt; variableName; // instantiate an ArrayList Object // stores only elements of the same, NONPRIMITIVE DataType New ArrayList&lt;DataType&gt;(); // empty New ArrayList&lt;DataType&gt;(n); // has n spaces . Use primitive values disguised as Wrapper Class Objects for ArrayLists, since they can only store references to objects, not primitive values! | . Hack 1! . Create an ArrayList: . // a) that stores Boolean values ; // b) that stores Turtle Objects ; // c) that initializes with 10 Strings ; . Methods with ArrayLists: . int .size(): returns the number of elements in the ArrayList | boolean .add(datatype obj): appends obj to the end of the list; returns true | datatype .add(int index, datatype obj): inserts obj at position index and moves the rest of the elements to the right higher | datatype .remove(int index): removes element from position index and moves the elements to right of it lower | datatype .set(int index, datatype obj): replaces the element at position index with obj; returns the element formerly as position index | datatype .get(int index): returns the element at position index in the list | . Hack 2! . Choose 3 different methods from above to change around this sample ArrayList: . import java.util.ArrayList; public class Hack2 { public static void main(Integer[] args) { ArrayList&lt;Integer&gt; randomNumbers = new ArrayList&lt;Integer&gt;(); ; ; ; } } Hack2.main(null); . Passing an ArrayList as a Method Parameter: . ArrayList are reference objects and when passed as a parameter in a method they are passed as references to their addresses, not copies of their values | Methods access and update the elements in ArrayLists directly, so be careful | . On the Exam . Min/max value | Find sum, avg, or mode | Check elements for particular property | Check duplicates (individuals or pairs) | Count elements meeting specific criteria | Shift or reverse elements | . Traversing ArrayList with loops . For loops traverse an ArrayList given that a value condition is met (i) and updated each time i++ or i--, i = 0 or i = arr.size()-1 | . | While loops continue while i meets a certain condition i &lt;arr.size() | . | Enhanced for loops do not explicitly use a variable for index tracking for variable : collection | . | . for (int i = 0, i &lt; arr.size()-1, i++) { } for (DataType variable: collection) { } while (int i &lt; arr.size()-1) { //code i++ } . Algorithm Samples . Common AP exam operations include finding a max or minimum value and summing the integers in an ArrayList | . // sample for max value search private double findMax (ArrayList&lt;Double&gt; values) { double max = values.get(0); // setting first value as variable for comparison for (int index = 1; index &lt; values.size(); index++) { // checking values from 2nd to last if (values.get(index) &gt; max) { max = values.get(index); // updating max value with each check } } return max; } . // sample code for total sum of integers - finish the loop! private int findSum(ArrayList&lt;Integer&gt; values) { int total = 0; for (int i=0; i &lt; values.size(); i++) { ??? } } . Search . Linear search uses loops to check each element for a condition | Remember different checks for conditions: == for int, rounding for doubles (or subtraction), .equals() for objects | Usual return method is index or -1 (false) if not found | Enhanced for loops are useful if checking for existence (no indexes) | If removing elements, use index-- to avoid skipping elements | May have to sort first to avoid skipping values | . public int where(double magicNumber, ArrayList&lt;Double&gt; realNumbers, double delta) { for (int index = 0; index &lt; realNumbers.size(); index++) { if (Math.abs(magicNumber-realNumbers.get(index)) &lt; delta) { return index; } } return -1; } . Sorting . Selection sort uses a min/max variable that updates with a linear iteration pattern | Needs a helper method to swap values using a third variable | Insertion sort builds sorted structure by placing elements at assigned indexes, uses while loop | . // selection sort for (int i = 0; i &lt; arr.length; i++) { // nested loop 1 index ahead for (int j = i + 1; j &lt; arr.length; j++) { // comparing elements int temp = 0; if (arr[j] &lt; arr[i]) { // write the swap code! } } // Printing sorted array System.out.print(arr[i] + &quot; &quot;); } . // insertion sort for (int outer = 1; outer &lt; randomList.size(); outer+) { DebugDuck tested = randomList.get(outer); int inner = outer - 1; while (inner &gt;= 0 &amp;&amp; tested.compareTo(randomList.get(inner)) &lt; 0) { randomList.set(inner + 1, randomList.get(inner)); inner--; } randomList.set(inner + 1, tested); } . Hacks .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2023/03/14/arraylistlesson.html",
            "relUrl": "/fastpages/jupyter/2023/03/14/arraylistlesson.html",
            "date": " • Mar 14, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "3/12/23 Test Corrections",
            "content": "Overall Score: 36/39 . Question Wrong Answer Right Answer . Q16 calculate method with 2D int array parameter | Answer A. Incorrect. The largest value in the two-dimensional array is stored in found, but result is returned. | Answer E. Correct. Prior to the start of the nested for loops, the value of found is initialized to the element at row 0, column 0 in values and result is initialized to 0.The outer for loop iterates across all rows in values. The inner for loop iterates across the column indices of each row. When an element is located in the two-dimensional array that is larger than the current value stored in found, then this value is assigned to found and the column index is assigned to result. When the nested loop structure stops executing, the largest element in values is stored in found and the column in which that element was located is stored in result. | . Q18 Print statement with mathematical operators | Answer E. Incorrect. This would be the result if the division used was floating point division instead of integer division and the result was cast to an int, as in (int)(404.0 / 10 * 10 + 1). | Answer D. Correct. The first operation that is executed is 404 / 10. Since both 404 and 10 are integers, integer division is used resulting in 40. The value 40 is then multiplied by 10, resulting in 400, and finally 1 is added, meaning 401 is printed. | . Q20 mystery with 1D int array and nested iteration | Answer C. Incorrect. This would only be correct if the maximum value in nums was also the value that occurred the most number of times. | Answer E. Correct. The outer loop starts at 0 and loops through all the indices in arr. The inner loop starts at the index that is one more than outer and iterates through all indices to the right of this element. For each iteration of the inner loop, the element at the current value of outer is compared with each subsequent element. If the elements are equal, then count is incremented. This results in counting the number of occurrences of each value in the arr. After the inner loop terminates, if the number of occurrences of the current value is greater than previous highest count, the new count is assigned to m and the index of this element is stored in index. The method then returns the value of index, which represents the index of a value that occurs most often in nums. | .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2023/03/12/testcorrecs3.html",
            "relUrl": "/fastpages/jupyter/2023/03/12/testcorrecs3.html",
            "date": " • Mar 12, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Java Data Types",
            "content": "Sample Binary Addition . import java.util.Scanner; public class JavaBinaryAdder { public static void main(String[] args) { //Two variables to hold two input binary numbers long b1, b2; int i = 0, carry = 0; //This is to hold the output binary number int[] sum = new int[10]; //To read the input binary numbers entered by user Scanner scanner = new Scanner(System.in); //getting first binary number from user System.out.print(&quot;Enter first binary number: &quot;); b1 = scanner.nextLong(); System.out.print(b1); System.out.println(); //getting second binary number from user System.out.print(&quot;Enter second binary number: &quot;); b2 = scanner.nextLong(); System.out.print(b2); System.out.println(); //closing scanner after use to avoid memory leak scanner.close(); while (b1 != 0 || b2 != 0) { sum[i++] = (int)((b1 % 10 + b2 % 10 + carry) % 2); carry = (int)((b1 % 10 + b2 % 10 + carry) / 2); b1 = b1 / 10; b2 = b2 / 10; } if (carry != 0) { sum[i++] = carry; } --i; System.out.print(&quot;Output: &quot;); while (i &gt;= 0) { System.out.print(sum[i--]); } System.out.print(&quot; n&quot;); } } JavaBinaryAdder.main(null); . Enter first binary number: 1111 Enter second binary number: 10101 Output: 100100 . Code Example: Before and After Multiplying by 5 . import java.util.Scanner; public class MultiplyBy5 { public static void changeInt(int n) { System.out.println(&quot;In changeInt method&quot;); System.out.println(&quot; tBefore n *= 5: n = &quot; + n); // prints 5 n = n *= 5; System.out.println(&quot; tAfter n *= 5: n = &quot; + n); // prints 10 } public static void main(String[] args) { int n = 0; Scanner scanner = new Scanner(System.in); System.out.print(&quot;Enter number: &quot;); n = scanner.nextInt(); System.out.println(&quot;Main method before changeInt(n): n = &quot; + n); // prints 5 changeInt(n); System.out.println(&quot;Main method after changeInt(n): n = &quot; + n); // still prints 5 } } MultiplyBy5.main(null); . Enter number: Main method before changeInt(n): n = 6 In changeInt method Before n *= 5: n = 6 After n *= 5: n = 30 Main method after changeInt(n): n = 6 . Converting to Wrapper Class . int primitiveInt = n; Integer[] wrapperIntArray = new Integer[] { primitiveInt }; Integer wrapperInt = wrapperIntArray[0]; . Exploring Teacher Code: . What are Methods and Control Structures? . A method, also known as a function or subroutine, is a block of code that performs a specific task. Methods can be called multiple times and can accept input parameters and return output values. They are used to break down complex tasks into smaller, more manageable units of code. | Control structures are used to control the flow of execution in a program. They determine the order in which statements are executed based on certain conditions. There are three main types of control structures: Conditional statements: These are used to execute a certain block of code only if a particular condition is met. Examples include the &quot;if&quot; statement, the &quot;else&quot; statement, and the &quot;switch&quot; statement. | Looping statements: These are used to repeat a block of code until a particular condition is met. Examples include the &quot;for&quot; loop, the &quot;while&quot; loop, and the &quot;do-while&quot; loop. | Jump statements: These are used to transfer control to another part of the program. Examples include the &quot;break&quot; statement, the &quot;continue&quot; statement, and the &quot;return&quot; statement. | | . Diverse Arrays . This code definitely contains multiple Methods and Control Structures. The Methods are seen in functions such as arraySum(), rowSums(), and isDiverse(), as they are called in different places within the class and each do their own procedure. The Control Structures can be seen in the multiple conventional for loops in each of the methods. | The primary data types in the diverse matrix code are int and boolean as ints are used to stare the numbers within the 2D arrays and a boolean is used to provide the final answer as to whether the sums of the array rows are diverse or not. | . Math.random() . Math.random() is a built-in method in Java that returns a pseudo-random double value between 0.0 and 1.0 (inclusive). | This method uses a mathematical algorithm to generate random numbers, which means that the numbers are not truly random but are determined by the algorithm.- int randomNum = (int)(Math.random() * 10); returns a value between 0.0 and 1.0, which is then multiplied by 10 and cast to an integer. The resulting value is a random integer between 0 and 9. | If you want to get an integer value between 7 and 9, you can cast the result of the expression to an int, like this: int randomInt = (int) (Math.random() * 2 + 7); Here, Math.random() * 2 generates a random value between 0 and 2, and then adding 7 to it will shift the range to be between 7 and 9. | . DoNothingByValue . Seems to be multiple ways in order to change input such as arrays of numbers or strings into default values/empty arrays of 0. | This is done by creating a default array arr and setting all the values to 0 through the use of conventional for loops. ### IntByReference | Wraps int inputs into Integers, because they need to be objects in order to work with the swapper method. | In order to swap values if the latter one is lesser, the value is stored in a tmp variable in order to switch around. ### Menu | . import java.util.HashMap; import java.util.Map; import java.util.Scanner; public class MultiplyBy5 { public static void changeInt(int n) { System.out.println(&quot;In changeInt method&quot;); System.out.println(&quot; tBefore n *= 5: n = &quot; + n); // prints 5 n = n *= 5; System.out.println(&quot; tAfter n *= 5: n = &quot; + n); // prints 10 } public static void main(String[] args) { int n = 0; Scanner scanner = new Scanner(System.in); System.out.print(&quot;Enter number: &quot;); n = scanner.nextInt(); System.out.println(&quot;Main method before changeInt(n): n = &quot; + n); // prints 5 changeInt(n); System.out.println(&quot;Main method after changeInt(n): n = &quot; + n); // still prints 5 System.out.println(); } } /** * Menu: custom implementation * @author John Mortensen * * Uses String to contain Title for an Option * Uses Runnable to store Class-Method to be run when Title is selected */ // The Menu Class has a HashMap of Menu Rows // The MenuRow Class has title and action for individual line item in menu class MenuRow { String title; // menu item title Runnable action; // menu item action, using Runnable /** * Constructor for MenuRow, * * @param title, is the description of the menu item * @param action, is the run-able action for the menu item */ public MenuRow(String title, Runnable action) { this.title = title; this.action = action; } /** * Getters */ public String getTitle() { return this.title; } public Runnable getAction() { return this.action; } /** * Runs the action using Runnable (.run) */ public void run() { action.run(); } } // The Main Class illustrates initializing and using Menu with Runnable action class Driver { /** * Menu Control Example */ public static void main(String[] args) { // Row initialize MenuRow[] rows = new MenuRow[]{ // lambda style, () -&gt; to point to Class.Method new MenuRow(&quot;Exit&quot;, () -&gt; main(null)), new MenuRow(&quot;Multiply By 5&quot;, () -&gt; MultiplyBy5.main(null)), new MenuRow(&quot;Do Nothing&quot;, () -&gt; MultiplyBy5.main(null)), new MenuRow(&quot;Swap if Hi-Low&quot;, () -&gt; MultiplyBy5.main(null)), new MenuRow(&quot;Matrix Reverse&quot;, () -&gt; MultiplyBy5.main(null)), new MenuRow(&quot;Diverse Array&quot;, () -&gt; MultiplyBy5.main(null)), new MenuRow(&quot;Random Squirrels&quot;, () -&gt; MultiplyBy5.main(null)) }; // Menu construction Menu menu = new Menu(rows); // Run menu forever, exit condition contained in loop while (true) { System.out.println(&quot;Hacks Menu:&quot;); // print rows menu.print(); System.out.println(); // Scan for input try { Scanner scan = new Scanner(System.in); int selection = scan.nextInt(); // menu action try { MenuRow row = menu.get(selection); // stop menu if (row.getTitle().equals(&quot;Exit&quot;)) { System.out.println(&quot;Goodbye!&quot;); if (scan != null) scan.close(); // scanner resource requires release return; } // run option row.run(); } catch (Exception e) { System.out.printf(&quot;Invalid selection %d n&quot;, selection); } } catch (Exception e) { System.out.println(&quot;Not a number&quot;); } } } }Driver.main(null); . Hacks Menu: 0 ==&gt; Exit 1 ==&gt; Multiply By 5 2 ==&gt; Do Nothing 3 ==&gt; Swap if Hi-Low 4 ==&gt; Matrix Reverse 5 ==&gt; Diverse Array 6 ==&gt; Random Squirrels Enter number: Main method before changeInt(n): n = 346 In changeInt method Before n *= 5: n = 346 After n *= 5: n = 1730 Main method after changeInt(n): n = 346 Hacks Menu: 0 ==&gt; Exit 1 ==&gt; Multiply By 5 2 ==&gt; Do Nothing 3 ==&gt; Swap if Hi-Low 4 ==&gt; Matrix Reverse 5 ==&gt; Diverse Array 6 ==&gt; Random Squirrels Goodbye! . MenuRow is a method because it&#39;s a piece of code grouped together in a way that performs a specific task - initializing each row of the menu - and it&#39;s called over and over in the driver class. Though the MenuRow class itself is not a control structure, it is part of a switch case used in the Driver class which is. | The Driver mainly has a switch case control structure, in which different operations are performed depending on which int is typed into the scanner. For example there is a section of code where there&#39;s an if statement stating that if 0 is typed into the scanner, the menu will exited out of. | . AP CSA FRQ 2017 Methods and Control Structures . https://apcentral.collegeboard.org/media/pdf/ap-computer-science-a-frq-2017.pdf | . FRQ 4 Solution . part a: | . public static Position findPosition(int num, int[][] intArr) { // input is entered and saved as num for (int row=0; row &lt; intArr.length; row++) { // iterates through each row for (int col=0; col &lt; intArr[0].length; col++) { // iterates through each column in the row if (intArr[row][col] == num) { // if value = num return new Position(row, col); // return the value } } } return null; } . part b: | . public static Position[][] getSuccessorArray(int[][] intArr) { Position[][] newArr = new Position[intArr.length][intArr[0].length]; for (int row=0; row &lt; intArr.length; row++) { for (int col=0; col &lt; intArr[0].length; col++) { // iterates through rows and columns newArr[row][col] = findPosition(intArr[row][col]+1, intArr); // returns the coordinates of where that specific number is in the first array } } return newArr; // displays as a whole new array of coordinates } . Discussion of Methods &amp; Control Structures: . To iterate and perform operations throughout the 2D there are multiple For Loops that iterate through each value of the array to perform operations on it. | findPosition() and getSuccessorArray() are both methods that complete a specific task. | .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2023/03/06/java-data-types.html",
            "relUrl": "/fastpages/jupyter/2023/03/06/java-data-types.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "1/29/23 Test Corrections",
            "content": "Overall Score: 42/52 . Time Taken: 2 Hours . Question Wrong Answer Right Answer . Q6 calculate method with 2D int array parameter | Answer C. Incorrect. Because the algorithm uses a for-each loop to traverse the rows, the row index is not being stored. | Answer E. Correct. Prior to the start of the nested for loops, the value of found is initialized to the element at row 0, column 0 in values and result is initialized to 0.The outer for loop iterates across all rows in values. The inner for loop iterates across the column indices of each row. When an element is located in the two-dimensional array that is larger than the current value stored in found, then this value is assigned to found and the column index is assigned to result. When the nested loop structure stops executing, the largest element in values is stored in found and the column in which that element was located is stored in result. | . Q7 combine method | Answer A. Incorrect. This would be the result for the method call combine(&quot;00000&quot;, &quot;11111&quot;), for example. | Answer B. Correct. The combine method compares corresponding substrings of length 1 from input strings one and two. If the substrings are the same, the substring is appended to res; otherwise, &quot;0&quot; is appended to res. The first and second characters of res are &quot;0&quot; because the characters in position 0 and the characters in position 1 of one and two differ. The third character of res is &quot;1&quot; because the characters in position 2 of one and two are both &quot;1&quot;. The fourth character in res is &quot;0&quot; because the characters in position 3 of one and two differ. The fifth character in res is &quot;0&quot; because the last characters of one and two are both &quot;0&quot;. The value &quot;00100&quot; is returned. | . Q33 Print values in 2D int array | Answer C. Incorrect. This loop iterates over every row of numbers and prints the value returned by calling toString rather than the elements contained in the row. To traverse a 2D array, you need to use nested loops to have row and column index values to access the elements. The proper way to access an element of a 2D array would be numbers[row][column]. | Answer A. Correct. The outer for loop iterates over every row of numbers and assigns each row to the array row. The inner loop iterates over the array row accessing each element and assigning it to n. Then n is printed to the screen. In the first iteration of the outer loop, row is equal to {1, 2, 3}, and the inner loop will assign each successive value in row to n and print it to the screen, meaning 123 will be printed. For the second iteration of the outer loop, row is equal to {4, 5, 6}, and the inner loop will assign each successive value in row to n and print it to the screen, meaning 456 will be printed after 123, giving us the output 123456. | . Q39 remove even ArrayList elements | Answer C. Incorrect. The code segment returns a list with fewer elements than intended because it fails to consider the last element of myList. | Answer E. Correct. The code segment skips some elements of myList because the indexes of all subsequent elements change by one when a list element is removed. | . Q40 Remove names from a List | Answer D. Incorrect. II and III only. | Answer C. Correct. III only. | . Q42 Remove zeros from ArrayList by index | Answer B. Incorrect. [4, 2, 5, 3] | Answer D. Correct. [0, 4, 2, 5, 3] | . Q45 strArrMethod - last day of the school year | Answer D. Incorrect. This would be the result if the method had no if statement and sm was updated once for each pair arr[j] and arr[k] encountered in the nested for loops. | Answer A. Correct. Line 12 is executed each time the variable sm is updated because a new smallest value is found. When j has the value 0, sm is updated for &quot;day&quot; and &quot;of&quot;. When j has the value 1, sm is updated for &quot;of&quot;. When j has the value 4, sm is updated for &quot;year&quot;. When j has any of the values 2, 3, or 5, sm is not updated. Line 12 is executed four times. | . Q46 StudentInfo class and averageInMajor method | Answer C. Incorrect. Instance variable major is private to StudentInfo and can only be accessed by calling the accessor method getMajor. | Answer B. Correct. To calculate the average age in a given major, you have to find all the students in the given major, add up their ages, and divide by the total number of students in the major. Since theMajor is a String, the if statement needs to use .equals to compare theMajor with the major of k, found by calling the getMajor() method on k. If this boolean expression is true, we need to add the age of k, found by calling the getAge() method on k to sum and increase count by 1. | . Q48 sum of ArrayList values | Answer C. Incorrect. Option I is correct. The code segment uses a for loop to traverse the valueList array. The statement inside the loop calls the get method to access a Value object and then calls the getNum method to access the num instance variable. Option II is correct. The code segment uses an enhanced for loop to traverse the valueList array. The statement inside the loop calls the getNum method to access the num instance variable. Option III is incorrect. The code segment causes a compilation error because the getNum method must be called using the dot operator, not by passing the object reference as an argument. | Answer D. Correct. Option I is correct. The code segment uses a for loop to traverse the valueList array. The statement inside the loop calls the get method to access a Value object and then calls the getNum method to access the num instance variable. Option II is correct. The code segment uses an enhanced for loop to traverse the valueList array. The statement inside the loop calls the getNum method to access the num instance variable. Option III is incorrect. The code segment causes a compilation error because the getNum method must be called using the dot operator, not by passing the object reference as an argument. | . Q51 Use 1D array method on 2D array | Answer D. Incorrect. II and III only | Answer E. Correct. I, II, and III | .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2023/01/29/testcorrecs2.html",
            "relUrl": "/fastpages/jupyter/2023/01/29/testcorrecs2.html",
            "date": " • Jan 29, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "1/21/23 Test Corrections",
            "content": "Overall Score: 47/66 . Time Taken: Over 2 Hours . Question Wrong Answer Right Answer . Q1 addOneToEverything enhanced for loop | Answer B. Incorrect. The given method increases each element of the array numbers by 1. Code segment I does not work as intended. It assigns num a copy of each element of numbers. When num is incremented, it does not change the corresponding value stored in numbers. Code segment III does not work as intended, as it attempts to use num as an index rather than as a copy of a value from the array. | Answer E. Correct. The given method increases each element of the array numbers by 1. Code segment I does not work as intended. It assigns num a copy of each element of numbers. When num is incremented, it does not change the corresponding value stored in numbers. Code segment II does not compile, as the variable j has not been declared. Code segment III does not work as intended, as it attempts to use num as an index rather than as a copy of a value from the array. | . Q9 Compare blue red yellow code segments | Answer E. Incorrect. When choice is greater than 10, code segment A will print &quot;blue&quot; and the else statements are not executed. Code segment B will print &quot;blue&quot; but will then execute the next if statement and print &quot;yellow&quot;, thereby giving different output for initial values that are greater than 10. Therefore, there are some initial values for choice that will cause the two code segments to produce different output. | Answer C. Correct. When choice is greater than 10, code segment A will print &quot;blue&quot; and the else statements are not executed. Code segment B will print &quot;blue&quot; but will then execute the next if statement and print &quot;yellow&quot;, thereby giving different output for initial values that are greater than 10. | . Q12 Compound Boolean expression with variables x and y | Answer C. Incorrect. This expression will evaluate to false whenever y is less than 10000 regardless of whether x is in the correct range between 1000 and 1500. | Answer A. Correct. The original expression evaluates to true when either y is greater than 10000 or x is between 1000 and 1500. If the value of y is greater than 10000, this equivalent expression will evaluate to true since it is used in both of the or expressions. If y is not greater than 10000, the only way the equivalent expression can evaluate to true is if x is between 1000 and 1500. | . Q16 count 2D array columns | Answer E. Incorrect. The row and column indices of arr must be of type int. The variable row is of type int[]. | Answer C. Correct. Two-dimensional arrays are stored as arrays of one-dimensional arrays. Line 8 is intended to assign to row, a one-dimensional array of int values, a single row of the two-dimensional array arr. The original version of line 8 attempts to assign a row of col, but col is not a two-dimensional array. | . Q20 equivalent output from for loops | Answer A. Incorrect. The given code segment prints 1357, while this code segment prints 0246. | Answer E. Correct. The given code segment starts when k is 1 and prints every other value as long as k is less than or equal to 7. This code segment starts when k is 1 and prints every other value as long as k is less than or equal to 8. Both code segments print 1357. | . Q21 error calling method in Password class | Answer A. Incorrect. The private variable is accessed using a public constructor and a public method, which can be called from outside the Password class. | Answer E. Correct. The reset method has return type void, so it does not return a value. | . Q30 error when inserting val in numList | Answer D. Incorrect. The code segment correctly inserts 3 in numList to produce [1, 2, 2, 3, 3]. | Answer E. Correct. Since val is greater than every element in numList, index will continue to increase until it is 4. Once index is 4, an IndexOutOfBoundsException will occur because there is no element at index 4. | . Q32 findLongest consecutive target fix | Answer C. Incorrect. Insert the statement lenCount = 0; between lines 10 and 11. | Answer E. Correct. Insert the statement lenCount = 0; between lines 12 and 13. | . Q36 GridWorld getDirection and getMoveLocation calls | Answer E. Incorrect. Lines 4 and 5 only | Answer C. Correct. Line 4 only. | . Q37 if and compound boolean equivalence | Answer A. Incorrect. The statement assigns a different value to b2 than the code segment assigns to b1 when num is between -100, exclusive, and 0, inclusive, or when num is less than -100. | Answer E. Correct. In the body of the first if clause in the code segment, b1 retains the value true if num is between 0 and 100, exclusive. In the body of the else clause, b1 retains the value true if num is less than -100. The statement assigns true to b2 if num is less than -100 or between 0 and 100, exclusive. | . Q40 maxHelper with int array instance variable fix | Answer D. Incorrect. Insert the following statement between Line 1 and Line 2. if (numVals == 1) return nums(0); | Answer B. Correct. Insert the following statement before Line 1. if (numVals == 1 return nums(0); | . Q44 Points class | Answer E. Incorrect. The variable value is the parameter passed to the incrementPoints method. | Answer D. Correct. The variables n1 and n2 are not instance variables of the Points class, nor are they defined in the incrementPoints method. The instance variables num1 and num2 should have been used instead of n1 and n2. | . Q47 Print One Two Three Four | Answer C. Incorrect. This change would print &quot;OneTwoThree&quot; on the first line and &quot;Four&quot; on the second line. | Answer B. Correct. As is, the code segment prints all four strings on the same line. Changing print to println in line 2 will move the cursor to the next line after &quot;Two&quot; is printed. | . Q53 recursive mystery method | Answer C. Incorrect. The condition in the while loop header should be x &lt; n - 1. | Answer A. Correct. The variable total should be initialized to 1. | . Q54 recursive String method | Answer E. Incorrect. This method call returns false because the third character is lexicographically less than the fourth character of the string. | Answer D. Correct. If the first character of str is lexicographically greater than the second character of str, the method returns the result of the recursive call with a parameter that contains all but the first character of str. If the first character of str is lexicographically less than or equal to the second character of str, the method returns false. If no such character pair (where the first character of str is lexicographically less than or equal to the second character of str) is found, the base case is reached and the value true is returned. | . Q55 Relational expressions with ints | Answer D. Incorrect. a != b. | Answer C. Correct. a == b. | . Q56 removeDups with ArrayList fix | Answer A. Incorrect. k should be initialized to 0 at the beginning of the method. | Answer E. Correct. There should be an else before the statement k++;. | . Q63 traverse arr1 and minArray | Answer D. Incorrect. The code segment is intended to leave arr1 unchanged. Elements of arr1 will be modified by the statement on the original line 5 even if its position in the code segment is changed. | Answer C. Correct. Line 5 modifies an element of arr1 if that element is smaller than the corresponding element of minArray, which is NOT what is intended, since arr1 should remain unchanged. | . Q64 two traversals of arr | Answer A. Incorrect. The given code segment prints the array elements in order from left to right using an enhanced for loop. Code segment I uses elements as indices. The first element of arr is 1, and arr(1) is 2; the second element is 2, and arr(2) is 4; the third element is 4, and arr(4) is 3; etc. Code segment III prints the array elements in order from left to right using a for loop. | Answer B. Correct. The given code segment prints the array elements in order from left to right using an enhanced for loop. Code segment I uses elements as indices. The first element of arr is 1, and arr(1) is 2; the second element is 2, and arr(2) is 4; the third element is 4, and arr(4) is 3; etc. Code segment II prints the indices 0 to 4 in order. Code segment III prints the array elements in order from left to right using a for loop. | .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2023/01/21/testcorrecs.html",
            "relUrl": "/fastpages/jupyter/2023/01/21/testcorrecs.html",
            "date": " • Jan 21, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Unit 7 - Array Lists",
            "content": "Lesson Purpose and Objectives . Learn about the structure and functions of an arrayList and go over the key College Board concepts for arrayLists . ArrayLists are only 2.5%-7.5% but have many concepts from other units and are a good data structure to know. Also, the 3rd question of the FRQ is based on ArrayLists . 7.1 Introduction to ArrayList . Arrays ArrayLists . Static (fixed size) | Dynamic (can change size) | . Fundamental java feature | Part of a framework. Someone was nice and designed this with the behind the scenes being arrays | . An object with no methods | A class with many methods | . Not as flexible | Designed to be more flexible | . Can store more primitive data | Not designed to store primitives, they store object references | . | Slightly slower than Arrays | . | Can only be used with an import statement | . Real Life Array Example: You always have to have five players on the court . Real Life ArrayList Example: In dodgeball, the number of people in the game is changing based on who comes in or gets out . Primitive Data Types: . boolean | char | double | int | . Wrapper Class Data Types (Store the primitive values as objects) . Boolean | Character | Double | Integer | . import java.util.ArrayList; //you must import the java.util package // Instantiating: ArrayList&lt;DataType&gt; variableName = new ArrayList&lt;&gt;(n); //DataType must be nonprimitive data type public class introArrayList { public static void main (String[] args) { ArrayList&lt;Integer&gt; e1 = new ArrayList&lt;Integer&gt;(); //empty ArrayList&lt;String&gt; e2 = new ArrayList&lt;String&gt;(5); //5 elements ArrayList&lt;Dogs&gt; e3 = new ArrayList&lt;Dogs&gt;(); //you can store whatever objects you want } } . 7.2 ArrayList Methods . There are a lot of cool methods that you can use with arrayLists, but here are the ones College Board wants you to know for 7.2 - . size(); . Returns the number of elements in the list | . add(obj); . Adds element at the end | . add(index, object); . Adds element at specific index | . remove(index); . Removes element from specific index | . set(index, object); . Replaces element at index with new object | . get(index); . Returns element at index | . import java.util.ArrayList; public class methodsArrayList { public static void main (String[] args) { ArrayList&lt;String&gt; dogs = new ArrayList&lt;String&gt;(Arrays.asList(&quot;Sparky&quot;, &quot;Duke&quot;, &quot;Noodle&quot;)); ArrayList&lt;String&gt; dogs2 = new ArrayList&lt;&gt;(Arrays.asList(&quot;Sparky&quot;, &quot;Duke&quot;, &quot;Noodle&quot;)); System.out.println(&quot;There are &quot; + dogs.size() + &quot; in the ArrayList&quot;); System.out.println(&quot;There are &quot; + dogs2.size() + &quot; in the ArrayList&quot;); //objects you add must be of the same data type dogs.add(&quot;Peanut&quot;); System.out.println(&quot;There are now &quot; + dogs.size() + &quot; dogs in the ArrayList&quot;); String myDog = dogs.get(2); System.out.println(&quot;My dog is named &quot; + myDog); } } //Note: you don&#39;t need to declare &lt;String&gt; again after new ArrayList methodsArrayList.main(null); . There are 3 in the ArrayList There are 3 in the ArrayList There are now 4 dogs in the ArrayList My dog is named Noodle . //Hmmmm... seems suspect import java.util.ArrayList; public class example { public static void main (String[] args) { ArrayList&lt;Boolean&gt; questions = new ArrayList&lt;&gt;(); questions.add(true); questions.add(false); myMethod(questions); } public static void myMethod(ArrayList arr) { if (arr.size()&gt;0) { arr.set(0,&quot;Hello&quot;); //String with boolean??? Uh oh! System.out.println(arr.get(0)); } } } example.main(null); . Hello . import java.util.ArrayList; public class example { public static void main (String[] args) { ArrayList&lt;Boolean&gt; questions = new ArrayList&lt;&gt;(); questions.add(true); questions.add(false); myMethod(questions); } public static void myMethod(ArrayList&lt;Boolean&gt; arr) { if (arr.size()&gt;0) { arr.set(0,&quot;Hello&quot;); //String with boolean??? Uh oh! System.out.println(arr.get(0)); } } } example.main(null); //Make sure to specify data type so the compiler is more helpful and it avoids confusion //This also applies for returning and arrayList as well . | arr.set(0,&#34;Hello&#34;); //String with boolean??? Uh oh! incompatible types: java.lang.String cannot be converted to java.lang.Boolean . //Returning an ArrayList public static ArrayList methodName (ArrayList arr){ return arr; } . // HACK!!!! // Create an arrayList and use one of the cool methods for it import java.util.ArrayList; public class hack1 { public static void main (String[] args) { ArrayList&lt;String&gt; cats = new ArrayList&lt;&gt;(Arrays.asList(&quot;Princess&quot;, &quot;Fluffy&quot;, &quot;Captain&quot;)); System.out.println(&quot;There are &quot; + cats.size() + &quot; in the ArrayList&quot;); //objects you add must be of the same data type cats.add(&quot;Angelina&quot;); System.out.println(&quot;There are now &quot; + cats.size() + &quot; cats in the ArrayList&quot;); } } hack1.main(null); . There are 3 in the ArrayList There are now 4 cats in the ArrayList . 7.3 Traversing ArrayLists . there are 2 ways to traverse arraylists: for loops and enhanced for loops | use get() instead of bracket notation for getting an element of an arraylist | use size() to find number of elements in arraylist instead of using .length | . for loop . import java.util.*; public class main { public static void main(String[] args) { List&lt;Integer&gt; numbers = Arrays.asList(1, 2, 3, 4, 5); for (int i = 0; i &lt; numbers.size(); i++) { System.out.print(numbers.get(i) + &quot; &quot;); } } } main.main(null); . 1 2 3 4 5 . enhance for loops . import java.util.*; public class main { public static void main(String[] args) { List&lt;Integer&gt; numbers = Arrays.asList(1, 2, 3, 4, 5); for ( int num : numbers ) System.out.print(num + &quot; &quot;); } } main.main(null); . 1 2 3 4 5 . Common Mistakes . don&#39;t forget to import java.util.ArrayList | don&#39;t declare or instantiate ArrayList with a primitive data type, which are things such as int, double, and booleans. | don&#39;t forget the parentheses at the end of the constructor and the element types with the brackets: ArrayList list = new ArrayList(); &lt;/li&gt; don&#39;t confuse arrays with arraylists, don&#39;t use [], don&#39;t use .length use .size() instead | &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Hack #2 . import java.util.ArrayList; ArrayList&lt;String&gt; color = new ArrayList&lt;String&gt;(); color.add(&quot;red apple&quot;); color.add(&quot;green box&quot;); color.add(&quot;blue water&quot;); color.add(&quot;red panda&quot;); /*/ using if(color.get(i).contains(&quot;red&quot;)) iterate through the arraylist and remove all elements that contain the word red in them /*/ for (int i = 0; i &lt; color.size(); i++) { if (color.get(i).contains(&quot;red&quot;)) { color.remove(i); } } System.out.print(color); . [green box, blue water] . 7.4 Developing Algorithms Using ArrayLists . Modify Array Values . ArrayList&lt;Integer&gt; num = new ArrayList&lt;Integer&gt;(); num.add(5); num.add(1); num.add(3); for (int i = 0; i &lt; num.size(); i++) { num.set(i, num.get(i) * 2); } System.out.print(num); . [10, 2, 6] . find max value . ArrayList&lt;Integer&gt; num = new ArrayList&lt;Integer&gt;(); num.add(5); num.add(1); num.add(3); int maxValue = num.get(0); for (int number: num) { if (number &gt; maxValue) { maxValue = number; } } System.out.print(maxValue); . 5 . find min value . ArrayList&lt;Integer&gt; num = new ArrayList&lt;Integer&gt;(); num.add(5); num.add(1); num.add(3); int minValue = num.get(0); for (int number: num) { if (number &lt; minValue) { //if new min value found, replace current minValue minValue = number; } } System.out.print(minValue); . 1 . Hack #3 . // find the sum of the elements in the arraylist ArrayList&lt;Integer&gt; num = new ArrayList&lt;Integer&gt;(); num.add(5); num.add(1); num.add(3); int sum = 0; for (int i = 0; i &lt; num.size(); i++) { sum = sum + num.get(i); } System.out.print(sum); . 9 . 7.5 Searching . Often times we need to locate data inside linear structures. Normally we would use for loops in order to specify each element, one at a time, and do not need to track the index after execution. | . for ( int index = 0; index &lt; items.size(); index++ ){ //forward searching if ( items.get(index) == num ){ return index; } } . Important Things to Keep in Mind . When looking at int values, the == operator should be used. | When searching for a double value, we need to make sure the value is close enough by doing some math. | Object instances should always use the .equals(otherThing) method to check for a match. | . When searching a linear structure we need to send it the structure and what we are looking for as parameters. A standard for loop with an if block is all we need to search any linear structure. . public int whereIsMyNumber(int magicNumber, int [] myNumbers) { for (int index = 0; index &lt; myNumbers.length; index++) //search through every single spot { if (myNumbers[index] == magicNumber) //do they match? if so return index { return index; } } return -1; // if searched through every single spot, indicate its not there } . You shouldn&#39;t use the == operator when looking for an object. It will only return true if the variable and the element stored at the index point to the same memory, are aliases of each other. | . Here is an example of how you would search for a traditional object: . public int findTheWord(String searchedPhrase, ArrayList&lt;Book&gt; myBooks) { for (int index = 0; index &lt; myBooks.size(); index++) //search through every book in structure { Book currentBook = myBooks.get(index); //hold current book with current book variable String currentPhrase = currentBook.getDescription(); //get description of current book and store in variable currentPhrase if (currentPhrase.equals(searchedPhrase)) //if parameter = current phrase of book looking at - using .equals instead of == operator { return index; } } return -1; //if no match found, indicate its not there } . 7.6 Sorting . Selection sort identifies either the maximum or minimum of the compared values and iterates over the structure checking if the item stored at the index matches the condition, if so, it will swap the value stored at the index and continue. | The insertion sort is characterized by building a sorted structure as it proceeds. It inserts each value it finds at the appropriate location in the data structure. This is often accomplished by using a while loop as the inner loop. | . for (int outer = 1; outer &lt; randomList.size(); outer++) { DebugDuck tested = randomList.get(outer); //extract out a value out of list, passes to outer int inner = outer - 1; //goes back and compares to previous while ( inner &gt;= 0 &amp;&amp; tested.compareTo(randomList.get(inner)) &lt; 0 ) //checks to see if index is valid { randomList.set(inner + 1, randomList.get(inner)); //move up by one and replace original location inner--; } randomList.set(inner + 1, tested); //anything taken out would be placed back into structure } . 7.7 Ethical Issues Around Data Collection . Safety with Data Collection . It is very important to minimize user data collection in our programs. While collecting data in a smaller program may not be a big issue, establishing good practices with data security is always a safer bet when eventually moving to larger projects that manage data. . Whenever you come across data that you no longer will need, it is a good practice to explicitly remove that data altogether. . import java.util.Scanner; import java.util.Arrays; public class dataRemoval { public static void main(String[] args) { // just a scanner object Scanner sc = new Scanner(System.in); // makes an arraylist with some users already in it ArrayList&lt;String&gt; userList = new ArrayList&lt;&gt;(Arrays.asList(&quot;Kian&quot;, &quot;Kiannp44@gmail.com&quot;, &quot;Samuel&quot;, &quot;samuelwaang@gmail.com&quot;, &quot;Calissa&quot;, &quot;calissaT@gmail.com&quot;)); // takes user&#39;s name System.out.println(&quot;Log in &quot;); System.out.println(&quot;Please enter your name:&quot;); String name = sc.nextLine(); System.out.println(name); userList.add(name); // takes user&#39;s email System.out.println(&quot;Please enter your email:&quot;); String email = sc.nextLine(); System.out.println(email); userList.add(email); // prints all the current users in arraylist System.out.println(); System.out.println(&quot;Current users in database &quot;); System.out.println(userList); // prompt to log out System.out.println(); System.out.println(&quot;Would you like to log out? (y/n)&quot;); String logOut = sc.nextLine(); if (logOut.equals(&quot;y&quot;)) { // if user logs out, remove their name and email from arraylist System.out.println(logOut); userList.remove(name); userList.remove(email); } // reprints current users in arraylist System.out.println(); System.out.println(&quot;Current users in database &quot;); System.out.println(userList); } } dataRemoval.main(null); . Log in Please enter your name: Evan Please enter your email: evanjoelsanchez@gmail.com Current users in databse [Kian, Kiannp44@gmail.com, Samuel, samuelwaang@gmail.com, Calissa, calissaT@gmail.com, Evan, evanjoelsanchez@gmail.com] Would you like to log out? (y/n) y Current users in database [Kian, Kiannp44@gmail.com, Samuel, samuelwaang@gmail.com, Calissa, calissaT@gmail.com] . Anonymizing Personal Data . Instead of using names for users, we can use hash codes instead, which means that each user will simply be identified by their hash code. . public class hashUsers { public static void main(String[] args) { Scanner sc = new Scanner(System.in); String name = sc.nextLine(); // this .hashCode() method will convert the name to a code which cannot be traced back to that original name int id = name.hashCode(); name = null; // name is now null, and nobody will ever know the original name I put in System.out.println(&quot;Hash Code: &quot; + id); } } hashUsers.main(null); . Hash Code: 2172094 . The Takeaway . It is important to understand that as a programmer handling user data, it is your responsibility to protect that collected data. The less data you collect, the less you have to safeguard. A compromised database will generally be an expensive lawsuit in a large scale project. . Homework . Quizziz . Completed . &lt;/div&gt; | .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/jupyter/2022/11/30/unit7-notes.html",
            "relUrl": "/jupyter/2022/11/30/unit7-notes.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Practice MCQ 1 Test Corrections",
            "content": "Score - 34/40 . Q4 - Selection with variables x and y . answer picked - Answer B This would be the result if the division used was floating point division, instead of integer division. This would be the case if either x or y were of type double instead of type int or if either value was typecast as a double in the expression. | . | correct answer - Answer C When we evaluate the express(x &lt; 10) &amp;&amp; (y &lt; 0) for x having the value 7 and y having the value 3, x &lt; 10 evaluates to true, since 7 is less than 10, and y &lt; 0 evaluates to false, since 3 is not less than 0. The logic operator &amp;&amp; evaluates to true when both conditions are true and evaluates to false otherwise. Since the second condition is false, the boolean expression is false. As a result, the compiler will skip the first output statement and execute the statement in the else. The expression x / y is integer division for 7 / 3, which is 2. | . | . Q23 - manipulate method and animals List . answer picked - Answer C List is an interface, which an ArrayList implements. Please note that List is no longer tested as part of the AP CSA exam and ArrayList will be used instead. This would be the correct answer if the remove occurred before the size was calculated in the statement animals.add(animals.size()-k, animals.remove(k)); and only one iteration of the loop occurred. | . | correct answer - Answer B List is an interface, which an ArrayList implements. In the fifth iteration, when k is 1, the element of animals at 1 (“baboon”) starts with a “b”. It is removed from the list and inserted at index 5. The list would then be {“bear”, “zebra”, “bass”, “cat”, “koala”, “baboon”}. Finally, k decrements to 0 which is not greater than 0 so the loop terminates. | . | . Q28 mystery method with int parameter description . answer picked - Answer B If the value of n is 2 or less in the original call to the method mystery, the loop will be skipped and x will be 1 at //Point C. | . | correct answer - Answer E The while loop only iterates while n is greater than 2 and //Point B is in the body of the while loop prior to any change to the value of n. At this point, n will always be greater than 2. | . | . Q30 scramble method with String and int parameters . answer picked - Answer D This would be the value if the second call to substring was word.substring(0, howFar + 1). | . | correct answer - Answer C The two parameter substring method returns the substring beginning at the first parameter and ending at the second parameter – 1. When word is assigned “compiler” and howFar is assigned 3, the value of word.substring(howFar + 1, word.length()) is “iler”. This is the substring of “compiler” beginning at 3 + 1 or 4 and ending at 8 – 1 or 7. The value of word.substring(0, howFar) is “com”. This is the substring of “compiler” beginning at 0 and ending at 2. The method returns “ilercom”. | . | . Q33 Print sum after while loop . answer picked - Answer B This would be correct if k was incremented by 1 during each iteration of the loop and the loop condition was changed to (sum &lt; 12 || k &lt;= 4). Since k is never incremented, the or (||) will always be true since k will always be less than 4 and an infinite loop will occur. | . | correct answer - Answer E Since k is never changed in the body of the while loop, it will always be 1 and less than 4. In a boolean expression with or (||) if one of the two expressions is true, the expression is true. This will cause an infinite loop. | . | . Q39 recur method with int parameter . answer picked - Answer B This is the value that is passed in the first recursive call to recur. | . | correct answer - Answer D The call recur(27) returns the value of recur(recur(9)) since 27 is greater than 10. The call recur(9) returns 18, since 9 is less than or equal to 10. Therefore, recur(recur(9)) is recur(18). The call recur(18) returns recur(recur(6)) since 18 is greater than 10. The call recur(6) returns 12, since 6 is less than or equal to 10. Therefore, recur(recur(6)) is recur(12). The call recur(12) returns recur(recur(4)) since 12 is greater than 10. The call recur(4) returns 8, since 4 is less than or equal to 10. Therefore, recur(recur(4)) is recur(8). The call recur(8) returns 16, since 8 is less than or equal to 10. Therefore, recur(27)returns the value of 16. | . | .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/jupyter/2022/11/08/testcorrections.html",
            "relUrl": "/jupyter/2022/11/08/testcorrections.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "What I did at Night at the Museum",
            "content": "1) Present our Project . . 2) Listened to Other Projects . . 3) Walked Around and Saw Art . .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2022/11/06/natm.html",
            "relUrl": "/fastpages/jupyter/2022/11/06/natm.html",
            "date": " • Nov 6, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Unit 6 - Arrays",
            "content": "Arrays Overview . Arrays are 10-15% of the AP CSA Exam | The four main topics that College Board wants you to know Array creation and access | Traversing arrays | Enhanced for loops for arrays | Developing algorithms using arrays | . | The overall purpose of arrays is to store multiple values in a single variable, instead of declaring separate variables for each value. | . 6.1 Array Creation and Access . Arrays are used to store one data type | Unlike Arraylists, arrays have a fixed size and cannot be changed | Arrays can be denoted using braces {} Below is an example of a simple array storing our scrum team names [Meena, Shraddha, Madhumita, Pranavi] . | To use an array you have to use the command import java.util.Arrays; . | . Making Arrays . There are two ways to make arrays . using constructors | using pre-intiliazed arrays | . dataType[] arrayName = new dataType[numberOfItems]; //Constructor int[] arraySample = {1,3,5,7,9}; //pre-initialized arrays . Accessing Elements in Arrays . You can access the elements in an array using different commands | . arrayName.Length //determine the size arrayName.length - 1 //to access the last item in the array . 6.2 Traversing Arrays . Traversing is accessing every value in the array | Can be done using a loop like a for loop or while loop | Below is an example - using a for loop, we can iterate through each fruit in the array of Strings and print it out | . // Here is the array we will be working with String[] myFruits = new String[] {&quot;Apple&quot;, &quot;Strawberry&quot;, &quot;Watermelon&quot;, &quot;Blueberry&quot;}; for (int i = 0; i &lt; myFruits.length; i++) { System.out.println(&quot;Fruit number &quot; + i + &quot; is &quot; + myFruits[i]); } . Can also loop through an array in reverse | . for (int i = myFruits.length - 1; i &gt;= 0 ; i--) { System.out.println(&quot;Fruit number &quot; + i + &quot; is &quot; + myFruits[i]); } . If we have a list of numbers, we could change each value in the array by a certain amount | . // Here is the array we will be working with int[] myNumbers = new int[] {1, 3, 5, 7, 9}; for (int i = 0; i &lt; myNumbers.length; i++) { // add 10 to each element in the array myNumbers[i] += 10; System.out.println(&quot;New element &quot; + i + &quot; is &quot; + myNumbers[i]); } . We can also traverse an array using a while loop | . // Here is the array we will be working with String[] myFruits = new String[] {&quot;Apple&quot;, &quot;Strawberry&quot;, &quot;Watermelon&quot;, &quot;Blueberry&quot;}; int i = 0; while (i &lt; myFruits.length) { System.out.println(&quot;Fruit number &quot; + i + &quot; is &quot; + myFruits[i]); i++; } . Bound Errors . ArrayIndexOutOfBoundsException thrown, can happen when using loops to access array elements | In the example below instead of the condition being while the index is less than the length of the array, the condition is less than or equal too | This mean the loop will try to run when i = 4 (since the length of the list is 4). However since array index starts from 0, the last item in the array will have an index of 3. So, index of 4 will be out of bounds, resulting in the error. | . int i = 0; while (i &lt;= myFruits.length) { System.out.println(&quot;Fruit number &quot; + i + &quot; is &quot; + myFruits[i]); i++; } . 6.3 Enhanced for loop for Arrays . This topic was pretty short, but essentially what you need to know is about the enhanced for loop. The enhanced for loop can be used to traverse through most data structures (i.g. arrays). However, it can only traverse in a forward direction. Usually the structure is like so . for (dataType i: arrayName) { do something with i } . Essentially, this code mentions how every element in the array (i) has to have something done to it. It&#39;s important to note that although there is access to the element i, but it isn&#39;t possible to change the value/set new values to element i. . We can use mutator methods on objects on the array to set the value of their instance variables. This is because i is a copy of the object reference, which means that i refers to the same object as the array element, so calling methods on i is the same as calling methods on the individual array elements themselves. For example . public class Student { private String name; /** Sets the name of the Student */ public void setName(String name) { this.name = name; } /** Other instance variables, methods, and constructors not shown */ } // IN ANOTHER CLASS /** Resets all students&#39; names */ public static void doubleArray(Student[] array, String defaultName) { for (Student student: array) { student.setName(defaultName); // Sets each student&#39;s name to a default name } } . 6.4 Developing Algorithms using Arrays . Here are some algorithms that arrays can be used for (from college board standards), . Minimum and Maximum of a list of elements | Compute the sum, average, or mode of multiple elements | Determine if at least one element has a property | Access consecutive pairs of elements | Determine duplicates | . What to use when problem solving with arrays .length can be used to find the length of an array . The value at a specific index can be found with array[i], where i is the index | An element at index i can be replaced using array[i] = new element | You can iterate over an array with a for loop for(type element: array) { code here . | . Computing Sums with Arrays . See the code below for a sample algorithm of how to compute the sum of elements in an array. This could be applied to finding the mean, standard deviation, or any other algorithm that requires summation. . int[] array = {5, 1, 78}; // intialize int sum = 0; // variable to keep track of sum for (int number; array) { // iterates over each loop in the array sum += number; // the number is added to the sum } System.out.println(sum); //expected sum is 84, so 84 should be printed . Find the max . // from college board private double findMax(double[] values) { double max = values[0]; // initialize max with first element of array for(int i=1; i&lt;values.length; i++) { // starting with the second element, iterate over the rest of the array if (values[i] &gt; max) { // if the current element is greater than the max max = values[i]; // set the max equal to the greatest value until that point } } return max; } . Find the amount of even numbers. . private int findEvenNumbers(int[] values) { int evenCount = 0; // initalize count of even numbers to zero for(int value: values) { // iterate over every element of array if(value % 2 == 0) { // use modulus operator to check if value is even evenCount += 1; // increment evenCount if the value is even } } return evenCount; } . Homework . HW Google Form submitted as pair with Re&#39;em. . public void addMembers(String[] names, int gradYear) { for (int i = 0; i &lt; names.length; i++) { String memberName = names[i]; memberList.add(memberName, memberName.getGradYear, true); } } .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/jupyter/2022/10/25/unit6-notes.html",
            "relUrl": "/jupyter/2022/10/25/unit6-notes.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Unit 5 - Writing Classes",
            "content": "HW - 2019 FRQ 2 - . (rest of HW quiz has already been submitted) . public class StepTracker { private int days; private int activeDays; private int totalSteps; private int minActive; public StepTracker(int m) { minActive = m; days = 0; activeDays = 0; totalSteps = 0; } public int activeDays() { return activeDays; } public double averageSteps() { if (days == 0) { return 0.0; } return double totalSteps / days; } public void addDailySteps(int steps) { days++; totalSteps += steps; if (steps &gt;= minActive) { activeDays++; } } } . public class Cow { // instance variables private String cowType; private String sound; private int numMilkings; // constructor public Cow (String cowType, String sound){ this.numMilkings = 0; this.cowType = cowType; this.sound = sound; } } . public class Cow { // instance variables private String cowType; private String sound; private int numMilkings; // default constructor public Cow(){ this.numMilkings = 0; this.cowType = null; this.sound = null; } // all-args constructor public Cow(String cowType, String sound, int numMilkings){ this.numMilkings = numMilkings; this.cowType = cowType; this.sound = sound; } public Cow (String cowType, String sound){ this.numMilkings = 0; this.cowType = cowType; this.sound = sound; } public static void main(String[] args) { Cow firstCow = new Cow(&quot;holstein&quot;, &quot;moo&quot;); Cow secondCow = new Cow(); Cow thirdCow = new Cow(&quot;holstein&quot;, &quot;moo&quot;, 100); } } Cow.main(null); . Constructors - . Default Constructor: no parameters Sets instance variables equal to default values String: null | Int/Double: 0 | . | Java provides a no-argument default constructor if there are no constructors inside the class | Instance variables set to default values | . | . Procedural Abstraction Tip - . When you see repeated code, that is a signal for you to make a new method! | Benefits - organize our code by function | reduce complexity | reduce the repetition of code | reuse code by putting it in a method and calling it whenever needed | help with debugging and maintenance | changes to that block of code only need to happen in one place | . | . 3 steps to create and call a method - . Object of the class Declare an object of your class in the main method or from outside the class. | . | Method call Whenever you want to use the method, call - | . | Method definition Write the method’s header and body code like below: | . | // Step 1 Classname objectName = new Classname(); // Step 2 objectName(); //Step 3 // method header public void methodName() { // method body for the code } . public class Cow { // instance variables private String cowType; private String sound; private int numMilkings; public Cow (String cowType, String sound){ this.numMilkings = 0; this.cowType = cowType; this.sound = sound; } public int getNumMilkings(){ return numMilkings; } public void setSound(String sound){ this.sound = sound; } public String toString(){ return &quot;Type of Cow: &quot; + cowType + &quot;; &quot; + &quot;Sound: &quot; + sound + &quot;; &quot; + &quot;Number of Milkings: &quot; + numMilkings; } public static void main(String[] args) { Cow firstCow = new Cow(&quot;holstein&quot;, &quot;moo&quot;); System.out.println(firstCow); System.out.println(&quot;Number of Milkings: &quot; + firstCow.getNumMilkings()); firstCow.setSound(&quot;oink!&quot;); System.out.println(&quot;Mutated Cow:&quot; + firstCow); } } Cow.main(null); .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/jupyter/2022/10/15/unit5-notes.html",
            "relUrl": "/jupyter/2022/10/15/unit5-notes.html",
            "date": " • Oct 15, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Unit 4 - Iteration",
            "content": "Iteration in Java . Lesson Purpose: Review types of iteration and usages . Lesson Objectives: . review while/for loops | review string | nested iteration review | Iteration may be one of the most crucial features for any programming language, since they allow computers to do what they do best: do copious amounts of menial tasks quickly and efficiently. . Of course, Java can also perform iteration using numerous different structures. Today we&#39;ll be going over some of them. . First of all, the exam weights Iteration as 17.5-22.5% of the test, with 7-9 MC and part of FRQ 1. This is one of the largest if not the largest unit, so understanding how iteration works is critical to performance on the test as well as in basically all aspects of coding. . The overall purpose of iteration is to simplify code by allowing it to repeat. Loops will usually include some sort of conditional to check against, and while that conditional is true, the code within the loop will repeat. . 4.1 While Loops (2.B, 3.C) . Repeats lines of code until a certain condition evaluates to false | . While loops consist of 2 portions: the boolean expression and the brackets which store the looping code inside. . while (condition) { ... } . The boolean expression is checked before the loop is started and every time the loop ends and is about to start anew. Usually, inside the loop something is done that slightly changes the conditions for the boolean expression until it reads false and ends. In the example below, the condition is x &gt; 0, meaning that x has to be changed for the loop to stop. Inside the loop, x is decremented by 1 every time, changing the conditions over and over again until it finally returns false and terminates the while loop. . int x = 5; // The boolean expression in this case is x &gt; 0 while (x &gt; 0) { System.out.println(x); x--; } . 5 4 3 2 1 . One of the most basic applications of while loops is its ability to iterate over numerous elements. One such example would be summing up the numbers in an array: . int[] array = {3, 7, 0, 2, 4, 5, 9, 1, 3, 6, 3}; int total = 0; int i = 0; while (i &lt; array.length) { total += array[i]; i++; } System.out.println(total); . 43 . One unique application of while loops lie in infinite while loops, loops that run over and over again permanently. This is usually accomplished by setting the boolean condition to be true at all times. The only way to stop these loops are to use a break command, which ends the loop regardless of the conditions present. . This can be used for various things, like having a running process at all times or constantly taking in input from the user, like the example below: . import java.util.Scanner; Scanner input = new Scanner(System.in); String choice; while (true) { System.out.println(&quot;Would you like to continue: &quot;); choice = input.nextLine(); if (choice.equals(&quot;No&quot;)) { break; } } . Would you like to continue: Would you like to continue: Would you like to continue: . Hacks . Say you have a company that makes a profit of $5,450,000 this year. Every year, the company has a profit increase of 5%. Determine how many years it would take to make a profit of at least $30,000,000 using a while loop. . public class WhileLoops { public static void main(String[] args) { int i = 5450000; int count = 0; while (i &lt;= 30000000) { i *= 1.05; count++; } System.out.println(count); } } WhileLoops.main(null); . 35 . 4.2 For Loops . One of the most tested concepts in the APCSA exam | Skills 3.C, 4.C, and 5.C | . Three Parts of a For Loop . Initialization of a variable | Test condition | . for (initialize; test condition; change) { loop body } . Example . for (int x = 1; x &lt;= 5; x++) { System.out.println(x); } . 1 2 3 4 5 . Control Flow Diagram . The code in the initialization area is executed only one time before the loop begins | the test condition is checked each time through the loop and the loop continues as long as the condition is true | the loop control variable change is done at the end of each execution of the body of the loop | When the loop condition is false, execution will continue at the next statement after the body of the loop. | . Hacks . - Change the code above to iterate instead from 1-5 to 10-15. (Print numbers 10-15) . - Convert 10 numbers of your choice from two temperature units (F to C, C to F, C to K) . public class ForLoops { public static void main(String[] args) { for (int x = 10; x &lt;= 15; x++) { System.out.println(x); } } } ForLoops.main(null); . 10 11 12 13 14 15 . 4.3 Loops and Strings . Strings can also be manipulated through the use of iteration. Strings can actually be thought of as an array of chars, so each char can also be manipulated as well! . String name = &quot;CodeCodeCode&quot;; for (int i = 0; i &lt; name.length(); i+=2) { System.out.println(name.substring(i,i+2)); } . Co de Co de Co de . 4.4 Nested Iteration . Nested iteration is where there is a loop within a loop. It&#39;s kind of similar to the nested conditional that we learned yesterday in syntax. . A typical usage of nested looping is for two dimensions, like getting the pixel value of each pixel in an image across the columns and rows of pixels. Or, it can be used to print across these rows and columns to display some text . A very common nested iteration is the use of nested for loops, as they are concise enough to be used within each other without getting confused. Here is an example of code that uses nested for loops: . for (int row = 0; row &lt; 5; row ++) { for (int column = 0; column &lt; 4; column++) { System.out.print(&#39;*&#39;); } System.out.println(); } . **** **** **** **** **** . As seen, the code above has an output of 20 stars, with 5 rows and 4 columns. The amount of times the nested iterations loop in total will be the amount the outer one iterates multiplied by the inner one. The inner loop must finish all of its iterations before the outer loop can continue. . Question: . What happens if you swap the inner with the outer loop? What change will the output make? | . There can also be nested while loops, although they are not as practical, having to write out those variables outside of the condition. . import java.util.ArrayList; /* * Creator: Nighthawk Coding Society * Mini Lab Name: Hello Series,featuring Monkey Jumpers */ /** * Class for Monkey: a 2D array of Monkey * As well as method to print the Poem */ class Monkey { //The area between class definition and the 1st method is where we keep data for object in Java private static ArrayList&lt;String[]&gt; monkeyList = new ArrayList&lt;String[]&gt;(); //2D Array: AP CSA Unit 8: 2D array of strings private String[] monkeyASCII; /** * Constructor initializes a 2D array of Monkey */ public Monkey(String[] monkeyASCII) { this.monkeyASCII = monkeyASCII; monkeyList.add(monkeyASCII); } /** * Loop and print monkey in array * ... repeat until you reach zero ... */ public static void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Monkey Jumpers Poem in Java with Objects!!!&quot;); // monkey (non-primitive) defined in constructor knows its length int monkeyCount = monkeyList.size(); for (int i = 1; i &lt;= monkeyCount; i++) //loops through 2D array length forwards { //this print statement shows current count of Monkey // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; little monkey jumping on the bed...&quot;); //how many separate parts are there in a monkey monkey? for (int row = 0; row &lt; i; row++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each monkey part by part, will eventually print entire column*/ for (int col = 0; col &lt; monkeyList.get(row).length; col++) { // prints specific part of the monkey from the column System.out.print(monkeyList.get(row)[col] + &quot; &quot;); //this is new line between separate parts System.out.println(); } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing monkeyCount variable by 1 monkeyCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;Too many monkeys jumping on the bed&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { Monkey monkey0 = new Monkey(new String[]{ &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, //[0][0] eyes &quot; _⏄_/ &quot;, //[0][1] chin &quot; --0-- &quot;, //[0][2] body &quot; ⎛ ⎞ &quot; //[0][3] legs }); Monkey monkey1 = new Monkey(new String[]{ &quot; ʕ༼ ◕_◕ ༽ʔ&quot;, //[1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; }); Monkey monkey2 = new Monkey(new String[]{ &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, //[2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; }); Monkey monkey3 = new Monkey(new String[]{ &quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, //[3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; }); Monkey monkey4 = new Monkey(new String[]{ &quot; (◕‿◕✿) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] }); Monkey.printPoem(); //a new monkey list and output in one step } } Monkey.main(null); . Monkey Jumpers Poem in Java with Objects!!! 1 little monkey jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ 2 little monkey jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ 3 little monkey jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ ʕ(▀ ⍡ ▀)ʔ _⎐_/ &lt;-2-&gt; 〈 〉 Too many monkeys jumping on the bed 0000000000000000000000000000000000 THE END . Some modification to the code has been made, such as making monkeys an object, but the overall idea remains the same. It first iterates into a row on the 2d array, and then iterates through all columns of that row in the 2d array by using the nested iteration. . Questions: . Do you remember how to make it not backwards? | What would swapping the inner and outer loops do? (assuming that array indices are fixed) | What if we only wanted to print every other monkey? | What if we wanted to print every other body part of the monkey? | public class NestedIteration { public static void main(String[] args) { } } NestedIteration.main(null); . For Each Loops . What is a for each loop? . As the name suggests, for-each loops are similar to for loops. In Java, the for-each loop is used to iterate through elements of arrays and collections (like ArrayList). It is also known as the enhanced for loop. . Here is the syntax for a for-each loop: . for(dataType item : array) { ... } . includes: . array: an array or collection | item: each value in an array or collection | dataType: specify the type of data in the array (int) | . Example . public class ForEachLoops { public static void main(String[] args) { // create an array int[] data = {2, 10, 5, 12}; // for each loop for (int number: data) { System.out.println(number); } } } . Output: . 2 10 5 12 . In this example we used for each loops to iterate through the array, &quot;data&quot; and print out each number. The code is saying that for each value in the array, print out the number. . So why not just stick to the for loop? What&#39;s the purpose? . //For Loop char[] word = {&#39;m&#39;, &#39;o&#39;, &#39;n&#39;, &#39;k&#39;, &#39;e&#39;, &#39;y&#39;}; for (int i = 0; i &lt; word.length; ++ i) { System.out.println(word[i]); } . m o n k e y . //For Each Loop char[] word = {&#39;m&#39;, &#39;o&#39;, &#39;n&#39;, &#39;k&#39;, &#39;e&#39;, &#39;y&#39;}; for (char letter: word) { System.out.println(letter); } . m o n k e y . Both lines of codes yield the same results but the for-each loop is obviously much simpiler and easier to understand. . For each iteration, the for-each loop takes each element of the collection and stores it in a loop variable. Thus, it executes the code written in the body of the loop for each element of the array or collection. . Most importantly, the traversal happens until the last element of the array or collection. No indexing is involved . Pros: . makes code easier to read and understand | eliminates possible coding mistakes | . Cons: . The drawback of the enhanced for loop (for-each loop) is that it cannot traverse the elements in reverse order. In the for each loop you do not have the option to skip any element because it does not work on an index basis. Moreover, you cannot traverse the odd or even elements only. | limited variability to the collection | situational | . Hacks . Could I use a for-each loop to print out 4 of the 5 elements of an array only? . Write a for-each loop that adds up all the values of the array (sum): . class Test { static int numbers[] = {2, 5, 7, 12}; static int sum() { int sum = 0; int i; for (i = 0; i &lt; numbers.length; i++) sum += numbers[i]; return sum; } public static void main(String[] args) { System.out.println(&quot;Sum = &quot; + sum()); } } Test.main(null); . Sum = 26 . and print the results . Final Hacks . Try to write a caesar cipher program that shifts each letter in a message 3 letters forward. Use any of the methods you learned today. Use it to decode the 3 messages we&#39;ve given you! . public class CaesarCipher { public static void main(String[] args) { String[] letters = {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot;j&quot;, &quot;k&quot;, &quot;l&quot;, &quot;m&quot;, &quot;n&quot;, &quot;o&quot;, &quot;p&quot;, &quot;q&quot;, &quot;r&quot;, &quot;s&quot;, &quot;t&quot;, &quot;u&quot;, &quot;v&quot;, &quot;w&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;}; String message1 = &quot;kfzb gly&quot;; String message2 = &quot;zlab zlab zlab&quot;; String message3 = &quot;prmbozxifcoxdfifpqfzbumfxifalzflrp&quot;; String cipher(String msg, int shift) { String s = &quot;&quot;; int len = msg.length(); for(int x = 0; x &lt; len; x++) { letters c = (letters)(msg.charAt(x) + shift); if (c &gt; &quot;z&quot;) s += (letters)(msg.charAt(x) - (26-shift)); else s += (letters)(msg.charAt(x) + shift); } return s; } System.out.println(cipher(message1, 3)); System.out.println(cipher(message2, 3)); System.out.println(cipher(message3, 3)); } } CaesarCipher.main(null); . | String cipher(String msg, int shift) { &#39;;&#39; expected | String cipher(String msg, int shift) { &lt;identifier&gt; expected | String cipher(String msg, int shift) { &#39;;&#39; expected .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/jupyter/2022/10/15/unit4-notes.html",
            "relUrl": "/jupyter/2022/10/15/unit4-notes.html",
            "date": " • Oct 15, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Unit 3 - Boolean Expressions and if Statements",
            "content": "3.1 - . Boolean Expressions: represent logic and tell whether something is true or false | Operators used to create Booleans | &quot;==&quot; (same value/equals to) | &quot;!=&quot; (checks for inequality) | &quot;&lt;&quot; (less than) | &quot;&lt;=&quot; (less than or equal to) | &quot;&gt;&quot; (greater than) | &quot;&gt;=&quot; (greater than or equal to) | . 3.2 - . Conditional Statements - perform computations depending on whether a Boolean condition evaluates to true or false | If Statements - if statement occurs if a block of code is run only if the condition is true | . 3.3 - . If-Else Statements - statement to run a block of code among more than one alternative | . 3.4 - . Else-if Statements - statement to run a condition if the original condition was false | . 3.5 - . Nested if statements - If-statements within if-statements Note - If the outer if-statement evaluates to false, the inner if-statements are not evaluated. | . | Logical operators - Used to combine Boolean expressions &amp;&amp; - and | || - or | ! - not | . | Short-circuited evaluation: The result of a compound Boolean expression can be determined just by looking at a few expressions. | . 3.6 - . De Morgan&#39;s laws: Help simplify Boolean expressions !(a&amp;&amp;b) = (!a || !b) | !(a || b) = (!a &amp;&amp; !b) | . | . 3.7 - . Use &#39;==&#39; to see if two object references are aliases for the same object or to see if an object is null | Use &#39;.equals()&#39; to see if the attributes of two objects are the same | . Coding Challenge 1 - . my answer: 1 4 5 6 7 8 9 | . Coding Challenge 3 - . my answer: true false true true | . Possible CollegeBoard Test Question Topics: . equals vs == operator (The == operator will only check if pointing at the same objects) | if only using 1 line of code, {} is not needed between if-statements | conditionals must have if or else-if to latch onto | conditionals and control structures can be nested | . Scavenger Hunt (done on paper) . my answer: Mr M&#39;s Desk | . HW: 2019 FRQ 1: . public class FrogSimulation { /** Distance, in inches, from the starting position to the goal. */ private int goalDistance; /** Maximum number of hops allowed to reach the goal. */ private int maxHops; /** Constructs a FrogSimulation where dist is the distance, in inches, from the starting * position to the goal, and numHops is the maximum number of hops allowed to reach the goal. * Precondition: dist &gt; 0; numHops &gt; 0 */ public FrogSimulation(int dist, int numHops) { goalDistance = dist; maxHops = numHops; } /** Returns an integer representing the distance, in inches, to be moved when the frog hops. */ private int hopDistance() { /* implementation not shown */ } /** Simulates a frog attempting to reach the goal as described in part (a). * Returns true if the frog successfully reached or passed the goal during the simulation; * false otherwise. */ public boolean simulate() { /* to be implemented in part (a) */ } /** Runs num simulations and returns the proportion of simulations in which the frog * successfully reached or passed the goal. * Precondition: num &gt; 0 */ public double runSimulations(int num) { /* to be implemented in part (b) */ } } . a) . /** Simulates a frog attempting to reach the goal as described in part (a). * Returns true if the frog successfully reached or passed the goal during the simulation; * false otherwise. */ public boolean simulate() { int position = 0; // frog starts at 0 for (int count = 0; count &lt; maxHops; count++) { // maxHops is the max the frog can hop, and after each hop the count goes up by one, the loop repeating until count = maxHops position += hopDistance(); if (position &gt;= goalDistance) { // if the frog goes farther than needed, return true return true; } else if (position &lt; 0) { // if the frog isn&#39;t there, return false and keep going return false; } } return false; // if the hops are taken up without the goal being met, it returns false } . b) . /** Runs num simulations and returns the proportion of simulations in which the frog * successfully reached or passed the goal. * Precondition: num &gt; 0 */ public double runSimulations(int num) { // double makes it so the value can be a decimal int countSuccess = 0; // starts at 0 for (int count = 0; count &lt; num; count++) { // checks if the simulation was successful for each time it was run if(simulate()) { // if it turns out true, raise the count of the number of successful runs countSuccess++; } } return (double)countSuccess / num; // divides the number of successes to the overall amount of simulations to find the final result } . Quizziz: Completed .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/jupyter/2022/10/14/unit3-notes.html",
            "relUrl": "/jupyter/2022/10/14/unit3-notes.html",
            "date": " • Oct 14, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Unit 2 - Using Objects",
            "content": "Objects - Instances of Classes . a class is a blueprint for creating objects with the same behavior and defined attributes | an object is a specific entity, made from a class, that you can manipulate in your programs | objects are instances of classes with variables used to name them | . Creating and Storing Objects (Instantiation) . constructors are used to initialize the attributes for an object | an example of formal parameters: | . public Person(String nm, int ag, boolean ad) { name = nm; age = ag; isAdult = ad; } . overloading constructors there can be more than one constructor for an object, which is called overloading the constructor | a no-argument constructor has no parameters and sets the instance variables for the object to default values | . | employee example - | . public class Employee { private String name; private String empId; private int pay; public Employee(String nm, String id, int pay) { name = nm; empId = id; pay = 20; } Employee person1 = new Employee(&quot;Simon&quot;, &quot;7628&quot;, 60000); Employee person2 = new Employee(&quot;Cassidy&quot;, &quot;3224&quot;, 60000); Employee person3 = new Employee(&quot;Bill&quot;, &quot;1810&quot;, 60000); } . Calling a Void Method . methods define the behaviors for all objects of a class and consist of a set of instructions for executing the behavior | procedural abstraction shortens and groups code so it&#39;s more simplified and methods can be used by other people without them having to understand it | letter example - | . | . public class Letter { public void writeLetter() { greeting(); specialMessage(); closing(); } public void greeting() { System.out.println(&quot;Hi, friend!&quot;); } public void specialMessage() { System.out.println(&quot;CSA is awesome!&quot;); } public void closing() { System.out.println(&quot;See you soon!&quot;); } public static void main(String[] args) { Letter friendLetter = new Letter(); friendLetter.writeLetter(); } } Letter.main(null); . Hi, friend! CSA is awesome! See you soon! . Calling a Void Method with Parameters . public class Calculator { public void calcAverage(int num1, double num2) { double average = (num1 + num2) / 2; System.out.println(&quot;The average is = &quot; + average); } public void calcAverage(int num1, int num2, double num3) { double average = (num1 + num2 + num3) / 3; System.out.println(&quot;The average is = &quot; + average); } public static void main(String[] args) { Calculator newAverage = new Calculator(); newAverage.calcAverage(21, 51.4); newAverage.calcAverage(4, 24, 72.2); } } Calculator.main(null); . The average is = 36.2 The average is = 33.4 . public class WordMatch { /** The secret string. */ private String secret; /** Constructs a WordMatch object with the given secret string of lowercase letters. */ public WordMatch(String word) { /* implementation not shown */ } /** Returns a score for guess, as described in part (a). * Precondition: 0 &lt; guess.length() &lt;= secret.length() */ public int scoreGuess(String guess) { /* to be implemented in part (a) */ } /** Returns the better of two guesses, as determined by scoreGuess and the rules for a * tie-breaker that are described in part (b). * Precondition: guess1 and guess2 contain all lowercase letters. * guess1 is not the same as guess2. */ public String findBetterGuess(String guess1, String guess2) { /* to be implemented in part (b) */ } } . a) . /** Returns a score for guess, as described in part (a). * Precondition: 0 &lt; guess.length() &lt;= secret.length() */ public int scoreGuess(String guess) { int count = 0; for(int i = 0; i &lt; secret.length(); i++) { int j = i + guess.length(); if(j &lt;= secret.length() &amp;&amp; secret.substring(i, j).equals(guess)) count++; } return count * (guess.length() * guess.length()); } . b) . public String findBetterGuess(String guess1, String guess2) { int score1 = scoreGuess(guess1); int score2 = scoreGuess(guess2); if(score1 &gt; score2) { return guess1; } else if(score2 &gt; score1) { return guess2; } else { if(guess1.compareTo(guess2) &gt; 0) z{ return guess1; } else { return guess2; } } } . Period 2 - Using Objects in Java Quiz . Score: 6/7 | .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/jupyter/2022/10/14/unit2-notes.html",
            "relUrl": "/jupyter/2022/10/14/unit2-notes.html",
            "date": " • Oct 14, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Unit 1 - Primitive Types",
            "content": "Primitives vs. Non-Primitives - . primitives - predefined | lowercase | &quot;Primitives&quot; | can&#39;t call methods | has a value | has different sizes according to type | . | non-primitives - defined by you | uppercase | &quot;Reference Types&quot; | can call methods | can be null | all the same size | . | . Primitives Review - . boolean true/false only | 1 bit | . | int integer values | 2-3 bits | . | double decimal values | 64 bits | . | additional - char | float | long | . | more info - casting widening is when you&#39;re going from a smaller data type to a bigger one | narrowing is going from a bigger data type to a smaller one | . | . Operators Review - . (+) addition | (-) subtraction | (/) division | (%) finds the remainder | (*) multiplication | (++) adds 1 | (--) subtracts 1 | (++x) adds x | (--x) subtracts x | compound operators - do a math operation and then assign it back to the variable (+=) adds | (-=) subtracts | (*=) multiplies | (/=) divides | (%=) finds the remainder | . | . public class CompOpsDemo { public static void main(String[] args) { int x = 6; x += 7; x -= 3; x *= 10; x /= 5; x %= 3; System.out.println(&quot;x = &quot; + x); } } CompOpsDemo.main(null); . x = 2 . public class CompOpsDemo { public static void main(String[] args) { int x = 2; int y = 7; x++; y--; System.out.println(&quot;x = &quot; + x); System.out.println(&quot;y = &quot; + y); } } CompOpsDemo.main(null); . x = 3 y = 2 . Question and Answer - . the value of z = 2 | a and d | val = 6 | i = 96 | j = 458 | | public class CompOpsDemo { public static void main(String[] args) { int i = 5; int p = 27; for(int l = 23; l &lt; p; l++) { i *= (l-22); } System.out.println(&quot;i = &quot; + i); } } CompOpsDemo.main(null); . i = 120 . HW - 2006 FRQ Q1 . // part a: /* * Write the Appointment method conflictsWith. * If the time interval of the current appointment * overlaps with the time interval of the appointment other, * method conflictsWith should return true, otherwise, * it should return false. * Complete method conflictsWith below. * returns true if the time interval of this Appointment * overlaps with the time interval of other; * otherwise, returns false */ public boolean conflictsWith(Appointment other) { return getTime().overlapsWith(other.getTime()); } // part b: /* Write the DailySchedule method clearConflicts. Method clearConflicts removes all appointments that conflict with the given appointment. In writing method clearConflicts, you may assume that conflictsWith works as specified, regardless of what you wrote in part (a). Complete method clearConflicts below. removes all appointments that overlap the given Appointment postcondition: all appointments that have a time conflict with appt have been removed from this DailySchedule */ public void clearConflicts(Appointment appt) { for (int i = apptList.size()-1; i &gt;= 0; i--) { if (appt.conflictsWith((Appointment)apptList.get(i))) { apptList.remove(i); } } } // part c: /* In writing method addAppt, you may assume that conflictsWith and clearConflicts work as specified, regardless of what you wrote in parts (a) and (b). Complete method addAppt below. if emergency is true, clears any overlapping appointments and adds appt to this DailySchedule; otherwise, if there are no conflicting appointments, adds appt to this DailySchedule; returns true if the appointment was added; otherwise, returns false */ public boolean addAppt(Appointment appt, boolean emergency) { if (emergency) { clearConflicts(appt); } else { for (int i = 0; i &lt; apptList.size(); i++) { if (appt.conflictsWith((Appointment)apptList.get(i))) { return false; } } } return apptList.add(appt); } . /* Write the TaxableItem method purchasePrice. The purchase price of a TaxableItem is its list price plus the tax on the item. The tax is computed by multiplying the list price by the tax rate. For example, if the tax rate is 0.10 (representing 10%), the purchase price of an item with a list price of $6.50 would be $7.15. Complete method purchasePrice below. returns the price of the item including the tax */ public double purchasePrice() { return (1 + taxRate) * getListPrice(); } . /* Complete method compareCustomer below. returns 0 when this customer is equal to other; a positive integer when this customer is greater than other; a negative integer when this customer is less than other */ public int compareCustomer(Customer other) { int nameCompare = getName().compareTo(other.getName()); if (nameCompare != 0) { return nameCompare; } else { return getID() - other.getID(); } } . Grade Calculator . import java.util.Scanner; // Import the Scanner class int separate = 0; double g = 96; // Current Class Grade double percentFinal = 30; double finalScore = 0; int t = 80; // test percent of the grade int p = 300; // point in the test category int f = 100; // points that the final is worth double a = 92; // percent of points scored within the test category double w = 90; // wanted grade Scanner finalQ = new Scanner(System.in); // Create a Scanner object System.out.println(&quot;Is the final in its own category? n 1 - True n 2 - False&quot;); separate = finalQ.nextInt(); if(separate == 1){ System.out.println(&quot;What is your current grade?&quot;); g = finalQ.nextDouble(); System.out.println(&quot;How much percent of your grade is the final?&quot;); percentFinal = finalQ.nextDouble(); System.out.println(&quot;What is your desired grade?&quot;); w = finalQ.nextDouble(); finalScore = (w -g * (100.0- percentFinal)/100) / (percentFinal/100); System.out.print(&quot;You need to get at least a &quot; + String.format(&quot;%.2f&quot;, (finalScore/f)*100) + &quot;% on you final to get a &quot; + w); } else if(separate == 2){ System.out.print(&quot;What is your current grade? &quot;); g = finalQ.nextDouble(); System.out.println(g); System.out.print(&quot;How much is your test category worth? &quot;); t = finalQ.nextInt(); System.out.println(t); System.out.print(&quot;How many point are in the test category? &quot;); p = finalQ.nextInt(); System.out.println(p); System.out.print(&quot;How many point is the final? &quot;); f = finalQ.nextInt(); System.out.println(f); System.out.print(&quot;What is your grade in the test category? &quot;); a = finalQ.nextDouble(); System.out.println(a); System.out.print(&quot;What is your desired grade? &quot;); w = finalQ.nextDouble(); System.out.println(w); finalScore = ((0.01*a*f*t)-(f*g)+(f*w)-(g*p)+(p*w))/t; System.out.print(&quot;You need to get at least a &quot; + String.format(&quot;%.2f&quot;, (finalScore/f)*100) + &quot;% on you final to get a &quot; + w); } else{ System.out.print(&quot;Unexpected choice, try again.&quot;); } . Is the final in its own category? 1 - True 2 - False What is your current grade? How much percent of your grade is the final? What is your desired grade? You need to get at least a 87.20% on you final to get a 88.0 .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/jupyter/2022/10/14/unit1-notes.html",
            "relUrl": "/jupyter/2022/10/14/unit1-notes.html",
            "date": " • Oct 14, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Week 7 Work",
            "content": "| Overview | Week 0 | Week 1 | Week 2 | Week 3 | Week 4 | Week 5 | Week 6 | Week 7 | . Review Ticket . Array List Notebook . Java Recipe API . Peer review by Re’em: 2.7+/3 . Completed all the the requirements + made a Java Recipe API for the team and a Codehoots question array. .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/organization/week7",
            "relUrl": "/organization/week7",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Array List Notebook",
            "content": "// Importing all classes from java.util package import java.util.*; // Main class class CHQs { // Main driver method public static void main(String[] args) { // Creating an ArrayList of String type // Type safe ArrayList ArrayList&lt;String&gt; Qs = new ArrayList&lt;String&gt;(); // Adding elements to above object created // Custom input elements Qs.add(&quot;What is a correct syntax to output &#39;Hello World&#39; in Java?&quot;); Qs.add(&quot;Java is short for &#39;JavaScript&#39;. True or False?&quot;); Qs.add(&quot;How do you insert COMMENTS in Java code?&quot;); Qs.add(&quot;Which data type is used to create a variable that should store text?&quot;); Qs.add(&quot;How do you create a variable with the numeric value 5?&quot;); Qs.add(&quot;How do you create a variable with the floating number 2.8?&quot;); Qs.add(&quot;Which method can be used to find the length of a string?&quot;); Qs.add(&quot;Which method can be used to find the length of a string?&quot;); Qs.add(&quot;Which operator is used to add together two values?&quot;); Qs.add(&quot;The value of a string variable can be surrounded by single quotes. True or False?&quot;); Qs.add(&quot;Which operator can be used to compare two values?&quot;); Qs.add(&quot;To declare an array in Java, define the variable type with:&quot;); Qs.add(&quot;Do array indexes start with 1 or 0?&quot;); Qs.add(&quot;How do you create a method in Java?&quot;); Qs.add(&quot;Which keyword is used to create a class in Java?&quot;); System.out.println(&quot; tOur current Codehoots Question List:&quot;); // Print and display the elements of ArrayList for (int i = 0; i &lt; Qs.size();i++) { System.out.println(Qs.get(i)); } System.out.println(); // Removing an element from the array System.out.println(&quot; tThere&#39;s a duplicate question, so let&#39;s get rid of it:&quot;); Qs.remove(7); for (int i = 0; i &lt; Qs.size();i++) { System.out.println(Qs.get(i)); } System.out.println(); // Adding an element to the array System.out.println(&quot; tLet&#39;s add another question:&quot;); Qs.add(&quot;What is the correct way to create an object called myObj of MyClass?&quot;); // Print and display the elements of ArrayList one by one for (int i = 0; i &lt; Qs.size();i++) { System.out.println(Qs.get(i)); } } } CHQs.main(null); . Our current Codehoots Question List: What is a correct syntax to output &#39;Hello World&#39; in Java? Java is short for &#39;JavaScript&#39;. True or False? How do you insert COMMENTS in Java code? Which data type is used to create a variable that should store text? How do you create a variable with the numeric value 5? How do you create a variable with the floating number 2.8? Which method can be used to find the length of a string? Which method can be used to find the length of a string? Which operator is used to add together two values? The value of a string variable can be surrounded by single quotes. True or False? Which operator can be used to compare two values? To declare an array in Java, define the variable type with: Do array indexes start with 1 or 0? How do you create a method in Java? Which keyword is used to create a class in Java? There&#39;s a duplicate question, so let&#39;s get rid of it: What is a correct syntax to output &#39;Hello World&#39; in Java? Java is short for &#39;JavaScript&#39;. True or False? How do you insert COMMENTS in Java code? Which data type is used to create a variable that should store text? How do you create a variable with the numeric value 5? How do you create a variable with the floating number 2.8? Which method can be used to find the length of a string? Which operator is used to add together two values? The value of a string variable can be surrounded by single quotes. True or False? Which operator can be used to compare two values? To declare an array in Java, define the variable type with: Do array indexes start with 1 or 0? How do you create a method in Java? Which keyword is used to create a class in Java? Let&#39;s add another question: What is a correct syntax to output &#39;Hello World&#39; in Java? Java is short for &#39;JavaScript&#39;. True or False? How do you insert COMMENTS in Java code? Which data type is used to create a variable that should store text? How do you create a variable with the numeric value 5? How do you create a variable with the floating number 2.8? Which method can be used to find the length of a string? Which operator is used to add together two values? The value of a string variable can be surrounded by single quotes. True or False? Which operator can be used to compare two values? To declare an array in Java, define the variable type with: Do array indexes start with 1 or 0? How do you create a method in Java? Which keyword is used to create a class in Java? What is the correct way to create an object called myObj of MyClass? .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2022/10/09/array-lists.html",
            "relUrl": "/fastpages/jupyter/2022/10/09/array-lists.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Java API Notebook",
            "content": "import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://matchilling-chuck-norris-jokes-v1.p.rapidapi.com/jokes/random&quot;)) .header(&quot;accept&quot;, &quot;application/json&quot;) .header(&quot;X-RapidAPI-Key&quot;, &quot;60a050bd05msh74aa096ce4eab1cp1830c5jsn1612bc7b6d1f&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;matchilling-chuck-norris-jokes-v1.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); . {&#34;categories&#34;:[],&#34;created_at&#34;:&#34;2020-01-05 13:42:24.142371&#34;,&#34;icon_url&#34;:&#34;https://assets.chucknorris.host/img/avatar/chuck-norris.png&#34;,&#34;id&#34;:&#34;db3FuSrpTVeX3pE8Tt1pxg&#34;,&#34;updated_at&#34;:&#34;2020-01-05 13:42:24.142371&#34;,&#34;url&#34;:&#34;https://api.chucknorris.io/jokes/db3FuSrpTVeX3pE8Tt1pxg&#34;,&#34;value&#34;:&#34;College went to Chuck Norris.&#34;} . Web Service . package com.nighthawk.spring_portfolio.mvc.norris; import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; import java.util.Date; import java.util.HashMap; import org.json.simple.JSONObject; import org.json.simple.parser.JSONParser; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; @RestController // annotation to create a RESTful web services @RequestMapping(&quot;/api/chuck-norris&quot;) //prefix of API public class chuckNorris { private JSONObject body; //last run result private HttpStatus status; //last run status String last_run = null; //last run day of month // GET Covid 19 Stats @GetMapping(&quot;/daily&quot;) //added to end of prefix as endpoint public ResponseEntity&lt;JSONObject&gt; getNorris() { //calls API once a day, sets body and status properties String today = new Date().toString().substring(0,10); if (last_run == null || !today.equals(last_run)) { try { //APIs can fail (ie Internet or Service down) //RapidAPI header HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://matchilling-chuck-norris-jokes-v1.p.rapidapi.com/jokes/random&quot;)) .header(&quot;accept&quot;, &quot;application/json&quot;) .header(&quot;X-RapidAPI-Key&quot;, &quot;60a050bd05msh74aa096ce4eab1cp1830c5jsn1612bc7b6d1f&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;matchilling-chuck-norris-jokes-v1.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); //JSONParser extracts text body and parses to JSONObject this.body = (JSONObject) new JSONParser().parse(response.body()); this.status = HttpStatus.OK; //200 success this.last_run = today; } catch (Exception e) { //capture failure info HashMap&lt;String, String&gt; status = new HashMap&lt;&gt;(); status.put(&quot;status&quot;, &quot;RapidApi failure: &quot; + e); //Setup object for error this.body = (JSONObject) status; this.status = HttpStatus.INTERNAL_SERVER_ERROR; //500 error this.last_run = null; } } //return JSONObject in RESTful style return new ResponseEntity&lt;&gt;(body, status); } } . | package com.nighthawk.spring_portfolio.mvc.translate; illegal start of expression .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2022/10/02/java-api.html",
            "relUrl": "/fastpages/jupyter/2022/10/02/java-api.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Arrays and Images",
            "content": "Image ASCII Conversion . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;ghtop_images/&quot;; // location of images private final String outDir = &quot;ghtop_images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; Image grayImg = null; int width = (int) (this.width * (scale/40.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); grayImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col.getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot;&quot;; } else if (g &gt;= 230) { str = &quot;@&quot;; } else if (g &gt;= 210) { str = &quot;#&quot;; } else if (g &gt;= 200) { str = &quot;W&quot;; } else if (g &gt;= 190) { str = &quot;&amp;&quot;; } else if (g &gt;= 180) { str = &quot;0&quot;; } else if (g &gt;= 170) { str = &quot;m&quot;; } else if (g &gt;= 160) { str = &quot;K&quot;; } else if (g &gt;= 150) { str = &quot;U&quot;; } else if (g &gt;= 140) { str = &quot;o&quot;; } else if (g &gt;= 130) { str = &quot;I&quot;; } else if (g &gt;= 120) { str = &quot;{&quot;; } else if (g &gt;= 110) { str = &quot;=&quot;; } else if (g &gt;= 100) { str = &quot;&gt;&quot;; } else if (g &gt;= 90) { str = &quot;+&quot;; } else if (g &gt;= 80) { str = &quot;(&quot;; } else if (g &gt;= 70) { str = &quot; &quot;; } else if (g &gt;= 60) { str = &quot;;&quot;; } else if (g &gt;= 50) { str = &quot;~&quot;; } else if (g &gt;= 40) { str = &quot;:&quot;; } else if (g &gt;= 20) { str = &quot;.&quot;; } else { str = &quot;`&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics monaLisa = new Pics(&quot;MonaLisa&quot;, &quot;png&quot;); monaLisa.printStats(&quot;Original&quot;); monaLisa.resize(33); monaLisa.printStats(&quot;Scaled&quot;); monaLisa.convertToAscii(); Pics pumpkin = new Pics(&quot;pumpkin&quot;, &quot;png&quot;); pumpkin.printStats(&quot;Original&quot;); pumpkin.resize(33); pumpkin.printStats(&quot;Scaled&quot;); pumpkin.convertToAscii(); Pics karate = new Pics(&quot;karate&quot;, &quot;png&quot;); karate.printStats(&quot;Original&quot;); karate.resize(33); karate.printStats(&quot;Scaled&quot;); karate.convertToAscii(); Pics floaty = new Pics(&quot;floaty&quot;, &quot;png&quot;); floaty.printStats(&quot;Original&quot;); floaty.resize(33); floaty.printStats(&quot;Scaled&quot;); floaty.convertToAscii(); } } Pics.main(null); . Original: 499298 389x413 ghtop_images/MonaLisa.png Scaled: 139407 321x136 ghtop_images/tmp/MonaLisa.png Original: 39392 302x265 ghtop_images/pumpkin.png Scaled: 19531 249x87 ghtop_images/tmp/pumpkin.png Original: 493623 549x365 ghtop_images/karate.png Scaled: 175118 453x120 ghtop_images/tmp/karate.png Original: 250824 549x341 ghtop_images/floaty.png Scaled: 99679 453x113 ghtop_images/tmp/floaty.png .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2022/09/30/arrays-and-images.html",
            "relUrl": "/fastpages/jupyter/2022/09/30/arrays-and-images.html",
            "date": " • Sep 30, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Week 6 Work",
            "content": "| Overview | Week 0 | Week 1 | Week 2 | Week 3 | Week 4 | Week 5 | Week 6 | Week 7 | . Review Ticket . Images to ASCII . Java API . Peer review by Re’em: 2.7+/3 . Completed all the the requirements + made extra ascii images and a web service for the api. .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/organization/week6",
            "relUrl": "/organization/week6",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Week 5 Work",
            "content": "| Overview | Week 0 | Week 1 | Week 2 | Week 3 | Week 4 | Week 5 | Week 6 | Week 7 | . Review Ticket . Fibonacci . JavaScript Tutorial . Peer review by Re’em: 2.7+/3 . Completed all the the requirements and made a frontend display for the JS tutorial assignment. .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/organization/week5",
            "relUrl": "/organization/week5",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "JavaScript Tutorial",
            "content": "var msg = &quot;Hello, World!&quot;; function logIt(output) { console.log(output); } logIt(msg); console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Failed to start the Kernel. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. . Loosely Typed Language Demonstration . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Failed to start the Kernel. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. . Timer . $$.async(); console.log(&quot;Hello, World!&quot;); var action = { $$: $$, console: console, }; setTimeout(function() { $$.clear(0); // clear output cell action.$$.sendResult(&quot;Goodbye!&quot;); }, 2000); // 2 second timer . Failed to start the Kernel. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. . Colors Hack . const resultContainer = document.getElementById(&quot;result&quot;); // function holds data for colors function Color(name, emotion, symbolism) { this.name = name; this.emotion = emotion; this.symbolism = symbolism; } // json conversion function Color.prototype.toJSON = function() { const obj = {name: this.name, emotion: this.emotion, symbolism: this.symbolism}; const json = JSON.stringify(obj); return json; } // list of colors var list = [ new Color( &quot;Red&quot;, &quot;:)&quot;, &quot;life, health, vigor&quot;), new Color( &quot;Orange&quot;, &quot;:)&quot;, &quot;fun, strength, courage&quot;), new Color( &quot;Yellow&quot;, &quot;:)&quot;, &quot;happiness, warmth, sunshine&quot;), new Color( &quot;Green&quot;, &quot;:|&quot;, &quot;nature, wisdom&quot;), new Color( &quot;Blue&quot;, &quot;:(&quot;, &quot;calmness, despair&quot;), new Color( &quot;Indigo&quot;, &quot;:(&quot;, &quot;communication, peace&quot;), new Color( &quot;Violet&quot;, &quot;:(&quot;, &quot;higher self, comprehension&quot;) ]; function ColorClass(colors){ this.ColorClass = colors; this.json = []; this.ColorClass.forEach(colors =&gt; this.json.push(colors.toJSON())); } // creates colorlist object colorlist = new ColorClass(list); // javascript variables and methods to build html using previous data for (const row of colorlist.ColorClass) { const tr = document.createElement(&quot;tr&quot;); const name = document.createElement(&quot;td&quot;); const emotion = document.createElement(&quot;td&quot;); const symbolism = document.createElement(&quot;td&quot;); name.innerHTML = row.name; emotion.innerHTML = row.emotion; symbolism.innerHTML = row.symbolism; tr.appendChild(symbolism); tr.appendChild(name); tr.appendChild(emotion); resultContainer.appendChild(tr); } . Failed to start the Kernel. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2022/09/25/javascript-tutorial.html",
            "relUrl": "/fastpages/jupyter/2022/09/25/javascript-tutorial.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Fibonacci Notebook",
            "content": "/* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } Fibo.main(null); . Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . For Loop . public class FiboForLoop extends Fibo { protected void init() { this.name = &quot;For&quot;; long limit = this.size; // for loops are likely the most common iteration structure, all the looping facts are in one line for (long[] f = new long[]{0, 1}; limit-- &gt; 0; f = new long[]{f[1], f[0] + f[1]}) this.setData(f[0]); } static public void main(String[] args) { FiboForLoop fib = new FiboForLoop(); fib.print(); } } FiboForLoop.main(null); . Init method = For fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . While Loop . public class FiboWhileLoop extends Fibo { protected void init() { this.name = &quot;While&quot;; long limit = this.size; long[] f = new long[]{0, 1}; while (limit-- &gt; 0) { this.setData(f[0]); f = new long[]{f[1], f[0] + f[1]}; } } static public void main(String[] args) { FiboWhileLoop fib = new FiboWhileLoop(); fib.print(); } } FiboWhileLoop.main(null); . Init method = While fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . Recursive Loop . public class FiboRecursive extends Fibo{ public void recursion(long limit, long[] f) { if (limit == 0) return; this.setData(f[0]); recursion(--limit, new long[]{f[1], f[0] + f[1]}); } protected void init() { this.name = &quot;Recursion&quot;; long limit = this.size; long[] f = new long[]{0, 1}; recursion(limit,f); } static public void main(String[] args) { FiboRecursive fib = new FiboRecursive(); fib.print(); } } FiboRecursive.main(null); . Init method = Recursion fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . College Board Standards . Skill 1.B: Determine code that would be used to complete code segments (ie For, While, Recursion) . When extending the Fibo class you had to pick the specific segment of code that would have to be put in the for/while/recursive loop | . | Skill 4.C: Determine if two or more code segments yield equivalent results (be sure to Discuss how you know results are the same) . We determined that there were 4 different ways to produce the same fibonacci code, with either stream, or a for/while/recursive loop | . | Skill 5.A: Describe the behavior of a given segment of program code (describe the difference in recursion versus for &amp; while loops, perhaps add timing to determine speed) . The 4 different methods have 4 different speeds and efficiencies. | The recursion code segment iterates by running the function called &quot;recursion&quot;, which called the setdata method, and then re-runs itself by calling itself, and reducing limit by 1 each time, until limit = 0. | The while loop does the same as the recursive loop, but instead of calling itself over and over again, the loop is built into the &quot;while&quot; statement, which loops while (limit-- &gt; 0), which reduces limit each time by 1. | . | .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2022/09/25/fibonacci.html",
            "relUrl": "/fastpages/jupyter/2022/09/25/fibonacci.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Colors Frontend",
            "content": "Name Emotion Symbolism .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/markdown/2022/09/25/colors-frontend.html",
            "relUrl": "/markdown/2022/09/25/colors-frontend.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Week 4 Work",
            "content": "| Overview | Week 0 | Week 1 | Week 2 | Week 3 | Week 4 | Week 5 | Week 6 | Week 7 | . Review Ticket . FRQ Type #1 . Iteration with 2D Arrays . Solar System . Control Structures in Java . Attempted Greet and Character Counter . frontend | backend | . Peer review by Re’em: 2.7+/3 . She has all of the requirements and did extra work in the iteration with 2D array assignment. Also added the solar system by Tristan and answered extra questions at the end of the mini-lab. .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/organization/week4",
            "relUrl": "/organization/week4",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "FRQ Type 1",
            "content": "2018 AP&#174; COMPUTER SCIENCE A FREE-RESPONSE QUESTIONS . This question involves reasoning about a simulation of a frog hopping in a straight line. The frog attempts to hop to a goal within a specified number of hops. The simulation is encapsulated in the following FrogSimulation class. You will write two of the methods in this class. . public class FrogSimulation { /** Distance, in inches, from the starting position to the goal. */ private int goalDistance; /** Maximum number of hops allowed to reach the goal. */ private int maxHops; /** Constructs a FrogSimulation where dist is the distance, in inches, from the starting * position to the goal, and numHops is the maximum number of hops allowed to reach the goal. * Precondition: dist &gt; 0; numHops &gt; 0 */ public FrogSimulation(int dist, int numHops) { goalDistance = dist; maxHops = numHops; } /** Returns an integer representing the distance, in inches, to be moved when the frog hops. */ private int hopDistance() { /* implementation not shown */ } /** Simulates a frog attempting to reach the goal as described in part (a). * Returns true if the frog successfully reached or passed the goal during the simulation; * false otherwise. */ public boolean simulate() { /* to be implemented in part (a) */ } /** Runs num simulations and returns the proportion of simulations in which the frog * successfully reached or passed the goal. * Precondition: num &gt; 0 */ public double runSimulations(int num) { /* to be implemented in part (b) */ } } . | { /* implementation not shown */ } missing return statement | { /* to be implemented in part (a) */ } missing return statement | { /* to be implemented in part (b) */ } missing return statement . a) . Write the simulate method, which simulates the frog attempting to hop in a straight line to a goal from the frog&#39;s starting position of 0 within a maximum number of hops. The method returns true if the frog successfully reached the goal within the maximum number of hops; otherwise, the method returns false. | The FrogSimulation class provides a method called hopDistance that returns an integer representing the distance (positive or negative) to be moved when the frog hops. A positive distance represents a move toward the goal. A negative distance represents a move away from the goal. The returned distance may vary from call to call. Each time the frog hops, its position is adjusted by the value returned by a call to the hopDistance method. | The frog hops until one of the following conditions becomes true: The frog has reached or passed the goal. | The frog has reached a negative position. | The frog has taken the maximum number of hops without reaching the goal. | . | The following example shows a declaration of a FrogSimulation object for which the goal distance is 24 inches and the maximum number of hops is 5. The table shows some possible outcomes of calling the simulate method. | . FrogSimulation sim = new FrogSimulation(24, 5); Values returned by | Final position | Return value of hopDistance() | of frog | sim.simulate() Example 1: 5, 7, -2, 8, 6 | 24 | true Example 2: 6, 7, 6, 6 | 25 | true Example 3: 6, -6, 31 | 31 | true Example 4: 4, 2, -8 | -2 | false Example 5: 5, 4, 2, 4, 3 | 18 | false . Complete method simulate below. You must use hopDistance appropriately to receive full credit. | . /** Simulates a frog attempting to reach the goal as described in part (a). * Returns true if the frog successfully reached or passed the goal during the simulation; * false otherwise. */ public boolean simulate() { int position = 0; // frog starts at 0 for (int count = 0; count &lt; maxHops; count++) { // maxHops is the max the frog can hop, and after each hop the count goes up by one, the loop repeating until count = maxHops position += hopDistance(); if (position &gt;= goalDistance) { // if the frog goes farther than needed, return true return true; } else if (position &lt; 0) { // if the frog isn&#39;t there, return false and keep going return false; } } return false; // if the hops are taken up without the goal being met, it returns false } . (b) . Write the runSimulations method, which performs a given number of simulations and returns the proportion of simulations in which the frog successfully reached or passed the goal. For example, if the parameter passed to runSimulations is 400, and 100 of the 400 simulate method calls returned true, then the runSimulations method should return 0.25. | Complete method runSimulations below. Assume that simulate works as specified, regardless of what you wrote in part (a). You must use simulate appropriately to receive full credit. | . /** Runs num simulations and returns the proportion of simulations in which the frog * successfully reached or passed the goal. * Precondition: num &gt; 0 */ public double runSimulations(int num) { // double makes it so the value can be a decimal int countSuccess = 0; // starts at 0 for (int count = 0; count &lt; num; count++) { // checks if the simulation was successful for each time it was run if(simulate()) { // if it turns out true, raise the count of the number of successful runs countSuccess++; } } return (double)countSuccess / num; // divides the number of successes to the overall amount of simulations to find the final result } .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2022/09/19/frq1.html",
            "relUrl": "/fastpages/jupyter/2022/09/19/frq1.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Control Structures in Java",
            "content": ". . . Conditional Branches, which we use for choosing between two or more paths. | Loops that are used to iterate through and repeatedly run specific code blocks. | Branching Statements, which are used to alter the flow of control in loops. | . Conditional Branches: . The If/Else Statement . if (count &gt; 2) { System.out.println(&quot;Count is higher than 2&quot;); } else { System.out.println(&quot;Count is lower or equal than 2&quot;); } . The Switch Statement . switch (count) { case 0: System.out.println(&quot;Count is equal to 0&quot;); break; case 1: System.out.println(&quot;Count is equal to 1&quot;); break; default: System.out.println(&quot;Count is either negative, or higher than 1&quot;); break; } . Loops! . The For Loop: . for (int i = 1; i &lt;= 50; i++) { methodToRepeat(); } . The While Loop: . int whileCounter = 1; while (whileCounter &lt;= 50) { methodToRepeat(); whileCounter++; } . Branching Statements: . The Break: . List&lt;String&gt; names = getNameList(); String name = &quot;John Doe&quot;; int index = 0; for ( ; index &lt; names.length; index++) { if (names[index].equals(name)) { break; } } . The Continue: . List&lt;String&gt; names = getNameList(); String name = &quot;John Doe&quot;; String list = &quot;&quot;; for (int i = 0; i &lt; names.length; i++) { if (names[i].equals(name)) { continue; } list += names[i]; } .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2022/09/19/control-structures.html",
            "relUrl": "/fastpages/jupyter/2022/09/19/control-structures.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Iteration with 2D Arrays",
            "content": "Cat Version . class CatLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] cats; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public CatLoop() { //Storing Data in 2D arrays cats = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Cat 0 { &quot; 1 / &quot;, //[0][0] eyes &quot; ) ( &#39;) &quot;, //[0][1] chin &quot; ( / ) &quot;, //[0][2] body &quot; (__)| &quot; //[0][3] legs }, //Cat 1 { &quot; 2 / &quot;, //[1][0] eyes &quot; ) ( &#39;) &quot;, //[1][1] chin &quot; ( / ) &quot;, //[1][2] body &quot; (__)| &quot; //[1][3] legs }, //Cat 2 { &quot; 3 / &quot;, //[2][0] eyes &quot; ) ( &#39;) &quot;, //[2][1] chin &quot; ( / ) &quot;, //[2][2] body &quot; (__)| &quot; //[2][3] legs }, //Cat 3 { &quot; 4 / &quot;, //[3][0] eyes &quot; ) ( &#39;) &quot;, //[3][1] chin &quot; ( / ) &quot;, //[3][2] body &quot; (__)| &quot; //[3][3] legs }, //Cat 4 { &quot; 5 / &quot;, //[4][0] eyes &quot; ) ( &#39;) &quot;, //[4][1] chin &quot; ( / ) &quot;, //[4][2] body &quot; (__)| &quot; //[4][3] legs }, //Cat 5 { &quot; 6 / &quot;, //[5][0] eyes &quot; ) ( &#39;) &quot;, //[5][1] chin &quot; ( / ) &quot;, //[5][2] body &quot; (__)| &quot; //[5][3] legs }, //Cat 6 { &quot; 7 / &quot;, //[6][0] eyes &quot; ) ( &#39;) &quot;, //[6][1] chin &quot; ( / ) &quot;, //[6][2] body &quot; (__)| &quot; //[6][3] legs }, }; } /** * Loop and print cats in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Oh No the Cats Are Leaving!&quot;); // cats (non-primitive) defined in constructor knows its length int catCount = cats.length; for (int i = catCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Cats // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; cats are hanging out, but then another leaves...&quot;); System.out.println(); //how many separate parts are there in a cat cat? for (int row = 0; row &lt; catCount; row++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each cat part by part, will eventually print entire column*/ for (int col = 0; col &lt; cats[row].length; col++) { // prints specific part of the cat from the column System.out.print(cats[row][col] + &quot; &quot;); //this is new line between separate parts System.out.println(); } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing catCount variable by 1 catCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;Oh No, all the Cats have left...&quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new CatLoop().printPoem(); //a new cat list and output in one step } } CatLoop.main(null); . Oh No the Cats Are Leaving! 7 cats are hanging out, but then another leaves... 1 / ) ( &#39;) ( / ) (__)| 2 / ) ( &#39;) ( / ) (__)| 3 / ) ( &#39;) ( / ) (__)| 4 / ) ( &#39;) ( / ) (__)| 5 / ) ( &#39;) ( / ) (__)| 6 / ) ( &#39;) ( / ) (__)| 7 / ) ( &#39;) ( / ) (__)| 6 cats are hanging out, but then another leaves... 1 / ) ( &#39;) ( / ) (__)| 2 / ) ( &#39;) ( / ) (__)| 3 / ) ( &#39;) ( / ) (__)| 4 / ) ( &#39;) ( / ) (__)| 5 / ) ( &#39;) ( / ) (__)| 6 / ) ( &#39;) ( / ) (__)| 5 cats are hanging out, but then another leaves... 1 / ) ( &#39;) ( / ) (__)| 2 / ) ( &#39;) ( / ) (__)| 3 / ) ( &#39;) ( / ) (__)| 4 / ) ( &#39;) ( / ) (__)| 5 / ) ( &#39;) ( / ) (__)| 4 cats are hanging out, but then another leaves... 1 / ) ( &#39;) ( / ) (__)| 2 / ) ( &#39;) ( / ) (__)| 3 / ) ( &#39;) ( / ) (__)| 4 / ) ( &#39;) ( / ) (__)| 3 cats are hanging out, but then another leaves... 1 / ) ( &#39;) ( / ) (__)| 2 / ) ( &#39;) ( / ) (__)| 3 / ) ( &#39;) ( / ) (__)| 2 cats are hanging out, but then another leaves... 1 / ) ( &#39;) ( / ) (__)| 2 / ) ( &#39;) ( / ) (__)| 1 cats are hanging out, but then another leaves... 1 / ) ( &#39;) ( / ) (__)| Oh No, all the Cats have left... . Printing Sideways . class CatLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] cats; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public CatLoop() { //Storing Data in 2D arrays cats = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Cat 0 { &quot; 1 / &quot;, //[0][0] eyes &quot; ) ( &#39;) &quot;, //[0][1] chin &quot; ( / ) &quot;, //[0][2] body &quot; (__)| &quot; //[0][3] legs }, //Cat 1 { &quot; 2 / &quot;, //[1][0] eyes &quot; ) ( &#39;) &quot;, //[1][1] chin &quot; ( / ) &quot;, //[1][2] body &quot; (__)| &quot; //[1][3] legs }, //Cat 2 { &quot; 3 / &quot;, //[2][0] eyes &quot; ) ( &#39;) &quot;, //[2][1] chin &quot; ( / ) &quot;, //[2][2] body &quot; (__)| &quot; //[2][3] legs }, //Cat 3 { &quot; 4 / &quot;, //[3][0] eyes &quot; ) ( &#39;) &quot;, //[3][1] chin &quot; ( / ) &quot;, //[3][2] body &quot; (__)| &quot; //[3][3] legs }, //Cat 4 { &quot; 5 / &quot;, //[4][0] eyes &quot; ) ( &#39;) &quot;, //[4][1] chin &quot; ( / ) &quot;, //[4][2] body &quot; (__)| &quot; //[4][3] legs }, //Cat 5 { &quot; 6 / &quot;, //[5][0] eyes &quot; ) ( &#39;) &quot;, //[5][1] chin &quot; ( / ) &quot;, //[5][2] body &quot; (__)| &quot; //[5][3] legs }, //Cat 6 { &quot; 7 / &quot;, //[6][0] eyes &quot; ) ( &#39;) &quot;, //[6][1] chin &quot; ( / ) &quot;, //[6][2] body &quot; (__)| &quot; //[6][3] legs }, }; } /** * Loop and print cats in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Oh No the Cats Are Leaving!&quot;); // cats (non-primitive) defined in constructor knows its length int catCount = 7; for (int i = catCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Cats // concatenation (+) of the loop variable and string to form a countdown message System.out.println(&quot; &quot;); System.out.println(&quot; &quot;); System.out.println(i + &quot; cats are hanging out, but then another leaves...&quot;); System.out.println(&quot; &quot;); // printing the cats horizontally for (int col = 0; col &lt; 4; col++) { //cycles through the columns after each row is completed for (int row = 0; row &lt; catCount; row++) { //cycles through each row first System.out.print(cats[row][col] + &quot; &quot;); } System.out.println(&quot; &quot;); } catCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot; &quot;); System.out.println(&quot; &quot;); System.out.println(&quot;Oh No, all the Cats have left...&quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new CatLoop().printPoem(); //a new cat list and output in one step } } CatLoop.main(null); . Oh No the Cats Are Leaving! 7 cats are hanging out, but then another leaves... 1 / 2 / 3 / 4 / 5 / 6 / 7 / ) ( &#39;) ) ( &#39;) ) ( &#39;) ) ( &#39;) ) ( &#39;) ) ( &#39;) ) ( &#39;) ( / ) ( / ) ( / ) ( / ) ( / ) ( / ) ( / ) (__)| (__)| (__)| (__)| (__)| (__)| (__)| 6 cats are hanging out, but then another leaves... 1 / 2 / 3 / 4 / 5 / 6 / ) ( &#39;) ) ( &#39;) ) ( &#39;) ) ( &#39;) ) ( &#39;) ) ( &#39;) ( / ) ( / ) ( / ) ( / ) ( / ) ( / ) (__)| (__)| (__)| (__)| (__)| (__)| 5 cats are hanging out, but then another leaves... 1 / 2 / 3 / 4 / 5 / ) ( &#39;) ) ( &#39;) ) ( &#39;) ) ( &#39;) ) ( &#39;) ( / ) ( / ) ( / ) ( / ) ( / ) (__)| (__)| (__)| (__)| (__)| 4 cats are hanging out, but then another leaves... 1 / 2 / 3 / 4 / ) ( &#39;) ) ( &#39;) ) ( &#39;) ) ( &#39;) ( / ) ( / ) ( / ) ( / ) (__)| (__)| (__)| (__)| 3 cats are hanging out, but then another leaves... 1 / 2 / 3 / ) ( &#39;) ) ( &#39;) ) ( &#39;) ( / ) ( / ) ( / ) (__)| (__)| (__)| 2 cats are hanging out, but then another leaves... 1 / 2 / ) ( &#39;) ) ( &#39;) ( / ) ( / ) (__)| (__)| 1 cats are hanging out, but then another leaves... 1 / ) ( &#39;) ( / ) (__)| Oh No, all the Cats have left... . Further Questions . Is this program in more of an Imperative Programming Style or OOP style? . Java is an imperative programming language, so you have to be very specific with what you want the code to do, and not leave it open to interpretation. I think this program is more of an Imperative Programming Style, because you needed to be very specific to make sure the code worked, and Java didn&#39;t guess what you wanted based on the goal, you had to drag it there. . What did you Observe about Variable Assignments? . Variables were mostly assigned to moving parts of the program, and mainly for keeping track and counting down the monkeys, along with the monkey rows and columns. Nonessential things like the names of the rows or cols weren&#39;t made into variables. . Is Each Monkey an Object? . No, each monkey is not an object, but its parts are separate components in an array. Those parts of the array are called throughout the program and rearranged. . How do 2D Array References work? . Referencing an array or specific parts of it have a standard format of name-of-the-array[row#][col#], where row and col are integers or variables that have int values, like in this program. .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2022/09/18/iteration-2d-array.html",
            "relUrl": "/fastpages/jupyter/2022/09/18/iteration-2d-array.html",
            "date": " • Sep 18, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Solar System",
            "content": "",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/markdown/2022/09/16/solar-system.html",
            "relUrl": "/markdown/2022/09/16/solar-system.html",
            "date": " • Sep 16, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Week 3 Work",
            "content": "| Overview | Week 0 | Week 1 | Week 2 | Week 3 | Week 4 | Week 5 | Week 6 | Week 7 | . Review Ticket . Lesson on ifs and expressions . Deployment on AWS . Focus / Habits . Human Work Organization .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/organization/week3",
            "relUrl": "/organization/week3",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "If-Else Notebook",
            "content": "Definitions: . Conditional Statement: . A statement that only executes when a condition is true | . Boolean: . A primitive data type that can be either true or false | . If Statement: . The code in the body of an if statement will only execute if the code is true | . If-Else Statement: . Same as an if statement, but if the condition is false the code in the body of the else statement will execute | . (==) : equal to . (!=) : not equal to . (&lt;=) : less than or equal to . (&gt;=) : greater than or equal to . (&amp;&amp;) : and . (||) : or . Complex 5 layer While, If, and Else statement program: . import java.util.Scanner; // this is a program that would display if a score in a game is enough to advance to the next level public class Score { public static void main(String[] args) { // where the user inputs their score Scanner input = new Scanner(System.in); int score = 0; // makes it so the program runs until the user decides to quit the program while (score != -100) { System.out.print(&quot;Enter the student&#39;s score (or -100 to quit): &quot;); score = input.nextInt(); // if the score is less than 30, the user cannot advance if (score &gt;= 0 &amp;&amp; score &lt;= 29) { System.out.println(&quot; nScore: {&quot; + score + &quot;} | is not enough to advance to the next level.&quot;); } // if the score is then less than 80, they can go on, but haven&#39;t beaten the high score of 80 else { if (score &gt;= 30 &amp;&amp; score &lt;= 79) { System.out.println(&quot; nScore: {&quot; + score + &quot;} | is enough to advance, but is less than the high score.&quot;); } // if they got higher than 80, they&#39;ve gotten the high score else { if (score &gt;= 80 &amp;&amp; score &lt;= 100) { System.out.println(&quot; nScore: {&quot; + score + &quot;} | is enough to advance, and greater than the high score!&quot;); } // this is what runs if they decide to quit the program else { if (score == -100) { System.out.println(&quot;Goodbye!&quot;); } // this is if the user types in an invalid score else { System.out.println(&quot;The score entered is invalid. Please try again.&quot;); } } } } } } } Score.main(null); . Enter the student&#39;s score (or -100 to quit): Score: {13} | is not enough to advance to the next level. Enter the student&#39;s score (or -100 to quit): Score: {50} | is enough to advance, but is less than the high score. Enter the student&#39;s score (or -100 to quit): Score: {89} | is enough to advance, and greater than the high score! Enter the student&#39;s score (or -100 to quit): Goodbye! . De Morgan&#39;s Laws: . De Morgan&#39;s Law of Union: The complement of the union of the two sets A and B will be equal to the intersection of A&#39; (complement of A) and B&#39; (complement of B). This is also known as De Morgan&#39;s Law of Union. It can be represented as (A ∪ B)’ = A’ ∩ B’. | De Morgan&#39;s Law of Intersection: The complement of the intersection of A and B will be equal to the union of A&#39; and B&#39;. This condition is called De Morgan&#39;s law of Intersection. It can be given by (A ∩ B)’ = A’ ∪ B’. | . Simplified: . not(A and B) --&gt; notA or notB | not(A or B) --&gt; notA and notB | not(A and B) =/= notA and notB | .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2022/09/11/if-else.html",
            "relUrl": "/fastpages/jupyter/2022/09/11/if-else.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Focus and Habits",
            "content": "Psychology and the Good Life, by Laurie Santos . Main Points of the Video . This new enterprise or goal is possible. | We think life’s circumstances matter a lot, but they don’t matter as much as we think. | Taking control of life, is kind of hard. | Make time for social connection | Help others whenever you can | Make time for gratitude | Healthy practices matter a lot more than we think | Taking time to be in the present moment | Become wealthy in terms of time | . Goal Setting . 3 Personal Goals . Start a new hobby | Level up in my favorite video game | Improve focus and motivation in general | 3 Academic Goals . Score well on the SAT and ACT | Contribute more to clubs I am a part of | Do well in AP CSA | Gratitude Logs . In School . Thank you to my friends who sit with me at lunch and make me laugh | Thank you to my teachers that try their best to teach me | Thank you to my councilor who handled my schedule change | Thank you to my fellow guard members who helped me settle in and catch up | Thank you to my classmates for helping me understand classwork and class concepts | . At Home . Thank you to my mom who does literally everything for me, she’s amazing | Thank you to my dad for supporting me | Thank you to my brother for being entertaining sometimes | Thank you to my house for being a very comfortable house | .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/focus-and-habits",
            "relUrl": "/focus-and-habits",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Week 2 Work",
            "content": "| Overview | Week 0 | Week 1 | Week 2 | Week 3 | Week 4 | Week 5 | Week 6 | Week 7 | . Review Ticket . Code.org OOP Assignment . Console Math Menu . Life . Weekly Organization .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/organization/week2",
            "relUrl": "/organization/week2",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Game of Life",
            "content": "| Overview | Week 0 | Week 1 | Week 2 | Week 3 | Week 4 | Week 5 | Week 6 | Week 7 | . Remix of Game of Life . start step",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/organization/life",
            "relUrl": "/organization/life",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Grades Calculator",
            "content": "| Overview | Week 0 | Week 1 | Week 2 | Week 3 | Week 4 | Week 5 | Week 6 | Week 7 | . Grade Calculator . Total : 0.0 Count : 0.0 Average : 0.0 Input a score, and then press tab to add new number: .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/organization/grades",
            "relUrl": "/organization/grades",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Console Math Menu",
            "content": "// imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;__________________________ n&quot;); System.out.println(&quot;Choose from these choices:&quot;); System.out.println(&quot;__________________________ n&quot;); System.out.println(&quot;1 - Say Hello&quot;); System.out.println(&quot;2 - Output colors&quot;); System.out.println(&quot;3 - Loading in color&quot;); System.out.println(&quot;4 - Factorial Calculator&quot;); System.out.println(&quot;5 - Degrees to Radians&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;__________________________ n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World!&quot;); break; case 2: for(int i = 0; i &lt; COLORS.length; i++) // loop through COLORS array System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); break; case 3: System.out.print(&quot;Loading...&quot;); for (int i = 0; i &lt; 10; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot;Hey! &quot;); } break; case 4: System.out.print(&quot;Enter an Integer:&quot;); Scanner myObj = new Scanner(System.in); int number = myObj.nextInt(); int i,fact=1; for(i=1;i&lt;=number;i++){ fact=fact*i; } System.out.println(&quot; nFactorial of &quot;+number+&quot; is: &quot;+fact); break; case 5: System.out.print(&quot;Enter a Degree Value:&quot;); Scanner myObj2 = new Scanner(System.in); double number2 = myObj2.nextDouble(); double radians = Math.toRadians(number2); System.out.println(&quot; nValue in Radians = &quot; + String.format(&quot;%.2f&quot;, radians)); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . __________________________ Choose from these choices: __________________________ 1 - Say Hello 2 - Output colors 3 - Loading in color 4 - Factorial Calculator 5 - Degrees to Radians 0 - Quit __________________________ 4: Enter an Integer: Factorial of 4 is: 24 5: Enter a Degree Value: Value in Radians = 0.09 0: Goodbye, World! .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2022/09/02/menu.html",
            "relUrl": "/fastpages/jupyter/2022/09/02/menu.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Week 1 Work",
            "content": "| Overview | Week 0 | Week 1 | Week 2 | Week 3 | Week 4 | Week 5 | Week 6 | Week 7 | . Review Ticket . Code.org OOP Assignment . Primitives Notebook . Bash Notebook . Fastpages .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/organization/week1",
            "relUrl": "/organization/week1",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Using Objects",
            "content": "Console Based Menu . Java imports allow user input and console output to be displayed in Terminal . Objects Used . Makes Object from Scanner Class to obtain inputs / menu selection from User | Use System Class, to call static methods System.out.print and System.out.println to output to console | User Math Class, to call static method Math.random() to generate random number | . Other College Board Topics . A 2D array is used to store COLORS | A Control Structure, Switch, is used to process Menu select to code that performs related action | . Key PBL Topic . Menu class when instantiated with new Menu() takes over Frontend experience with user. This is relevant to Draw Lab in this article and how Spring Boot works in Web programming. Objects are intended to encapsulate Frontend, Backend or experience ... Web Site control flow, Database CRUD operations, or a Menu in terminal (this example) | . // imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;__________________________ n&quot;); System.out.println(&quot;Choose from these choices:&quot;); System.out.println(&quot;__________________________ n&quot;); System.out.println(&quot;1 - Say Hello&quot;); System.out.println(&quot;2 - Output colors&quot;); System.out.println(&quot;3 - Loading in color&quot;); System.out.println(&quot;4 - Factorial Calculator&quot;); System.out.println(&quot;5 - Degrees to Radians&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;__________________________ n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World!&quot;); break; case 2: for(int i = 0; i &lt; COLORS.length; i++) // loop through COLORS array System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); break; case 3: System.out.print(&quot;Loading...&quot;); for (int i = 0; i &lt; 10; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot;Hey! &quot;); } break; case 4: System.out.print(&quot;Enter an Integer:&quot;); Scanner myObj = new Scanner(System.in); int number = myObj.nextInt(); int i,fact=1; for(i=1;i&lt;=number;i++){ fact=fact*i; } System.out.println(&quot; nFactorial of &quot;+number+&quot; is: &quot;+fact); break; case 5: System.out.print(&quot;Enter a Degree Value:&quot;); Scanner myObj2 = new Scanner(System.in); double number2 = myObj2.nextDouble(); double radians = Math.toRadians(number2); System.out.println(&quot; nValue in Radians = &quot; + String.format(&quot;%.2f&quot;, radians)); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . __________________________ Choose from these choices: __________________________ 1 - Say Hello 2 - Output colors 3 - Loading in color 4 - Factorial Calculator 5 - Degrees to Radians 0 - Quit __________________________ 5: Enter a Degree Value: Value in Radians = 3.14 0: Goodbye, World! . Desktop GUI Menu . Swing and AWT imports allow Java to provide a Graphical User Interface on the desktop. . Other College Board Topics . A 1D array is used to store MENUS | A Control Structure, if-else if-else, is used to process Menu selection to code that performs related action | . Using Objects . Javax Swing UI (JFrame) | Timer with a TimerTask to allow action to repeatedly occur without halting thread. | . import java.awt.*; import java.awt.event.*; import javax.swing.*; import java.util.Timer; import java.util.TimerTask; // Graphical-User-Interface for Desktop in Java using Java Swing. public class MenuJFrame extends JFrame implements ActionListener { private JFrame frame; private JMenuBar menubar; private JMenu menu; private JLabel message = new JLabel(&quot;Click on Menu to select an action.&quot;); public final String[] MENUS = { // 1D Array of Menu Choices &quot;Hello&quot;, &quot;Colors&quot;, &quot;Loading bar&quot;, }; // Statics to assist with timer and messaging, single copy (no instance) private static int delay = 20; private static int step = 1; private static String hashes = &quot;&quot;; // Constructor enables the Frame instance, the object &quot;this.frame&quot; public MenuJFrame(String title) { // Initializing Key Objects frame = new JFrame(title); menubar = new JMenuBar(); menu = new JMenu(&quot;Menu&quot;); // Initializing Menu objects and adding actions for (String mx : MENUS) { JMenuItem m = new JMenuItem(mx); m.addActionListener(this); menu.add(m); } // Adding / Connecting Objects menubar.add(menu); frame.setJMenuBar(menubar); frame.add(message); // Sets JFrame close operation to Class variable JFrame.EXIT_ON_CLOSE frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // set the size of window based on objects frame.setSize(300,200); // makes the frame object visible according to properties previously set frame.setVisible(true); // flow of control shifts to frame object } // event from user selecting a menu option public void actionPerformed(ActionEvent e) { // local variable to ActinEvent String selection = e.getActionCommand(); // menu selection String msg; // local variable to create response from action final String[] COLORS = {&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;}; // add more colors here final String start_msg = &quot;&lt;html&gt;&quot;; // html building final String end_msg = &quot;&lt;/html&gt;&quot;; final String hash = &quot;#&quot;; // run code based on the menuItem that was selected if ( selection.equals(MENUS[0]) ) { // Hello Action msg = &quot;Hello, World&quot;; message.setText(msg); } else if ( selection.equals(MENUS[1]) ) { // Color Action msg = start_msg + &quot;&lt;p&gt;&quot; + selection + &quot;&lt;/p&gt;&quot;; for (String color : COLORS) { msg += &quot;&lt;font color=&quot; + color + &quot;&gt;&quot; + color + &quot; &lt;/font&gt;&quot;; } msg += end_msg; message.setText(msg); } else { // Loading Bar Action String loading = &quot;&lt;p&gt;Loading&lt;/p&gt;&quot;; // Code to run on a Timer Timer timer = new Timer(); TimerTask task = new TimerTask() { public void run() { // Method for TimerTask // Static and Local variables used to manage message building int random = (int) (Math.random() * COLORS.length); // random logic MenuJFrame.hashes += &quot;&lt;font color=&quot; + COLORS[random] + &quot;&gt;&quot; + hash + &quot;&lt;/font&gt;&quot;; String msg = start_msg + loading + hashes + end_msg; message.setText(msg); // Shutdown timer and reset data if(MenuJFrame.step++ &gt; MenuJFrame.delay) { MenuJFrame.step = 1; MenuJFrame.hashes=&quot;&quot;; timer.cancel(); } }; }; // Schedule task and interval timer.schedule(task, 200, 200); message.setText(start_msg + loading + hash + end_msg); // prime/initial display } } // Driver turn over control the GUI public static void main(String[] args) { // Activates an instance of MenuJFrame class, which makes a JFrame object new MenuJFrame(&quot;Menu&quot;); } } MenuJFrame.main(null); . Code.org Object Oriented Programming - The Neighborhood . Students learn fundamental Java concepts as they navigate and interact with The Neighborhood with Painter objects and create new types of Painters to expand the capabilities of their programs. . College Board Topics . Inheritance (extends) is introduced early in this activity | Conditional statements, While loops, and Boolean expressions | . Using Objects . Code.org Painter class and objects | . Activity Page Start: Code.org CSA1 . Hacks . College Board and CTE competences. . Documentation / Analysis. Describe with Markdown Cell(s) and triple backtick code fragments that answers to the following from your work... Explain where a Class is defined | Explain where an instances of a Class is defined | Explain where an object is Calling a Method | Explain where an object is Mutating data | Describe Console, GUI differences, or Code.org differences. | . | Option A Exploration work Build a new Console or GUI lab for your own solution of interest, this is great opportunity to visualize data from Math, Physics, or other class using Math library. Look to make these changes in your work Make constructors of different signatures. | Use Wrapper Classes of Integer and Double for defining object instance or static data in the Class | Use the Math Class in performing calculations | . | Option B Code.org learning Follow the Neighborhood lessons and work through 11 to 15 lessons. | .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/unit/2",
            "relUrl": "/unit/2",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Primitives Notebook",
            "content": "Listing the types of primitives: . public class ListPrimitives { public static void main(String[] args) { // assigning variable values int anInt = 505; double aDouble = 99.9; boolean aBoolean = true; char aChar=&#39; u0021&#39;; // not a primitive but essential String aString = &quot;Look over there!&quot;; System.out.println(&quot;Types of Primitives:&quot;); System.out.println(&quot;--&gt; Integer: &quot; + anInt); System.out.println(&quot;--&gt; Double: &quot; + aDouble); System.out.println(&quot;--&gt; Character: &quot; + aChar); System.out.println(&quot;--&gt; Boolean: &quot; + aBoolean); System.out.println(&quot;--&gt; String: &quot; + aString); } } ListPrimitives.main(null) . Types of Primitives: --&gt; Integer: 505 --&gt; Double: 99.9 --&gt; Character: ! --&gt; Boolean: true --&gt; String: Look over there! . Division with ints and doubles: . public class Division { public static void main(String[] args) { // setting the variables int divided = 17 / 24; double doubleDivided = 17.0 / 24.0; // printing out the division in int and double form System.out.println(&quot;Integer division with 17/24 is: &quot; + divided); // %.2f limits the # of decimal values displayed System.out.println(&quot;Double division with 17.0/24.0 is: &quot; + String.format(&quot;%.2f&quot;, doubleDivided)); } } // makes it so you can print the code&#39;s output Division.main(null) . Integer division with 17/24 is: 0 Double division with 17.0/24.0 is: 0.71 . Celsius to Fahrenheit Converter . public class CtoF { public static void main(String[] args) { System.out.println(&quot;Celsius to Fahrenheit Converter:&quot;); System.out.println(&quot;Degrees Celsius: 55 --&gt;&quot;); int celsius = 55; int fahrenheit = ((celsius*9)/5)+32; System.out.println(&quot; tDegrees Fahrenheit: &quot; + fahrenheit); System.out.println(&quot;Degrees Celsius: 78 --&gt;&quot;); int celsius1 = 78; int fahrenheit1 = ((celsius1*9)/5)+32; System.out.println(&quot; tDegrees Fahrenheit: &quot; + fahrenheit1); System.out.println(&quot;Degrees Celsius: 11 --&gt;&quot;); int celsius2 = 11; int fahrenheit2 = ((celsius2*9)/5)+32; System.out.println(&quot; tDegrees Fahrenheit: &quot; + fahrenheit2); } } // makes it so you can print the code&#39;s output CtoF.main(null) . Celsius to Fahrenheit Converter: Degrees Celsius: 55 --&gt; Degrees Fahrenheit: 131 Degrees Celsius: 78 --&gt; Degrees Fahrenheit: 172 Degrees Celsius: 11 --&gt; Degrees Fahrenheit: 51 . Inputting primitive data: . // java style to import library import java.util.Scanner; // class must alway have 1st letter as uppercase, CamelCase is Java Class convention public class ScanPrimitives { public static void main(String[] args) { Scanner input; // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter an integer: &quot;); try { int sampleInputInt = input.nextInt(); System.out.println(sampleInputInt); } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); // primitive double input = new Scanner(System.in); System.out.print(&quot;Enter a double: &quot;); try { double sampleInputDouble = input.nextDouble(); System.out.println(sampleInputDouble); } catch (Exception e) { // if not a number System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } input.close(); // primitive boolean input = new Scanner(System.in); System.out.print(&quot;Enter a boolean: &quot;); try { boolean sampleInputBoolean = input.nextBoolean(); System.out.println(sampleInputBoolean); } catch (Exception e) { // if not true or false System.out.println(&quot;Not an boolean (true or false), &quot; + e); } input.close(); // wrapper class String input = new Scanner(System.in); System.out.print(&quot;Enter a String: &quot;); try { String sampleInputString = input.nextLine(); System.out.println(sampleInputString); } catch (Exception e) { // this may never happen System.out.println(&quot;Not an String, &quot; + e); } input.close(); } } ScanPrimitives.main(null); . Enter an integer: 2 Enter a double: 2.0 Enter a boolean: true Enter a String: hi .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2022/08/28/primitives.html",
            "relUrl": "/fastpages/jupyter/2022/08/28/primitives.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Bash Notebook",
            "content": "echo &quot;The currently installed python verision:&quot; python --version echo &quot;&quot; echo &quot;The currently installed conda verion:&quot; conda --version echo &quot;&quot; echo &quot;The currently installed java features:&quot; java --version echo &quot;&quot; echo &quot;The currently installed jupyter packages:&quot; jupyter --version . The currently installed python verision: Python 3.9.12 The currently installed conda verion: conda 4.14.0 The currently installed java features: openjdk 11.0.16 2022-07-19 OpenJDK Runtime Environment (build 11.0.16+8-post-Ubuntu-0ubuntu120.04) OpenJDK 64-Bit Server VM (build 11.0.16+8-post-Ubuntu-0ubuntu120.04, mixed mode, sharing) The currently installed jupyter packages: Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 . Jupyter Kernel Checks: . jupyter kernelspec list . Available kernels: bash /home/saathvika/.local/share/jupyter/kernels/bash java /home/saathvika/.local/share/jupyter/kernels/java javascript /home/saathvika/.local/share/jupyter/kernels/javascript python3 /home/saathvika/.local/share/jupyter/kernels/python3 . Anaconda Location Check: . echo &quot;Folders inside WSL:&quot; ls / echo &quot;&quot; echo &quot;Folders inside Home:&quot; ls /home echo &quot;&quot; echo &quot;Folders inside Saathvika:&quot; ls /home/saathvika echo &quot;&quot; echo &quot;We&#39;ve found Anaconda!&quot; . Folders inside WSL: bin etc lib libx32 mnt root snap tmp wslLdjHgc boot home lib32 lost+found opt run srv usr wsldnLbHg dev init lib64 media proc sbin sys var Folders inside Home: saathvika Folders inside Saathvika: APCSA Anaconda3-2022.05-Linux-x86_64.sh vscode APCSA-Fastpages Anaconda3-2022.05-Linux-x86_64.sh.1 APCSP anaconda3 We&#39;ve found Anaconda! .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2022/08/28/bash.html",
            "relUrl": "/fastpages/jupyter/2022/08/28/bash.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Week 0 Work",
            "content": "| Overview | Week 0 | Week 1 | Week 2 | Week 3 | Week 4 | Week 5 | Week 6 | Week 7 | . Review Ticket . Python Tester Notebook . Java Tester Notebook .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/organization/week0",
            "relUrl": "/organization/week0",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Python Notebook",
            "content": "print(&quot;Hello&quot;) . Hello .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2022/08/22/python.html",
            "relUrl": "/fastpages/jupyter/2022/08/22/python.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Java Notebook",
            "content": "public class Hello { public static void main(String[] args) { System.out.println(&quot;Hello World!&quot;); } } Hello.main(null); . Hello World! .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2022/08/22/java.html",
            "relUrl": "/fastpages/jupyter/2022/08/22/java.html",
            "date": " • Aug 22, 2022"
        }
        
    
  

  
  

  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  

  
  

  
      ,"page14": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}