{
  
    
        "post0": {
            "title": "Week 4 Work",
            "content": "| Overview | Week 0 | Week 1 | Week 2 | Week 3 | Week 4 | . Review Ticket . FRQ Type #1 . Iteration with 2D Arrays . Solar System . Attempted Greet and Character Counter . frontend | backend | . Peer review by Re’em: 2.7+/3 . She has all of the requirements and did extra work in the iteration with 2D array assignment. Also added the solar system by Tristan and answered extra questions at the end of the mini-lab. .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/organization/week4",
            "relUrl": "/organization/week4",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "FRQ Type 1",
            "content": "2019 AP&#174; COMPUTER SCIENCE A FREE-RESPONSE QUESTIONS . This question involves reasoning about a simulation of a frog hopping in a straight line. The frog attempts to hop to a goal within a specified number of hops. The simulation is encapsulated in the following FrogSimulation class. You will write two of the methods in this class. . public class FrogSimulation { /** Distance, in inches, from the starting position to the goal. */ private int goalDistance; /** Maximum number of hops allowed to reach the goal. */ private int maxHops; /** Constructs a FrogSimulation where dist is the distance, in inches, from the starting * position to the goal, and numHops is the maximum number of hops allowed to reach the goal. * Precondition: dist &gt; 0; numHops &gt; 0 */ public FrogSimulation(int dist, int numHops) { goalDistance = dist; maxHops = numHops; } /** Returns an integer representing the distance, in inches, to be moved when the frog hops. */ private int hopDistance() { /* implementation not shown */ } /** Simulates a frog attempting to reach the goal as described in part (a). * Returns true if the frog successfully reached or passed the goal during the simulation; * false otherwise. */ public boolean simulate() { /* to be implemented in part (a) */ } /** Runs num simulations and returns the proportion of simulations in which the frog * successfully reached or passed the goal. * Precondition: num &gt; 0 */ public double runSimulations(int num) { /* to be implemented in part (b) */ } } FrogSimulation.main(null); . | { /* implementation not shown */ } missing return statement | { /* to be implemented in part (a) */ } missing return statement | { /* to be implemented in part (b) */ } missing return statement . a) . Write the simulate method, which simulates the frog attempting to hop in a straight line to a goal from the frog&#39;s starting position of 0 within a maximum number of hops. The method returns true if the frog successfully reached the goal within the maximum number of hops; otherwise, the method returns false. | The FrogSimulation class provides a method called hopDistance that returns an integer representing the distance (positive or negative) to be moved when the frog hops. A positive distance represents a move toward the goal. A negative distance represents a move away from the goal. The returned distance may vary from call to call. Each time the frog hops, its position is adjusted by the value returned by a call to the hopDistance method. | The frog hops until one of the following conditions becomes true: The frog has reached or passed the goal. | The frog has reached a negative position. | The frog has taken the maximum number of hops without reaching the goal. | . | The following example shows a declaration of a FrogSimulation object for which the goal distance is 24 inches and the maximum number of hops is 5. The table shows some possible outcomes of calling the simulate method. | . FrogSimulation sim = new FrogSimulation(24, 5); Values returned by | Final position | Return value of hopDistance() | of frog | sim.simulate() Example 1: 5, 7, -2, 8, 6 | 24 | true Example 2: 6, 7, 6, 6 | 25 | true Example 3: 6, -6, 31 | 31 | true Example 4: 4, 2, -8 | -2 | false Example 5: 5, 4, 2, 4, 3 | 18 | false . Complete method simulate below. You must use hopDistance appropriately to receive full credit. | . /** Simulates a frog attempting to reach the goal as described in part (a). * Returns true if the frog successfully reached or passed the goal during the simulation; * false otherwise. */ public boolean simulate() { int position = 0; // frog starts at 0 for (int count = 0; count &lt; maxHops; count++) { // maxHops is the max the frog can hop, and after each hop the count goes up by one, the loop repeating until count = maxHops position += hopDistance(); if (position &gt;= goalDistance) { // if the frog goes farther than needed, return true return true; } else if (position &lt; 0) { // if the frog isn&#39;t there, return false and keep going return false; } } return false; // if the hops are taken up without the goal being met, it returns false } . (b) . Write the runSimulations method, which performs a given number of simulations and returns the proportion of simulations in which the frog successfully reached or passed the goal. For example, if the parameter passed to runSimulations is 400, and 100 of the 400 simulate method calls returned true, then the runSimulations method should return 0.25. | Complete method runSimulations below. Assume that simulate works as specified, regardless of what you wrote in part (a). You must use simulate appropriately to receive full credit. | . /** Runs num simulations and returns the proportion of simulations in which the frog * successfully reached or passed the goal. * Precondition: num &gt; 0 */ public double runSimulations(int num) { // double makes it so the value can be a decimal int countSuccess = 0; // starts at 0 for (int count = 0; count &lt; num; count++) { // checks if the simulation was successful for each time it was run if(simulate()) { // if it turns out true, raise the count of the number of successful runs countSuccess++; } } return (double)countSuccess / num; // divides the number of successes to the overall amount of simulations to find the final result } .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2022/09/19/frq1.html",
            "relUrl": "/fastpages/jupyter/2022/09/19/frq1.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Iteration with 2D Arrays",
            "content": "Cat Version . class CatLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] cats; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public CatLoop() { //Storing Data in 2D arrays cats = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Cat 0 { &quot; 1 / &quot;, //[0][0] eyes &quot; ) ( &#39;) &quot;, //[0][1] chin &quot; ( / ) &quot;, //[0][2] body &quot; (__)| &quot; //[0][3] legs }, //Cat 1 { &quot; 2 / &quot;, //[1][0] eyes &quot; ) ( &#39;) &quot;, //[1][1] chin &quot; ( / ) &quot;, //[1][2] body &quot; (__)| &quot; //[1][3] legs }, //Cat 2 { &quot; 3 / &quot;, //[2][0] eyes &quot; ) ( &#39;) &quot;, //[2][1] chin &quot; ( / ) &quot;, //[2][2] body &quot; (__)| &quot; //[2][3] legs }, //Cat 3 { &quot; 4 / &quot;, //[3][0] eyes &quot; ) ( &#39;) &quot;, //[3][1] chin &quot; ( / ) &quot;, //[3][2] body &quot; (__)| &quot; //[3][3] legs }, //Cat 4 { &quot; 5 / &quot;, //[4][0] eyes &quot; ) ( &#39;) &quot;, //[4][1] chin &quot; ( / ) &quot;, //[4][2] body &quot; (__)| &quot; //[4][3] legs }, //Cat 5 { &quot; 6 / &quot;, //[5][0] eyes &quot; ) ( &#39;) &quot;, //[5][1] chin &quot; ( / ) &quot;, //[5][2] body &quot; (__)| &quot; //[5][3] legs }, //Cat 6 { &quot; 7 / &quot;, //[6][0] eyes &quot; ) ( &#39;) &quot;, //[6][1] chin &quot; ( / ) &quot;, //[6][2] body &quot; (__)| &quot; //[6][3] legs }, }; } /** * Loop and print cats in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Oh No the Cats Are Leaving!&quot;); // cats (non-primitive) defined in constructor knows its length int catCount = cats.length; for (int i = catCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Cats // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; cats are hanging out, but then another leaves...&quot;); System.out.println(); //how many separate parts are there in a cat cat? for (int row = 0; row &lt; catCount; row++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each cat part by part, will eventually print entire column*/ for (int col = 0; col &lt; cats[row].length; col++) { // prints specific part of the cat from the column System.out.print(cats[row][col] + &quot; &quot;); //this is new line between separate parts System.out.println(); } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing catCount variable by 1 catCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;Oh No, all the Cats have left...&quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new CatLoop().printPoem(); //a new cat list and output in one step } } CatLoop.main(null); . Oh No the Cats Are Leaving! 7 cats are hanging out, but then another leaves... 1 / ) ( &#39;) ( / ) (__)| 2 / ) ( &#39;) ( / ) (__)| 3 / ) ( &#39;) ( / ) (__)| 4 / ) ( &#39;) ( / ) (__)| 5 / ) ( &#39;) ( / ) (__)| 6 / ) ( &#39;) ( / ) (__)| 7 / ) ( &#39;) ( / ) (__)| 6 cats are hanging out, but then another leaves... 1 / ) ( &#39;) ( / ) (__)| 2 / ) ( &#39;) ( / ) (__)| 3 / ) ( &#39;) ( / ) (__)| 4 / ) ( &#39;) ( / ) (__)| 5 / ) ( &#39;) ( / ) (__)| 6 / ) ( &#39;) ( / ) (__)| 5 cats are hanging out, but then another leaves... 1 / ) ( &#39;) ( / ) (__)| 2 / ) ( &#39;) ( / ) (__)| 3 / ) ( &#39;) ( / ) (__)| 4 / ) ( &#39;) ( / ) (__)| 5 / ) ( &#39;) ( / ) (__)| 4 cats are hanging out, but then another leaves... 1 / ) ( &#39;) ( / ) (__)| 2 / ) ( &#39;) ( / ) (__)| 3 / ) ( &#39;) ( / ) (__)| 4 / ) ( &#39;) ( / ) (__)| 3 cats are hanging out, but then another leaves... 1 / ) ( &#39;) ( / ) (__)| 2 / ) ( &#39;) ( / ) (__)| 3 / ) ( &#39;) ( / ) (__)| 2 cats are hanging out, but then another leaves... 1 / ) ( &#39;) ( / ) (__)| 2 / ) ( &#39;) ( / ) (__)| 1 cats are hanging out, but then another leaves... 1 / ) ( &#39;) ( / ) (__)| Oh No, all the Cats have left... . Printing Sideways . class CatLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] cats; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public CatLoop() { //Storing Data in 2D arrays cats = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Cat 0 { &quot; 1 / &quot;, //[0][0] eyes &quot; ) ( &#39;) &quot;, //[0][1] chin &quot; ( / ) &quot;, //[0][2] body &quot; (__)| &quot; //[0][3] legs }, //Cat 1 { &quot; 2 / &quot;, //[1][0] eyes &quot; ) ( &#39;) &quot;, //[1][1] chin &quot; ( / ) &quot;, //[1][2] body &quot; (__)| &quot; //[1][3] legs }, //Cat 2 { &quot; 3 / &quot;, //[2][0] eyes &quot; ) ( &#39;) &quot;, //[2][1] chin &quot; ( / ) &quot;, //[2][2] body &quot; (__)| &quot; //[2][3] legs }, //Cat 3 { &quot; 4 / &quot;, //[3][0] eyes &quot; ) ( &#39;) &quot;, //[3][1] chin &quot; ( / ) &quot;, //[3][2] body &quot; (__)| &quot; //[3][3] legs }, //Cat 4 { &quot; 5 / &quot;, //[4][0] eyes &quot; ) ( &#39;) &quot;, //[4][1] chin &quot; ( / ) &quot;, //[4][2] body &quot; (__)| &quot; //[4][3] legs }, //Cat 5 { &quot; 6 / &quot;, //[5][0] eyes &quot; ) ( &#39;) &quot;, //[5][1] chin &quot; ( / ) &quot;, //[5][2] body &quot; (__)| &quot; //[5][3] legs }, //Cat 6 { &quot; 7 / &quot;, //[6][0] eyes &quot; ) ( &#39;) &quot;, //[6][1] chin &quot; ( / ) &quot;, //[6][2] body &quot; (__)| &quot; //[6][3] legs }, }; } /** * Loop and print cats in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Oh No the Cats Are Leaving!&quot;); // cats (non-primitive) defined in constructor knows its length int catCount = 7; for (int i = catCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Cats // concatenation (+) of the loop variable and string to form a countdown message System.out.println(&quot; &quot;); System.out.println(&quot; &quot;); System.out.println(i + &quot; cats are hanging out, but then another leaves...&quot;); System.out.println(&quot; &quot;); // printing the cats horizontally for (int col = 0; col &lt; 4; col++) { //cycles through the columns after each row is completed for (int row = 0; row &lt; catCount; row++) { //cycles through each row first System.out.print(cats[row][col] + &quot; &quot;); } System.out.println(&quot; &quot;); } catCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot; &quot;); System.out.println(&quot; &quot;); System.out.println(&quot;Oh No, all the Cats have left...&quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new CatLoop().printPoem(); //a new cat list and output in one step } } CatLoop.main(null); . Oh No the Cats Are Leaving! 7 cats are hanging out, but then another leaves... 1 / 2 / 3 / 4 / 5 / 6 / 7 / ) ( &#39;) ) ( &#39;) ) ( &#39;) ) ( &#39;) ) ( &#39;) ) ( &#39;) ) ( &#39;) ( / ) ( / ) ( / ) ( / ) ( / ) ( / ) ( / ) (__)| (__)| (__)| (__)| (__)| (__)| (__)| 6 cats are hanging out, but then another leaves... 1 / 2 / 3 / 4 / 5 / 6 / ) ( &#39;) ) ( &#39;) ) ( &#39;) ) ( &#39;) ) ( &#39;) ) ( &#39;) ( / ) ( / ) ( / ) ( / ) ( / ) ( / ) (__)| (__)| (__)| (__)| (__)| (__)| 5 cats are hanging out, but then another leaves... 1 / 2 / 3 / 4 / 5 / ) ( &#39;) ) ( &#39;) ) ( &#39;) ) ( &#39;) ) ( &#39;) ( / ) ( / ) ( / ) ( / ) ( / ) (__)| (__)| (__)| (__)| (__)| 4 cats are hanging out, but then another leaves... 1 / 2 / 3 / 4 / ) ( &#39;) ) ( &#39;) ) ( &#39;) ) ( &#39;) ( / ) ( / ) ( / ) ( / ) (__)| (__)| (__)| (__)| 3 cats are hanging out, but then another leaves... 1 / 2 / 3 / ) ( &#39;) ) ( &#39;) ) ( &#39;) ( / ) ( / ) ( / ) (__)| (__)| (__)| 2 cats are hanging out, but then another leaves... 1 / 2 / ) ( &#39;) ) ( &#39;) ( / ) ( / ) (__)| (__)| 1 cats are hanging out, but then another leaves... 1 / ) ( &#39;) ( / ) (__)| Oh No, all the Cats have left... . Further Questions . Is this program in more of an Imperative Programming Style or OOP style? . Java is an imperative programming language, so you have to be very specific with what you want the code to do, and not leave it open to interpretation. I think this program is more of an Imperative Programming Style, because you needed to be very specific to make sure the code worked, and Java didn&#39;t guess what you wanted based on the goal, you had to drag it there. . What did you Observe about Variable Assignments? . Variables were mostly assigned to moving parts of the program, and mainly for keeping track and counting down the monkeys, along with the monkey rows and columns. Nonessential things like the names of the rows or cols weren&#39;t made into variables. . Is Each Monkey an Object? . No, each monkey is not an object, but its parts are separate components in an array. Those parts of the array are called throughout the program and rearranged. . How do 2D Array References work? . Referencing an array or specific parts of it have a standard format of name-of-the-array[row#][col#], where row and col are integers or variables that have int values, like in this program. .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2022/09/18/iteration-2d-array.html",
            "relUrl": "/fastpages/jupyter/2022/09/18/iteration-2d-array.html",
            "date": " • Sep 18, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Solar System",
            "content": "",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/markdown/2022/09/16/solar-system.html",
            "relUrl": "/markdown/2022/09/16/solar-system.html",
            "date": " • Sep 16, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Week 3 Work",
            "content": "| Overview | Week 0 | Week 1 | Week 2 | Week 3 | Week 4 | . Review Ticket . Lesson on ifs and expressions . Deployment on AWS . Focus / Habits . Human Work Organization .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/organization/week3",
            "relUrl": "/organization/week3",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "If-Else Notebook",
            "content": "Definitions: . Conditional Statement: . A statement that only executes when a condition is true | . Boolean: . A primitive data type that can be either true or false | . If Statement: . The code in the body of an if statement will only execute if the code is true | . If-Else Statement: . Same as an if statement, but if the condition is false the code in the body of the else statement will execute | . (==) : equal to . (!=) : not equal to . (&lt;=) : less than or equal to . (&gt;=) : greater than or equal to . (&amp;&amp;) : and . (||) : or . Complex 5 layer While, If, and Else statement program: . import java.util.Scanner; // this is a program that would display if a score in a game is enough to advance to the next level public class Score { public static void main(String[] args) { // where the user inputs their score Scanner input = new Scanner(System.in); int score = 0; // makes it so the program runs until the user decides to quit the program while (score != -100) { System.out.print(&quot;Enter the student&#39;s score (or -100 to quit): &quot;); score = input.nextInt(); // if the score is less than 30, the user cannot advance if (score &gt;= 0 &amp;&amp; score &lt;= 29) { System.out.println(&quot; nScore: {&quot; + score + &quot;} | is not enough to advance to the next level.&quot;); } // if the score is then less than 80, they can go on, but haven&#39;t beaten the high score of 80 else { if (score &gt;= 30 &amp;&amp; score &lt;= 79) { System.out.println(&quot; nScore: {&quot; + score + &quot;} | is enough to advance, but is less than the high score.&quot;); } // if they got higher than 80, they&#39;ve gotten the high score else { if (score &gt;= 80 &amp;&amp; score &lt;= 100) { System.out.println(&quot; nScore: {&quot; + score + &quot;} | is enough to advance, and greater than the high score!&quot;); } // this is what runs if they decide to quit the program else { if (score == -100) { System.out.println(&quot;Goodbye!&quot;); } // this is if the user types in an invalid score else { System.out.println(&quot;The score entered is invalid. Please try again.&quot;); } } } } } } } Score.main(null); . Enter the student&#39;s score (or -100 to quit): Score: {13} | is not enough to advance to the next level. Enter the student&#39;s score (or -100 to quit): Score: {50} | is enough to advance, but is less than the high score. Enter the student&#39;s score (or -100 to quit): Score: {89} | is enough to advance, and greater than the high score! Enter the student&#39;s score (or -100 to quit): Goodbye! . De Morgan&#39;s Laws: . De Morgan&#39;s Law of Union: The complement of the union of the two sets A and B will be equal to the intersection of A&#39; (complement of A) and B&#39; (complement of B). This is also known as De Morgan&#39;s Law of Union. It can be represented as (A ∪ B)’ = A’ ∩ B’. | De Morgan&#39;s Law of Intersection: The complement of the intersection of A and B will be equal to the union of A&#39; and B&#39;. This condition is called De Morgan&#39;s law of Intersection. It can be given by (A ∩ B)’ = A’ ∪ B’. | . Simplified: . not(A and B) --&gt; notA or notB | not(A or B) --&gt; notA and notB | not(A and B) =/= notA and notB | .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2022/09/11/if-else.html",
            "relUrl": "/fastpages/jupyter/2022/09/11/if-else.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Focus and Habits",
            "content": "| Overview | Focus and Habits | . Psychology and the Good Life, by Laurie Santos . Main Points of the Video . This new enterprise or goal is possible. | We think life’s circumstances matter a lot, but they don’t matter as much as we think. | Taking control of life, is kind of hard. | Make time for social connection | Help others whenever you can | Make time for gratitude | Healthy practices matter a lot more than we think | Taking time to be in the present moment | Become wealthy in terms of time | . Goal Setting . 3 Personal Goals . Start a new hobby | Level up in my favorite video game | Improve focus and motivation in general | 3 Academic Goals . Score well on the SAT and ACT | Contribute more to clubs I am a part of | Do well in AP CSA | Gratitude Logs . In School . Thank you to my friends who sit with me at lunch and make me laugh | Thank you to my teachers that try their best to teach me | Thank you to my councilor who handled my schedule change | Thank you to my fellow guard members who helped me settle in and catch up | Thank you to my classmates for helping me understand classwork and class concepts | . At Home . Thank you to my mom who does literally everything for me, she’s amazing | Thank you to my dad for supporting me | Thank you to my brother for being entertaining sometimes | Thank you to my house for being a very comfortable house | .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/humanwork/focus-and-habits",
            "relUrl": "/humanwork/focus-and-habits",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Week 2 Work",
            "content": "| Overview | Week 0 | Week 1 | Week 2 | Week 3 | Week 4 | . Review Ticket . Code.org OOP Assignment . Console Math Menu . Life . Weekly Organization .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/organization/week2",
            "relUrl": "/organization/week2",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Game of Life",
            "content": "| Overview | Week 0 | Week 1 | Week 2 | Week 3 | Week 4 | . Remix of Game of Life . start step",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/organization/life",
            "relUrl": "/organization/life",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Grades Calculator",
            "content": "| Overview | Week 0 | Week 1 | Week 2 | Week 3 | Week 4 | . Grade Calculator . Total : 0.0 Count : 0.0 Average : 0.0 Input a score, and then press tab to add new number: .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/organization/grades",
            "relUrl": "/organization/grades",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Console Math Menu",
            "content": "// imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;__________________________ n&quot;); System.out.println(&quot;Choose from these choices:&quot;); System.out.println(&quot;__________________________ n&quot;); System.out.println(&quot;1 - Say Hello&quot;); System.out.println(&quot;2 - Output colors&quot;); System.out.println(&quot;3 - Loading in color&quot;); System.out.println(&quot;4 - Factorial Calculator&quot;); System.out.println(&quot;5 - Degrees to Radians&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;__________________________ n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World!&quot;); break; case 2: for(int i = 0; i &lt; COLORS.length; i++) // loop through COLORS array System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); break; case 3: System.out.print(&quot;Loading...&quot;); for (int i = 0; i &lt; 10; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot;Hey! &quot;); } break; case 4: System.out.print(&quot;Enter an Integer:&quot;); Scanner myObj = new Scanner(System.in); int number = myObj.nextInt(); int i,fact=1; for(i=1;i&lt;=number;i++){ fact=fact*i; } System.out.println(&quot; nFactorial of &quot;+number+&quot; is: &quot;+fact); break; case 5: System.out.print(&quot;Enter a Degree Value:&quot;); Scanner myObj2 = new Scanner(System.in); double number2 = myObj2.nextDouble(); double radians = Math.toRadians(number2); System.out.println(&quot; nValue in Radians = &quot; + String.format(&quot;%.2f&quot;, radians)); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . __________________________ Choose from these choices: __________________________ 1 - Say Hello 2 - Output colors 3 - Loading in color 4 - Factorial Calculator 5 - Degrees to Radians 0 - Quit __________________________ 4: Enter an Integer: Factorial of 4 is: 24 5: Enter a Degree Value: Value in Radians = 0.09 0: Goodbye, World! .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2022/09/02/menu.html",
            "relUrl": "/fastpages/jupyter/2022/09/02/menu.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Week 1 Work",
            "content": "| Overview | Week 0 | Week 1 | Week 2 | Week 3 | Week 4 | . Review Ticket . Code.org OOP Assignment . Primitives Notebook . Bash Notebook . Fastpages .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/organization/week1",
            "relUrl": "/organization/week1",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Using Objects",
            "content": "Console Based Menu . Java imports allow user input and console output to be displayed in Terminal . Objects Used . Makes Object from Scanner Class to obtain inputs / menu selection from User | Use System Class, to call static methods System.out.print and System.out.println to output to console | User Math Class, to call static method Math.random() to generate random number | . Other College Board Topics . A 2D array is used to store COLORS | A Control Structure, Switch, is used to process Menu select to code that performs related action | . Key PBL Topic . Menu class when instantiated with new Menu() takes over Frontend experience with user. This is relevant to Draw Lab in this article and how Spring Boot works in Web programming. Objects are intended to encapsulate Frontend, Backend or experience ... Web Site control flow, Database CRUD operations, or a Menu in terminal (this example) | . // imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;__________________________ n&quot;); System.out.println(&quot;Choose from these choices:&quot;); System.out.println(&quot;__________________________ n&quot;); System.out.println(&quot;1 - Say Hello&quot;); System.out.println(&quot;2 - Output colors&quot;); System.out.println(&quot;3 - Loading in color&quot;); System.out.println(&quot;4 - Factorial Calculator&quot;); System.out.println(&quot;5 - Degrees to Radians&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;__________________________ n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World!&quot;); break; case 2: for(int i = 0; i &lt; COLORS.length; i++) // loop through COLORS array System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); break; case 3: System.out.print(&quot;Loading...&quot;); for (int i = 0; i &lt; 10; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot;Hey! &quot;); } break; case 4: System.out.print(&quot;Enter an Integer:&quot;); Scanner myObj = new Scanner(System.in); int number = myObj.nextInt(); int i,fact=1; for(i=1;i&lt;=number;i++){ fact=fact*i; } System.out.println(&quot; nFactorial of &quot;+number+&quot; is: &quot;+fact); break; case 5: System.out.print(&quot;Enter a Degree Value:&quot;); Scanner myObj2 = new Scanner(System.in); double number2 = myObj2.nextDouble(); double radians = Math.toRadians(number2); System.out.println(&quot; nValue in Radians = &quot; + String.format(&quot;%.2f&quot;, radians)); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . __________________________ Choose from these choices: __________________________ 1 - Say Hello 2 - Output colors 3 - Loading in color 4 - Factorial Calculator 5 - Degrees to Radians 0 - Quit __________________________ 5: Enter a Degree Value: Value in Radians = 3.14 0: Goodbye, World! . Desktop GUI Menu . Swing and AWT imports allow Java to provide a Graphical User Interface on the desktop. . Other College Board Topics . A 1D array is used to store MENUS | A Control Structure, if-else if-else, is used to process Menu selection to code that performs related action | . Using Objects . Javax Swing UI (JFrame) | Timer with a TimerTask to allow action to repeatedly occur without halting thread. | . import java.awt.*; import java.awt.event.*; import javax.swing.*; import java.util.Timer; import java.util.TimerTask; // Graphical-User-Interface for Desktop in Java using Java Swing. public class MenuJFrame extends JFrame implements ActionListener { private JFrame frame; private JMenuBar menubar; private JMenu menu; private JLabel message = new JLabel(&quot;Click on Menu to select an action.&quot;); public final String[] MENUS = { // 1D Array of Menu Choices &quot;Hello&quot;, &quot;Colors&quot;, &quot;Loading bar&quot;, }; // Statics to assist with timer and messaging, single copy (no instance) private static int delay = 20; private static int step = 1; private static String hashes = &quot;&quot;; // Constructor enables the Frame instance, the object &quot;this.frame&quot; public MenuJFrame(String title) { // Initializing Key Objects frame = new JFrame(title); menubar = new JMenuBar(); menu = new JMenu(&quot;Menu&quot;); // Initializing Menu objects and adding actions for (String mx : MENUS) { JMenuItem m = new JMenuItem(mx); m.addActionListener(this); menu.add(m); } // Adding / Connecting Objects menubar.add(menu); frame.setJMenuBar(menubar); frame.add(message); // Sets JFrame close operation to Class variable JFrame.EXIT_ON_CLOSE frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // set the size of window based on objects frame.setSize(300,200); // makes the frame object visible according to properties previously set frame.setVisible(true); // flow of control shifts to frame object } // event from user selecting a menu option public void actionPerformed(ActionEvent e) { // local variable to ActinEvent String selection = e.getActionCommand(); // menu selection String msg; // local variable to create response from action final String[] COLORS = {&quot;Red&quot;, &quot;Green&quot;, &quot;Blue&quot;}; // add more colors here final String start_msg = &quot;&lt;html&gt;&quot;; // html building final String end_msg = &quot;&lt;/html&gt;&quot;; final String hash = &quot;#&quot;; // run code based on the menuItem that was selected if ( selection.equals(MENUS[0]) ) { // Hello Action msg = &quot;Hello, World&quot;; message.setText(msg); } else if ( selection.equals(MENUS[1]) ) { // Color Action msg = start_msg + &quot;&lt;p&gt;&quot; + selection + &quot;&lt;/p&gt;&quot;; for (String color : COLORS) { msg += &quot;&lt;font color=&quot; + color + &quot;&gt;&quot; + color + &quot; &lt;/font&gt;&quot;; } msg += end_msg; message.setText(msg); } else { // Loading Bar Action String loading = &quot;&lt;p&gt;Loading&lt;/p&gt;&quot;; // Code to run on a Timer Timer timer = new Timer(); TimerTask task = new TimerTask() { public void run() { // Method for TimerTask // Static and Local variables used to manage message building int random = (int) (Math.random() * COLORS.length); // random logic MenuJFrame.hashes += &quot;&lt;font color=&quot; + COLORS[random] + &quot;&gt;&quot; + hash + &quot;&lt;/font&gt;&quot;; String msg = start_msg + loading + hashes + end_msg; message.setText(msg); // Shutdown timer and reset data if(MenuJFrame.step++ &gt; MenuJFrame.delay) { MenuJFrame.step = 1; MenuJFrame.hashes=&quot;&quot;; timer.cancel(); } }; }; // Schedule task and interval timer.schedule(task, 200, 200); message.setText(start_msg + loading + hash + end_msg); // prime/initial display } } // Driver turn over control the GUI public static void main(String[] args) { // Activates an instance of MenuJFrame class, which makes a JFrame object new MenuJFrame(&quot;Menu&quot;); } } MenuJFrame.main(null); . Code.org Object Oriented Programming - The Neighborhood . Students learn fundamental Java concepts as they navigate and interact with The Neighborhood with Painter objects and create new types of Painters to expand the capabilities of their programs. . College Board Topics . Inheritance (extends) is introduced early in this activity | Conditional statements, While loops, and Boolean expressions | . Using Objects . Code.org Painter class and objects | . Activity Page Start: Code.org CSA1 . Hacks . College Board and CTE competences. . Documentation / Analysis. Describe with Markdown Cell(s) and triple backtick code fragments that answers to the following from your work... Explain where a Class is defined | Explain where an instances of a Class is defined | Explain where an object is Calling a Method | Explain where an object is Mutating data | Describe Console, GUI differences, or Code.org differences. | . | Option A Exploration work Build a new Console or GUI lab for your own solution of interest, this is great opportunity to visualize data from Math, Physics, or other class using Math library. Look to make these changes in your work Make constructors of different signatures. | Use Wrapper Classes of Integer and Double for defining object instance or static data in the Class | Use the Math Class in performing calculations | . | Option B Code.org learning Follow the Neighborhood lessons and work through 11 to 15 lessons. | .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/unit/2",
            "relUrl": "/unit/2",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Primitives Notebook",
            "content": "Listing the types of primitives: . public class ListPrimitives { public static void main(String[] args) { // assigning variable values int anInt = 505; double aDouble = 99.9; boolean aBoolean = true; char aChar=&#39; u0021&#39;; // not a primitive but essential String aString = &quot;Look over there!&quot;; System.out.println(&quot;Types of Primitives:&quot;); System.out.println(&quot;--&gt; Integer: &quot; + anInt); System.out.println(&quot;--&gt; Double: &quot; + aDouble); System.out.println(&quot;--&gt; Character: &quot; + aChar); System.out.println(&quot;--&gt; Boolean: &quot; + aBoolean); System.out.println(&quot;--&gt; String: &quot; + aString); } } ListPrimitives.main(null) . Types of Primitives: --&gt; Integer: 505 --&gt; Double: 99.9 --&gt; Character: ! --&gt; Boolean: true --&gt; String: Look over there! . Division with ints and doubles: . public class Division { public static void main(String[] args) { // setting the variables int divided = 17 / 24; double doubleDivided = 17.0 / 24.0; // printing out the division in int and double form System.out.println(&quot;Integer division with 17/24 is: &quot; + divided); // %.2f limits the # of decimal values displayed System.out.println(&quot;Double division with 17.0/24.0 is: &quot; + String.format(&quot;%.2f&quot;, doubleDivided)); } } // makes it so you can print the code&#39;s output Division.main(null) . Integer division with 17/24 is: 0 Double division with 17.0/24.0 is: 0.71 . Celsius to Fahrenheit Converter . public class CtoF { public static void main(String[] args) { System.out.println(&quot;Celsius to Fahrenheit Converter:&quot;); System.out.println(&quot;Degrees Celsius: 55 --&gt;&quot;); int celsius = 55; int fahrenheit = ((celsius*9)/5)+32; System.out.println(&quot; tDegrees Fahrenheit: &quot; + fahrenheit); System.out.println(&quot;Degrees Celsius: 78 --&gt;&quot;); int celsius1 = 78; int fahrenheit1 = ((celsius1*9)/5)+32; System.out.println(&quot; tDegrees Fahrenheit: &quot; + fahrenheit1); System.out.println(&quot;Degrees Celsius: 11 --&gt;&quot;); int celsius2 = 11; int fahrenheit2 = ((celsius2*9)/5)+32; System.out.println(&quot; tDegrees Fahrenheit: &quot; + fahrenheit2); } } // makes it so you can print the code&#39;s output CtoF.main(null) . Celsius to Fahrenheit Converter: Degrees Celsius: 55 --&gt; Degrees Fahrenheit: 131 Degrees Celsius: 78 --&gt; Degrees Fahrenheit: 172 Degrees Celsius: 11 --&gt; Degrees Fahrenheit: 51 . Inputting primitive data: . // java style to import library import java.util.Scanner; // class must alway have 1st letter as uppercase, CamelCase is Java Class convention public class ScanPrimitives { public static void main(String[] args) { Scanner input; // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter an integer: &quot;); try { int sampleInputInt = input.nextInt(); System.out.println(sampleInputInt); } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); // primitive double input = new Scanner(System.in); System.out.print(&quot;Enter a double: &quot;); try { double sampleInputDouble = input.nextDouble(); System.out.println(sampleInputDouble); } catch (Exception e) { // if not a number System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } input.close(); // primitive boolean input = new Scanner(System.in); System.out.print(&quot;Enter a boolean: &quot;); try { boolean sampleInputBoolean = input.nextBoolean(); System.out.println(sampleInputBoolean); } catch (Exception e) { // if not true or false System.out.println(&quot;Not an boolean (true or false), &quot; + e); } input.close(); // wrapper class String input = new Scanner(System.in); System.out.print(&quot;Enter a String: &quot;); try { String sampleInputString = input.nextLine(); System.out.println(sampleInputString); } catch (Exception e) { // this may never happen System.out.println(&quot;Not an String, &quot; + e); } input.close(); } } ScanPrimitives.main(null); . Enter an integer: 2 Enter a double: 2.0 Enter a boolean: true Enter a String: hi .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2022/08/28/primitives.html",
            "relUrl": "/fastpages/jupyter/2022/08/28/primitives.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Bash Notebook",
            "content": "echo &quot;The currently installed python verision:&quot; python --version echo &quot;&quot; echo &quot;The currently installed conda verion:&quot; conda --version echo &quot;&quot; echo &quot;The currently installed java features:&quot; java --version echo &quot;&quot; echo &quot;The currently installed jupyter packages:&quot; jupyter --version . The currently installed python verision: Python 3.9.12 The currently installed conda verion: conda 4.14.0 The currently installed java features: openjdk 11.0.16 2022-07-19 OpenJDK Runtime Environment (build 11.0.16+8-post-Ubuntu-0ubuntu120.04) OpenJDK 64-Bit Server VM (build 11.0.16+8-post-Ubuntu-0ubuntu120.04, mixed mode, sharing) The currently installed jupyter packages: Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 . Jupyter Kernel Checks: . jupyter kernelspec list . Available kernels: bash /home/saathvika/.local/share/jupyter/kernels/bash java /home/saathvika/.local/share/jupyter/kernels/java javascript /home/saathvika/.local/share/jupyter/kernels/javascript python3 /home/saathvika/.local/share/jupyter/kernels/python3 . Anaconda Location Check: . echo &quot;Folders inside WSL:&quot; ls / echo &quot;&quot; echo &quot;Folders inside Home:&quot; ls /home echo &quot;&quot; echo &quot;Folders inside Saathvika:&quot; ls /home/saathvika echo &quot;&quot; echo &quot;We&#39;ve found Anaconda!&quot; . Folders inside WSL: bin etc lib libx32 mnt root snap tmp wslLdjHgc boot home lib32 lost+found opt run srv usr wsldnLbHg dev init lib64 media proc sbin sys var Folders inside Home: saathvika Folders inside Saathvika: APCSA Anaconda3-2022.05-Linux-x86_64.sh vscode APCSA-Fastpages Anaconda3-2022.05-Linux-x86_64.sh.1 APCSP anaconda3 We&#39;ve found Anaconda! .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2022/08/28/bash.html",
            "relUrl": "/fastpages/jupyter/2022/08/28/bash.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Week 0 Work",
            "content": "| Overview | Week 0 | Week 1 | Week 2 | Week 3 | Week 4 | . Review Ticket . Python Tester Notebook . Java Tester Notebook .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/organization/week0",
            "relUrl": "/organization/week0",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Python Notebook",
            "content": "print(&quot;Hello&quot;) . Hello .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2022/08/22/python.html",
            "relUrl": "/fastpages/jupyter/2022/08/22/python.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Java Notebook",
            "content": "public class Hello { public static void main(String[] args) { System.out.println(&quot;Hello World!&quot;); } } Hello.main(null); . Hello World! .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/fastpages/jupyter/2022/08/22/java.html",
            "relUrl": "/fastpages/jupyter/2022/08/22/java.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Example Markdown Post",
            "content": "Example Markdown Post . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() .",
            "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/markdown/2022/08/20/new-page-markdown-post.html",
            "relUrl": "/markdown/2022/08/20/new-page-markdown-post.html",
            "date": " • Aug 20, 2022"
        }
        
    
  

  
  

  

  

  

  
  

  

  
  

  

  
  

  
  

  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://saathvika-ajith.github.io/APCSA-Fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}